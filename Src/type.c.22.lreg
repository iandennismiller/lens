
;; Function lookupTypeMask



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:11000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 65 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 69 costs: AREG:4000 DREG:4000 CREG:4000 SIREG:4000 DIREG:0 AD_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 INDEX_REGS:4000 LEGACY_REGS:4000 GENERAL_REGS:4000 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000
  Register 70 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:2000 CREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref AREG, else GENERAL_REGS
  Register 66 pref GENERAL_REGS or none
  Register 67 pref CREG, else GENERAL_REGS
  Register 68 pref GENERAL_REGS or none
  Register 69 pref DIREG, else GENERAL_REGS
  Register 70 pref CREG, else GENERAL_REGS
  Register 71 pref AREG, else GENERAL_REGS
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref GENERAL_REGS or none
  Register 78 pref AREG, else GENERAL_REGS
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref FLOAT_INT_SSE_REGS or none
84 registers.

Register 58 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 59 used 2 times across 3 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 5 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 4 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 11; set 1 time; pref AREG, else GENERAL_REGS.

Register 66 used 2 times across 3 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 0; set 1 time; pref CREG, else GENERAL_REGS.

Register 68 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 69 used 3 times across 5 insns in block 0; set 2 times; dies in 2 places; pref DIREG, else GENERAL_REGS.

Register 70 used 2 times across 5 insns in block 0; set 1 time; pref CREG, else GENERAL_REGS.

Register 71 used 2 times across 3 insns in block 0; set 1 time; 1 bytes; pref AREG, else GENERAL_REGS.

Register 72 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 73 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 75 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 77 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 78 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS.

Register 79 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 82 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

12 basic blocks, 20 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  3 5
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  6 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  1 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  6 5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  4 (fallthru)
Successors:  1 6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  2 4 5 (fallthru)
Successors:  7 (fallthru) 10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  8 (fallthru) 10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  7 (fallthru)
Successors:  9 (fallthru) 10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 0, count 0, freq 0.
Predecessors:  8 (fallthru)
Successors:  11
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 10 prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  6 7 8
Successors:  11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 11 prev 10, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  9 10 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 1.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 2.
;; Register 63 in 1.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 2.
;; Register 68 in 0.
;; Register 70 in 2.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 15 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 15 6 8 0 (set (reg:SI 66 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 8 15 9 0 (set (reg:SI 70)
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 69 [ typeName ])
        (reg:SI 66 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ typeName ])
        (nil)))

(insn 10 9 11 0 (set (reg:QI 71)
        (const_int 0 [0x0])) 56 {*movqi_1} (nil)
    (nil))

(insn 11 10 12 0 (set (reg:SI 19 dirflag)
        (const_int 0 [0x0])) 634 {cld} (nil)
    (nil))

(insn 12 11 13 0 (parallel [
            (set (reg:SI 67)
                (unspec:SI [
                        (mem:BLK (reg:SI 69 [ typeName ]) [0 A8])
                        (reg:QI 71)
                        (const_int 1 [0x1])
                        (reg:SI 70)
                    ] 20))
            (use (reg:SI 19 dirflag))
            (clobber (reg:SI 69 [ typeName ]))
            (clobber (reg:CC 17 flags))
        ]) 665 {*strlenqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 69 [ typeName ])
            (expr_list:REG_DEAD (reg:SI 19 dirflag)
                (expr_list:REG_DEAD (reg:SI 70)
                    (expr_list:REG_DEAD (reg:QI 71)
                        (expr_list:REG_DEAD (reg:SI 69 [ typeName ])
                            (expr_list:REG_UNUSED (reg:CC 17 flags)
                                (expr_list:REG_UNUSED (reg:SI 69 [ typeName ])
                                    (nil))))))))))

(insn 13 12 14 0 (set (reg:SI 68)
        (not:SI (reg:SI 67))) 398 {*one_cmplsi2_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67)
        (nil)))

(insn 14 13 16 0 (parallel [
            (set (reg:SI 64 [ D.8288 ])
                (plus:SI (reg:SI 68)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 68)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 16 14 18 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 len+0 S4 A64])
        (reg:SI 64 [ D.8288 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.8288 ])
        (nil)))

(insn 18 16 19 0 (set (reg/f:SI 72)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 19 18 20 0 (set (reg:SI 73 [ TypeTable ])
        (mem/i:SI (reg/f:SI 72) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 72)
        (nil)))

(insn 20 19 21 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 73 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ TypeTable ])
        (nil)))

(insn 21 20 107 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(note 107 21 22 0 NOTE_INSN_LOOP_BEG)

(jump_insn 22 107 23 0 (set (pc)
        (label_ref 30)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 23 22 24)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 24 23 25 1 3 "" [2 uses])

(note 25 24 27 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 1 (set (reg/f:SI 74 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 1 (set (reg:SI 75 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 74 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 74 [ T ])
        (nil)))

(insn 29 28 30 1 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 75 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 75 [ <variable>.next ])
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 30 29 31 2 2 "" [1 uses])

(note 31 30 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 33 31 34 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 34 33 36 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 36 34 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 38 3 (set (reg:SI 63 [ len.7 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 len+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 38 37 39 3 (set (reg/f:SI 76 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 39 38 40 3 (set (reg:SI 62 [ D.8290 ])
        (mem/s/f/j:SI (reg/f:SI 76 [ T ]) [0 <variable>.name+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 76 [ T ])
        (nil)))

(insn 40 39 41 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 63 [ len.7 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ len.7 ])
        (nil)))

(insn 41 40 42 3 (set (reg:SI 77 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 42 41 43 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 77 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ typeName ])
        (nil)))

(insn 43 42 44 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 62 [ D.8290 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8290 ])
        (nil)))

(call_insn/u 44 43 45 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_strncmp$stub") <function_decl 0x40b49480 strncmp>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (nil)))

(insn 45 44 46 3 (set (reg:SI 78)
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 46 45 47 3 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
        (reg:SI 78)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78)
        (nil)))

(insn 47 46 48 3 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 48 47 50 3 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 50 48 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 52 51 54 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 54 52 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 5 (set (reg/f:SI 79 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 56 55 57 5 (set (reg:SI 61 [ D.8291 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 79 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79 [ T ])
        (nil)))

(insn 57 56 58 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 61 [ D.8291 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8291 ])
        (nil)))

(jump_insn 58 57 108 5 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 108 58 59 5 NOTE_INSN_LOOP_END)

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 59 108 60 6 4 "" [2 uses])

(note 60 59 62 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 62 60 63 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 63 62 65 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 65 63 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 67 7 (set (reg/f:SI 80 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 67 66 68 7 (set (reg:SI 60 [ D.8292 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 80 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 80 [ T ])
        (nil)))

(insn 68 67 69 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8292 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8292 ])
        (nil)))

(jump_insn 69 68 71 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 71 69 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 72 71 73 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 73 72 75 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 75 73 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 77 75 78 9 (set (reg/f:SI 81 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 78 77 79 9 (set (reg:SI 59 [ D.8293 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 81 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 81 [ T ])
        (nil)))

(insn 79 78 80 9 (set (reg/f:SI 82 [ result ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 result+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 80 79 82 9 (set (mem:SI (reg/f:SI 82 [ result ]) [0 S4 A32])
        (reg:SI 59 [ D.8293 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8293 ])
        (expr_list:REG_DEAD (reg/f:SI 82 [ result ])
            (nil))))

(insn 82 80 83 9 (set (reg:SI 58 [ D.8294 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 83 82 84 9 (set (pc)
        (label_ref 89)) 517 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

(barrier 84 83 85)

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 85 84 86 10 8 "" [3 uses])

(note 86 85 88 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 88 86 89 10 (set (reg:SI 58 [ D.8294 ])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
(code_label 89 88 90 11 12 "" [1 uses])

(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 94 11 (set (reg:SI 65 [ <result> ])
        (reg:SI 58 [ D.8294 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8294 ])
        (nil)))

(note 94 91 97 11 NOTE_INSN_FUNCTION_END)

(insn 97 94 103 11 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 65 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ <result> ])
        (nil)))

(insn 103 97 0 11 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 11, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function lookupType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:11000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 64 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 66 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 68 costs: AREG:4000 DREG:4000 CREG:4000 SIREG:4000 DIREG:0 AD_REGS:4000 Q_REGS:4000 NON_Q_REGS:4000 INDEX_REGS:4000 LEGACY_REGS:4000 GENERAL_REGS:4000 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000
  Register 69 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:2000 CREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref AREG, else GENERAL_REGS
  Register 65 pref GENERAL_REGS or none
  Register 66 pref CREG, else GENERAL_REGS
  Register 67 pref GENERAL_REGS or none
  Register 68 pref DIREG, else GENERAL_REGS
  Register 69 pref CREG, else GENERAL_REGS
  Register 70 pref AREG, else GENERAL_REGS
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref AREG, else GENERAL_REGS
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref FLOAT_INT_SSE_REGS or none
83 registers.

Register 58 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 59 used 2 times across 3 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 3 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 5 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 4 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 8; set 1 time; pref AREG, else GENERAL_REGS.

Register 65 used 2 times across 3 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 0; set 1 time; pref CREG, else GENERAL_REGS.

Register 67 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 68 used 3 times across 5 insns in block 0; set 2 times; dies in 2 places; pref DIREG, else GENERAL_REGS.

Register 69 used 2 times across 5 insns in block 0; set 1 time; pref CREG, else GENERAL_REGS.

Register 70 used 2 times across 3 insns in block 0; set 1 time; 1 bytes; pref AREG, else GENERAL_REGS.

Register 71 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 72 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 74 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 76 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 77 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS.

Register 78 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 79 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

9 basic blocks, 14 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  3
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  4 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  1 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  2 3 (fallthru)
Successors:  5 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  4 (fallthru)
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  4 5
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 8 prev 7, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  6 7 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 1.
;; Register 60 in 1.
;; Register 61 in 2.
;; Register 62 in 1.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 2.
;; Register 67 in 0.
;; Register 69 in 2.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 15 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 15 6 8 0 (set (reg:SI 65 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 8 15 9 0 (set (reg:SI 69)
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 68 [ typeName ])
        (reg:SI 65 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ typeName ])
        (nil)))

(insn 10 9 11 0 (set (reg:QI 70)
        (const_int 0 [0x0])) 56 {*movqi_1} (nil)
    (nil))

(insn 11 10 12 0 (set (reg:SI 19 dirflag)
        (const_int 0 [0x0])) 634 {cld} (nil)
    (nil))

(insn 12 11 13 0 (parallel [
            (set (reg:SI 66)
                (unspec:SI [
                        (mem:BLK (reg:SI 68 [ typeName ]) [0 A8])
                        (reg:QI 70)
                        (const_int 1 [0x1])
                        (reg:SI 69)
                    ] 20))
            (use (reg:SI 19 dirflag))
            (clobber (reg:SI 68 [ typeName ]))
            (clobber (reg:CC 17 flags))
        ]) 665 {*strlenqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:SI 68 [ typeName ])
            (expr_list:REG_DEAD (reg:SI 19 dirflag)
                (expr_list:REG_DEAD (reg:SI 69)
                    (expr_list:REG_DEAD (reg:QI 70)
                        (expr_list:REG_DEAD (reg:SI 68 [ typeName ])
                            (expr_list:REG_UNUSED (reg:CC 17 flags)
                                (expr_list:REG_UNUSED (reg:SI 68 [ typeName ])
                                    (nil))))))))))

(insn 13 12 14 0 (set (reg:SI 67)
        (not:SI (reg:SI 66))) 398 {*one_cmplsi2_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66)
        (nil)))

(insn 14 13 16 0 (parallel [
            (set (reg:SI 63 [ D.8316 ])
                (plus:SI (reg:SI 67)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 67)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 16 14 18 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 len+0 S4 A64])
        (reg:SI 63 [ D.8316 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8316 ])
        (nil)))

(insn 18 16 19 0 (set (reg/f:SI 71)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 19 18 20 0 (set (reg:SI 72 [ TypeTable ])
        (mem/i:SI (reg/f:SI 71) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 71)
        (nil)))

(insn 20 19 21 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 72 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ TypeTable ])
        (nil)))

(insn 21 20 96 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(note 96 21 22 0 NOTE_INSN_LOOP_BEG)

(jump_insn 22 96 23 0 (set (pc)
        (label_ref 30)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 23 22 24)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 24 23 25 1 17 "" [1 uses])

(note 25 24 27 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 1 (set (reg/f:SI 73 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 1 (set (reg:SI 74 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 73 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 73 [ T ])
        (nil)))

(insn 29 28 30 1 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 74 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ <variable>.next ])
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 30 29 31 2 16 "" [1 uses])

(note 31 30 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 33 31 34 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 34 33 36 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 36 34 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 38 3 (set (reg:SI 62 [ len.8 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 len+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 38 37 39 3 (set (reg/f:SI 75 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 39 38 40 3 (set (reg:SI 61 [ D.8318 ])
        (mem/s/f/j:SI (reg/f:SI 75 [ T ]) [0 <variable>.name+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 75 [ T ])
        (nil)))

(insn 40 39 41 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 62 [ len.8 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ len.8 ])
        (nil)))

(insn 41 40 42 3 (set (reg:SI 76 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 42 41 43 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 76 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ typeName ])
        (nil)))

(insn 43 42 44 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ D.8318 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8318 ])
        (nil)))

(call_insn/u 44 43 45 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_strncmp$stub") <function_decl 0x40b49480 strncmp>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (nil)))

(insn 45 44 46 3 (set (reg:SI 77)
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 46 45 47 3 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
        (reg:SI 77)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77)
        (nil)))

(insn 47 46 48 3 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 48 47 97 3 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 97 48 49 3 NOTE_INSN_LOOP_END)

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 49 97 50 4 18 "" [1 uses])

(note 50 49 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 50 53 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 53 52 55 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 55 53 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 57 56 59 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 59 57 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 61 59 62 6 (set (reg/f:SI 78 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 62 61 63 6 (set (reg:SI 60 [ D.8319 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 78 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 78 [ T ])
        (nil)))

(insn 63 62 64 6 (set (reg/f:SI 79 [ type ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 64 63 66 6 (set (mem:SI (reg/f:SI 79 [ type ]) [0 S4 A32])
        (reg:SI 60 [ D.8319 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8319 ])
        (expr_list:REG_DEAD (reg/f:SI 79 [ type ])
            (nil))))

(insn 66 64 67 6 (set (reg/f:SI 80 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 67 66 68 6 (set (reg:SI 59 [ D.8320 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 80 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 80 [ T ])
        (nil)))

(insn 68 67 69 6 (set (reg/f:SI 81 [ typeClass ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 69 68 71 6 (set (mem:SI (reg/f:SI 81 [ typeClass ]) [0 S4 A32])
        (reg:SI 59 [ D.8320 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8320 ])
        (expr_list:REG_DEAD (reg/f:SI 81 [ typeClass ])
            (nil))))

(insn 71 69 72 6 (set (reg:SI 58 [ D.8321 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 72 71 73 6 (set (pc)
        (label_ref 78)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

(barrier 73 72 74)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 74 73 75 7 20 "" [2 uses])

(note 75 74 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 77 75 78 7 (set (reg:SI 58 [ D.8321 ])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
(code_label 78 77 79 8 23 "" [1 uses])

(note 79 78 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 83 8 (set (reg:SI 64 [ <result> ])
        (reg:SI 58 [ D.8321 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8321 ])
        (nil)))

(note 83 80 86 8 NOTE_INSN_FUNCTION_END)

(insn 86 83 92 8 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 64 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ <result> ])
        (nil)))

(insn 92 86 0 8 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function lookupGroupType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:11000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref FLOAT_INT_SSE_REGS or none
69 registers.

Register 58 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 2 insns in block 7; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 66 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

8 basic blocks, 14 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  5 1 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  6 2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  6 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  6 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  5 (fallthru) 6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  0 4 (fallthru)
Successors:  7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  1 2 3 4
Successors:  7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 7 prev 6, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  5 6 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 62 [ type ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 62 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ type ])
        (nil)))

(insn 10 9 11 0 (set (reg:SI 63 [ typeClass ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 11 10 12 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 63 [ typeClass ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ typeClass ])
        (nil)))

(insn 12 11 13 0 (set (reg:SI 64 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 13 12 14 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 64 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ typeName ])
        (nil)))

(call_insn 14 13 15 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lookupType") [flags 0x103] <function_decl 0x709200 lookupType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 15 14 16 0 (set (reg:SI 60 [ D.8336 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 16 15 17 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8336 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8336 ])
        (nil)))

(jump_insn 17 16 19 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 19 17 20 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 1 (set (reg/f:SI 65 [ typeClass ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 1 (set (reg:SI 59 [ D.8337 ])
        (mem:SI (reg/f:SI 65 [ typeClass ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 65 [ typeClass ])
        (nil)))

(insn 22 21 23 1 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 class+0 S4 A32])
        (reg:SI 59 [ D.8337 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8337 ])
        (nil)))

(insn 23 22 24 1 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 class+0 S4 A32])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 24 23 26 1 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 26 24 27 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 28 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 class+0 S4 A32])
            (const_int 2 [0x2]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 28 27 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 30 28 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 class+0 S4 A32])
            (const_int 3 [0x3]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 32 31 34 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 34 32 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 36 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 class+0 S4 A32])
            (const_int 4 [0x4]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 36 35 37 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 37 36 38 5 27 "" [1 uses])

(note 38 37 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 40 38 41 5 (set (reg:SI 66 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 41 40 42 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 66 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ typeName ])
        (nil)))

(insn 42 41 43 5 (set (reg/f:SI 67)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC12") [flags 0x2] <string_cst 0x735e00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 43 42 44 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 67)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 67)
        (nil)))

(call_insn 44 43 46 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_warning$stub") <function_decl 0x69de00 warning>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 46 44 47 5 (set (reg:SI 58 [ D.8338 ])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 47 46 48 5 (set (pc)
        (label_ref 53)) 517 {jump} (nil)
    (nil))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

(barrier 48 47 49)

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 49 48 50 6 29 "" [4 uses])

(note 50 49 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 52 50 53 6 (set (reg:SI 58 [ D.8338 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
(code_label 53 52 54 7 33 "" [1 uses])

(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 58 7 (set (reg:SI 61 [ <result> ])
        (reg:SI 58 [ D.8338 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8338 ])
        (nil)))

(note 58 55 61 7 NOTE_INSN_FUNCTION_END)

(insn 61 58 67 7 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 61 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ <result> ])
        (nil)))

(insn 67 61 0 7 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 7, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function lookupTypeName



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:11000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref FLOAT_INT_SSE_REGS or none
70 registers.

Register 58 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 8; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 67 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 68 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

9 basic blocks, 14 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  3 4
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  5 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  1 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  1 5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  2 4 (fallthru)
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 8 prev 7, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  6 7 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg/f:SI 62)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 63 [ TypeTable ])
        (mem/i:SI (reg/f:SI 62) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 62)
        (nil)))

(insn 10 9 69 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 63 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ TypeTable ])
        (nil)))

(note 69 10 11 0 NOTE_INSN_LOOP_BEG)

(jump_insn 11 69 12 0 (set (pc)
        (label_ref 19)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 12 11 13)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 13 12 14 1 38 "" [2 uses])

(note 14 13 16 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 16 14 17 1 (set (reg/f:SI 64 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 18 1 (set (reg:SI 65 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 64 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 64 [ T ])
        (nil)))

(insn 18 17 19 1 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 65 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ <variable>.next ])
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 19 18 20 2 37 "" [1 uses])

(note 20 19 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 22 20 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 23 22 25 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 25 23 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 3 (set (reg/f:SI 66 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 3 (set (reg:SI 60 [ D.8352 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 66 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 66 [ T ])
        (nil)))

(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8352 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8352 ])
        (nil)))

(jump_insn 29 28 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 31 29 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 4 (set (reg/f:SI 67 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 33 32 34 4 (set (reg:SI 59 [ D.8353 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 67 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 67 [ T ])
        (nil)))

(insn 34 33 35 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 59 [ D.8353 ])
            (mem/i:SI (reg/f:SI 16 argp) [0 typeMask+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8353 ])
        (nil)))

(jump_insn 35 34 70 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 70 35 36 4 NOTE_INSN_LOOP_END)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 36 70 37 5 39 "" [1 uses])

(note 37 36 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 40 39 42 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 42 40 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 6 (set (reg/f:SI 68 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 44 43 45 6 (set (reg:SI 58 [ D.8354 ])
        (mem/s/f/j:SI (reg/f:SI 68 [ T ]) [0 <variable>.name+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 68 [ T ])
        (nil)))

(jump_insn 45 44 46 6 (set (pc)
        (label_ref 51)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

(barrier 46 45 47)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 47 46 48 7 42 "" [1 uses])

(note 48 47 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 50 48 51 7 (set (reg:SI 58 [ D.8354 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
(code_label 51 50 52 8 44 "" [1 uses])

(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 56 8 (set (reg:SI 61 [ <result> ])
        (reg:SI 58 [ D.8354 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8354 ])
        (nil)))

(note 56 53 59 8 NOTE_INSN_FUNCTION_END)

(insn 59 56 65 8 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 61 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ <result> ])
        (nil)))

(insn 65 59 0 8 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function setTypeData



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:11000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref FLOAT_INT_SSE_REGS or none
71 registers.

Register 58 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 8; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 67 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 68 used 2 times across 3 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 69 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

9 basic blocks, 14 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  3 4
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  5 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  1 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  1 5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  2 4 (fallthru)
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 8 prev 7, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  6 7 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 1.
;; Register 69 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg/f:SI 62)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 63 [ TypeTable ])
        (mem/i:SI (reg/f:SI 62) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 62)
        (nil)))

(insn 10 9 73 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 63 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ TypeTable ])
        (nil)))

(note 73 10 11 0 NOTE_INSN_LOOP_BEG)

(jump_insn 11 73 12 0 (set (pc)
        (label_ref 19)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 12 11 13)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 13 12 14 1 49 "" [2 uses])

(note 14 13 16 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 16 14 17 1 (set (reg/f:SI 64 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 18 1 (set (reg:SI 65 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 64 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 64 [ T ])
        (nil)))

(insn 18 17 19 1 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 65 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ <variable>.next ])
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 19 18 20 2 48 "" [1 uses])

(note 20 19 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 22 20 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 23 22 25 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 25 23 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 3 (set (reg/f:SI 66 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 3 (set (reg:SI 60 [ D.8369 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 66 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 66 [ T ])
        (nil)))

(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8369 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8369 ])
        (nil)))

(jump_insn 29 28 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 31 29 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 4 (set (reg/f:SI 67 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 33 32 34 4 (set (reg:SI 59 [ D.8370 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 67 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 67 [ T ])
        (nil)))

(insn 34 33 35 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 59 [ D.8370 ])
            (mem/i:SI (reg/f:SI 16 argp) [0 typeMask+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8370 ])
        (nil)))

(jump_insn 35 34 74 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 74 35 36 4 NOTE_INSN_LOOP_END)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 36 74 37 5 50 "" [1 uses])

(note 37 36 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 40 39 42 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 42 40 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 44 42 45 6 (set (reg/f:SI 68 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 45 44 46 6 (set (reg:SI 69 [ data ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 data+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 46 45 48 6 (set (mem/s/j:SI (plus:SI (reg/f:SI 68 [ T ])
                (const_int 12 [0xc])) [0 <variable>.data+0 S4 A32])
        (reg:SI 69 [ data ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ data ])
        (expr_list:REG_DEAD (reg/f:SI 68 [ T ])
            (nil))))

(insn 48 46 49 6 (set (reg:SI 58 [ D.8371 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 49 48 50 6 (set (pc)
        (label_ref 55)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

(barrier 50 49 51)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 51 50 52 7 53 "" [1 uses])

(note 52 51 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 52 55 7 (set (reg:SI 58 [ D.8371 ])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
(code_label 55 54 56 8 55 "" [1 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 60 8 (set (reg:SI 61 [ <result> ])
        (reg:SI 58 [ D.8371 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8371 ])
        (nil)))

(note 60 57 63 8 NOTE_INSN_FUNCTION_END)

(insn 63 60 69 8 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 61 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ <result> ])
        (nil)))

(insn 69 63 0 8 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function getTypeData



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:11000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref FLOAT_INT_SSE_REGS or none
70 registers.

Register 58 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 8; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 67 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 68 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

9 basic blocks, 14 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  3 4
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  5 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  1 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  1 5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  2 4 (fallthru)
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

Basic block 8 prev 7, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  6 7 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg/f:SI 62)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 63 [ TypeTable ])
        (mem/i:SI (reg/f:SI 62) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 62)
        (nil)))

(insn 10 9 69 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 63 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ TypeTable ])
        (nil)))

(note 69 10 11 0 NOTE_INSN_LOOP_BEG)

(jump_insn 11 69 12 0 (set (pc)
        (label_ref 19)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 12 11 13)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 13 12 14 1 60 "" [2 uses])

(note 14 13 16 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 16 14 17 1 (set (reg/f:SI 64 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 18 1 (set (reg:SI 65 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 64 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 64 [ T ])
        (nil)))

(insn 18 17 19 1 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
        (reg:SI 65 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ <variable>.next ])
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 19 18 20 2 59 "" [1 uses])

(note 20 19 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 22 20 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 23 22 25 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 25 23 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 3 (set (reg/f:SI 66 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 3 (set (reg:SI 60 [ D.8385 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 66 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 66 [ T ])
        (nil)))

(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8385 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8385 ])
        (nil)))

(jump_insn 29 28 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 31 29 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 4 (set (reg/f:SI 67 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 33 32 34 4 (set (reg:SI 59 [ D.8386 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 67 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 67 [ T ])
        (nil)))

(insn 34 33 35 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 59 [ D.8386 ])
            (mem/i:SI (reg/f:SI 16 argp) [0 typeMask+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8386 ])
        (nil)))

(jump_insn 35 34 70 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 70 35 36 4 NOTE_INSN_LOOP_END)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 36 70 37 5 61 "" [1 uses])

(note 37 36 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 40 39 42 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 42 40 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 6 (set (reg/f:SI 68 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 T+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 44 43 45 6 (set (reg:SI 58 [ D.8387 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 68 [ T ])
                (const_int 12 [0xc])) [0 <variable>.data+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 68 [ T ])
        (nil)))

(jump_insn 45 44 46 6 (set (pc)
        (label_ref 51)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

(barrier 46 45 47)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 47 46 48 7 64 "" [1 uses])

(note 48 47 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 50 48 51 7 (set (reg:SI 58 [ D.8387 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
(code_label 51 50 52 8 66 "" [1 uses])

(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 56 8 (set (reg:SI 61 [ <result> ])
        (reg:SI 58 [ D.8387 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8387 ])
        (nil)))

(note 56 53 59 8 NOTE_INSN_FUNCTION_END)

(insn 59 56 65 8 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 61 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ <result> ])
        (nil)))

(insn 65 59 0 8 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function registerType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 71 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:0 LEGACY_REGS:2000 GENERAL_REGS:2000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:65000 MMX_REGS:65000 FP_TOP_SSE_REGS:65000 FP_SECOND_SSE_REGS:65000 FLOAT_SSE_REGS:65000 FLOAT_INT_REGS:45000 INT_SSE_REGS:65000 FLOAT_INT_SSE_REGS:65000 ALL_REGS:65000 MEM:19000
  Register 77 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 92 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 94 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref AREG, else GENERAL_REGS
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref AREG, else GENERAL_REGS
  Register 72 pref GENERAL_REGS or none
  Register 73 pref INDEX_REGS, else GENERAL_REGS
  Register 74 pref AREG, else GENERAL_REGS
  Register 75 pref AREG, else GENERAL_REGS
  Register 76 pref GENERAL_REGS or none
  Register 77 pref AREG, else GENERAL_REGS
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref AREG, else GENERAL_REGS
  Register 93 pref GENERAL_REGS or none
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref GENERAL_REGS or none
  Register 98 pref GENERAL_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref GENERAL_REGS or none
  Register 101 pref GENERAL_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref FLOAT_INT_SSE_REGS or none
110 registers.

Register 58 used 2 times across 3 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 3 insns in block 14; set 1 time; pref AREG, else GENERAL_REGS.

Register 60 used 2 times across 2 insns in block 14; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 2 insns in block 13; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 4 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 69 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 70 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS.

Register 72 used 2 times across 4 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 3 insns in block 3; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 74 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 75 used 2 times across 2 insns in block 1; set 1 time; pref AREG, else GENERAL_REGS.

Register 76 used 5 times across 8 insns; set 4 times; GENERAL_REGS or none.

Register 77 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 78 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 79 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 81 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 82 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 83 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 84 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 85 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 86 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 87 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 88 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 89 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 90 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 91 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 2 insns in block 7; set 1 time; pref AREG, else GENERAL_REGS.

Register 93 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 94 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 95 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 96 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 97 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 98 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 99 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 100 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 101 used 2 times across 3 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 102 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 3 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 104 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 105 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 106 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 107 used 2 times across 3 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 108 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

16 basic blocks, 26 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  0
Successors:  3 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  2
Successors:  6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  7 9
Successors:  6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 1, count 0, freq 0.
Predecessors:  4 5 (fallthru)
Successors:  10 7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 1, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  5 8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 1, count 0, freq 0.
Predecessors:  7 (fallthru)
Successors:  10 9 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  8 (fallthru)
Successors:  5 10 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  6 8 9 (fallthru)
Successors:  11 (fallthru) 14
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  10 (fallthru)
Successors:  12 (fallthru) 14
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  11 (fallthru)
Successors:  13 (fallthru) 14
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  12 (fallthru)
Successors:  15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

Basic block 14 prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  10 11 12
Successors:  15 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

Basic block 15 prev 14, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  1 3 13 14 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 1.
;; Register 59 in 1.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 1.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 1.
;; Register 73 in 1.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 0.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 1.
;; Register 102 in 0.
;; Register 103 in 1.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 0.
;; Register 107 in 1.
;; Register 108 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:CC 17 flags)
        (compare:CC (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 typeClass+0 S4 A32])
            (const_int 11 [0xb]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 9 8 11 0 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 11 9 13 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 13 11 14 1 (set (reg:SI 78 [ typeClass ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 14 13 15 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 78 [ typeClass ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78 [ typeClass ])
        (nil)))

(insn 15 14 16 1 (set (reg/f:SI 79)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC13") [flags 0x2] <string_cst 0x730440>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 16 15 17 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 79)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79)
        (nil)))

(call_insn 17 16 18 1 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_warning$stub") <function_decl 0x69de00 warning>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 18 17 19 1 (set (reg:SI 75 [ D.8405 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 19 18 20 1 (set (reg:SI 76 [ D.8404 ])
        (reg:SI 75 [ D.8405 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 75 [ D.8405 ])
        (nil)))

(jump_insn 20 19 21 1 (set (pc)
        (label_ref 163)) 517 {jump} (nil)
    (nil))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

(barrier 21 20 22)

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 22 21 23 2 70 "" [1 uses])

(note 23 22 25 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 25 23 26 2 (set (reg:SI 80 [ typeClass ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 26 25 27 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 80 [ typeClass ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 80 [ typeClass ])
        (nil)))

(insn 27 26 28 2 (set (reg:SI 81 [ typeMask ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 typeMask+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 81 [ typeMask ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 81 [ typeMask ])
        (nil)))

(call_insn 29 28 30 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lookupTypeName") [flags 0x103] <function_decl 0x709680 lookupTypeName>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 30 29 31 2 (set (reg:SI 74 [ D.8406 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 31 30 32 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 74 [ D.8406 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.8406 ])
        (nil)))

(jump_insn 32 31 34 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 34 32 36 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 36 34 37 3 (set (reg:SI 73 [ typeClass.9 ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 37 36 38 3 (set (reg/f:SI 82)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("typeClassName") [flags 0x182] <var_decl 0x6fee00 typeClassName>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 38 37 39 3 (set (reg:SI 72 [ D.8408 ])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 73 [ typeClass.9 ])
                    (const_int 4 [0x4]))
                (reg/f:SI 82)) [0 typeClassName S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ typeClass.9 ])
        (expr_list:REG_DEAD (reg/f:SI 82)
            (nil))))

(insn 39 38 40 3 (set (reg:SI 83 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 40 39 41 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 83 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ typeName ])
        (nil)))

(insn 41 40 42 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 72 [ D.8408 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ D.8408 ])
        (nil)))

(insn 42 41 43 3 (set (reg:SI 84 [ typeMask ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 typeMask+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 43 42 44 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 84 [ typeMask ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ typeMask ])
        (nil)))

(insn 44 43 45 3 (set (reg/f:SI 85)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC14") [flags 0x2] <string_cst 0x755c00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 45 44 46 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 85)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 85)
        (nil)))

(call_insn 46 45 47 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_warning$stub") <function_decl 0x69de00 warning>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 47 46 48 3 (set (reg:SI 71 [ D.8409 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 48 47 49 3 (set (reg:SI 76 [ D.8404 ])
        (reg:SI 71 [ D.8409 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ D.8409 ])
        (nil)))

(jump_insn 49 48 50 3 (set (pc)
        (label_ref 163)) 517 {jump} (nil)
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

(barrier 50 49 51)

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 51 50 52 4 73 "" [1 uses])

(note 52 51 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 54 52 55 4 (set (reg/f:SI 86)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 55 54 56 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])
        (reg/f:SI 86)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 86)
        (nil)))

(insn 56 55 181 4 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(note 181 56 57 4 NOTE_INSN_LOOP_BEG)

(jump_insn 57 181 58 4 (set (pc)
        (label_ref 66)) 517 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 58 57 59)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 59 58 60 5 76 "" [2 uses])

(note 60 59 62 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 62 60 63 5 (set (reg/f:SI 87 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 63 62 64 5 (set (reg:SI 70 [ D.8410 ])
        (mem/f:SI (reg/f:SI 87 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 87 [ Tp ])
        (nil)))

(insn 64 63 65 5 (parallel [
            (set (reg:SI 88)
                (plus:SI (reg:SI 70 [ D.8410 ])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 70 [ D.8410 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 65 64 66 5 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])
        (reg:SI 88)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 88)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 70 [ D.8410 ])
                (const_int 16 [0x10]))
            (nil))))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 66 65 67 6 75 "" [1 uses])

(note 67 66 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 69 67 70 6 (set (reg/f:SI 89 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 70 69 71 6 (set (reg:SI 69 [ D.8411 ])
        (mem/f:SI (reg/f:SI 89 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 89 [ Tp ])
        (nil)))

(insn 71 70 72 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 69 [ D.8411 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ D.8411 ])
        (nil)))

(jump_insn 72 71 74 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 97)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 74 72 75 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 76 7 (set (reg/f:SI 90 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 76 75 77 7 (set (reg/f:SI 68 [ D.8412 ])
        (mem/f:SI (reg/f:SI 90 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 90 [ Tp ])
        (nil)))

(insn 77 76 78 7 (set (reg:SI 67 [ D.8413 ])
        (mem/s/f/j:SI (reg/f:SI 68 [ D.8412 ]) [0 <variable>.name+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 68 [ D.8412 ])
        (nil)))

(insn 78 77 79 7 (set (reg:SI 91 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 79 78 80 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 91 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 91 [ typeName ])
        (nil)))

(insn 80 79 81 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 67 [ D.8413 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.8413 ])
        (nil)))

(call_insn/u 81 80 82 7 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_strcmp$stub") <function_decl 0x40b47880 strcmp>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (nil)))

(insn 82 81 83 7 (set (reg:SI 92)
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 83 82 84 7 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
        (reg:SI 92)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 92)
        (nil)))

(insn 84 83 85 7 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 85 84 87 7 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 87 85 88 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 89 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 89 88 91 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 97)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 91 89 92 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 92 91 93 9 (set (reg/f:SI 93 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 93 92 94 9 (set (reg:SI 66 [ D.8414 ])
        (mem/f:SI (reg/f:SI 93 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 93 [ Tp ])
        (nil)))

(insn 94 93 95 9 (set (reg:SI 65 [ D.8415 ])
        (mem/s/j:SI (plus:SI (reg:SI 66 [ D.8414 ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.8414 ])
        (nil)))

(insn 95 94 96 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 65 [ D.8415 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.8415 ])
        (nil)))

(jump_insn 96 95 182 9 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 182 96 97 9 NOTE_INSN_LOOP_END)

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 97 182 98 10 77 "" [2 uses])

(note 98 97 100 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 100 98 101 10 (set (reg/f:SI 94 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 101 100 102 10 (set (reg:SI 64 [ D.8416 ])
        (mem/f:SI (reg/f:SI 94 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 94 [ Tp ])
        (nil)))

(insn 102 101 103 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 64 [ D.8416 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.8416 ])
        (nil)))

(jump_insn 103 102 105 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 105 103 106 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 106 105 107 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 val+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 107 106 109 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 109 107 110 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 110 109 111 12 (set (reg/f:SI 95 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 111 110 112 12 (set (reg:SI 63 [ D.8417 ])
        (mem/f:SI (reg/f:SI 95 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 95 [ Tp ])
        (nil)))

(insn 112 111 113 12 (set (reg:SI 62 [ D.8418 ])
        (mem/s/j:SI (plus:SI (reg:SI 63 [ D.8417 ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8417 ])
        (nil)))

(insn 113 112 114 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 62 [ D.8418 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 typeClass+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8418 ])
        (nil)))

(jump_insn 114 113 116 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 116 114 118 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 118 116 119 13 (set (reg:SI 96 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 119 118 120 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 96 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 96 [ typeName ])
        (nil)))

(insn 120 119 121 13 (set (reg/f:SI 97)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC15") [flags 0x2] <string_cst 0x755c80>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 121 120 122 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 97)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 97)
        (nil)))

(call_insn 122 121 123 13 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_warning$stub") <function_decl 0x69de00 warning>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 123 122 124 13 (set (reg:SI 61 [ D.8419 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 124 123 125 13 (set (reg:SI 76 [ D.8404 ])
        (reg:SI 61 [ D.8419 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8419 ])
        (nil)))

(jump_insn 125 124 126 13 (set (pc)
        (label_ref 163)) 517 {jump} (nil)
    (nil))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

(barrier 126 125 127)

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 127 126 128 14 81 "" [3 uses])

(note 128 127 130 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 130 128 131 14 (set (reg/f:SI 98)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC16") [flags 0x2] <string_cst 0x7594e0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 131 130 132 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 98)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 98)
        (nil)))

(insn 132 131 133 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 20 [0x14])) 41 {*movsi_1} (nil)
    (nil))

(insn 133 132 134 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 134 133 135 14 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_safeCalloc$stub") <function_decl 0x69e880 safeCalloc>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 135 134 136 14 (set (reg:SI 60 [ D.8420 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 136 135 138 14 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 new+0 S4 A32])
        (reg:SI 60 [ D.8420 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8420 ])
        (nil)))

(insn 138 136 139 14 (set (reg:SI 99 [ typeName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 typeName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 139 138 140 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 99 [ typeName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 99 [ typeName ])
        (nil)))

(call_insn 140 139 141 14 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_copyString$stub") <function_decl 0x69f700 copyString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 141 140 142 14 (set (reg:SI 59 [ D.8421 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 142 141 143 14 (set (reg/f:SI 100 [ new ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 new+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 143 142 145 14 (set (mem/s/j:SI (reg/f:SI 100 [ new ]) [0 <variable>.name+0 S4 A32])
        (reg:SI 59 [ D.8421 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8421 ])
        (expr_list:REG_DEAD (reg/f:SI 100 [ new ])
            (nil))))

(insn 145 143 146 14 (set (reg/f:SI 101 [ new ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 new+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 146 145 147 14 (set (reg:SI 102 [ typeMask ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 typeMask+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 147 146 149 14 (set (mem/s/j:SI (plus:SI (reg/f:SI 101 [ new ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])
        (reg:SI 102 [ typeMask ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 102 [ typeMask ])
        (expr_list:REG_DEAD (reg/f:SI 101 [ new ])
            (nil))))

(insn 149 147 150 14 (set (reg/f:SI 103 [ new ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 new+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 150 149 151 14 (set (reg:SI 104 [ typeClass ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 typeClass+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 151 150 153 14 (set (mem/s/j:SI (plus:SI (reg/f:SI 103 [ new ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])
        (reg:SI 104 [ typeClass ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 104 [ typeClass ])
        (expr_list:REG_DEAD (reg/f:SI 103 [ new ])
            (nil))))

(insn 153 151 154 14 (set (reg/f:SI 105 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 154 153 155 14 (set (reg:SI 58 [ D.8422 ])
        (mem/f:SI (reg/f:SI 105 [ Tp ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 105 [ Tp ])
        (nil)))

(insn 155 154 156 14 (set (reg/f:SI 106 [ new ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 new+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 156 155 158 14 (set (mem/s/j:SI (plus:SI (reg/f:SI 106 [ new ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])
        (reg:SI 58 [ D.8422 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8422 ])
        (expr_list:REG_DEAD (reg/f:SI 106 [ new ])
            (nil))))

(insn 158 156 159 14 (set (reg/f:SI 107 [ Tp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 Tp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 159 158 160 14 (set (reg:SI 108 [ new ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 new+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 160 159 162 14 (set (mem/f:SI (reg/f:SI 107 [ Tp ]) [0 S4 A32])
        (reg:SI 108 [ new ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 108 [ new ])
        (expr_list:REG_DEAD (reg/f:SI 107 [ Tp ])
            (nil))))

(insn 162 160 163 14 (set (reg:SI 76 [ D.8404 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 76
(code_label 163 162 164 15 72 "" [3 uses])

(note 164 163 165 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 165 164 168 15 (set (reg:SI 77 [ <result> ])
        (reg:SI 76 [ D.8404 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ D.8404 ])
        (nil)))

(note 168 165 171 15 NOTE_INSN_FUNCTION_END)

(insn 171 168 177 15 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 77 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ <result> ])
        (nil)))

(insn 177 171 0 15 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 15, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function printTypes



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
81 registers.

Register 58 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 66 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 68 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 69 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 70 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none; pointer.

Register 73 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none; pointer.

Register 74 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 76 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 77 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 78 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 79 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

15 basic blocks, 24 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  6
Successors:  2 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  3 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  1 2 3 (fallthru)
Successors:  5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  0 4 (fallthru)
Successors:  7 6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 1, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  1 7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5 6 (fallthru)
Successors:  14 8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  7 (fallthru)
Successors:  13
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  13
Successors:  10 (fallthru) 12
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 1, count 0, freq 0.
Predecessors:  9 (fallthru)
Successors:  11 (fallthru) 12
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 1, count 0, freq 0.
Predecessors:  10 (fallthru)
Successors:  12 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 1, count 0, freq 0.
Predecessors:  9 10 11 (fallthru)
Successors:  13 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 1, count 0, freq 0.
Predecessors:  8 12 (fallthru)
Successors:  9 14 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  13 (fallthru) 7
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 10 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 found+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 8 11 0 (set (reg/f:SI 65)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 11 10 12 0 (set (reg:SI 66 [ TypeTable ])
        (mem/i:SI (reg/f:SI 65) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 65)
        (nil)))

(insn 12 11 110 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])
        (reg:SI 66 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ TypeTable ])
        (nil)))

(note 110 12 13 0 NOTE_INSN_LOOP_BEG)

(jump_insn 13 110 14 0 (set (pc)
        (label_ref 39)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 14 13 15)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 15 14 16 1 89 "" [1 uses])

(note 16 15 18 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 18 16 19 1 (set (reg/f:SI 67 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 19 18 20 1 (set (reg:SI 64 [ D.8450 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 67 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 67 [ T ])
        (nil)))

(insn 20 19 21 1 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 64 [ D.8450 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 class+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.8450 ])
        (nil)))

(jump_insn 21 20 23 1 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 23 21 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 2 (set (reg/f:SI 68 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 25 24 26 2 (set (reg:SI 63 [ D.8451 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 68 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 68 [ T ])
        (nil)))

(insn 26 25 27 2 (parallel [
            (set (reg:SI 62 [ D.8452 ])
                (and:SI (reg:SI 63 [ D.8451 ])
                    (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 filter+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 63 [ D.8451 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 27 26 28 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 62 [ D.8452 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8452 ])
        (nil)))

(jump_insn 28 27 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 30 28 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 3 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 found+0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 33 32 34 4 90 "" [2 uses])

(note 34 33 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 36 34 37 4 (set (reg/f:SI 69 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 37 36 38 4 (set (reg:SI 70 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 69 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 69 [ T ])
        (nil)))

(insn 38 37 39 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])
        (reg:SI 70 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ <variable>.next ])
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 39 38 40 5 88 "" [1 uses])

(note 40 39 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 42 41 44 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 44 42 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 found+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 46 45 111 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 111 46 47 6 NOTE_INSN_LOOP_END)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 47 111 48 7 93 "" [1 uses])

(note 48 47 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 50 48 51 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 found+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 51 50 53 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 106)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 53 51 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 55 53 56 8 (set (reg:SI 71 [ label ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 label+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 56 55 57 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 71 [ label ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ label ])
        (nil)))

(insn 57 56 58 8 (set (reg/f:SI 72)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC17") [flags 0x2] <string_cst 0x7640c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 58 57 59 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 72)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 72)
        (nil)))

(call_insn 59 58 61 8 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 61 59 62 8 (set (reg/f:SI 73)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("TypeTable") [flags 0x182] <var_decl 0x71d080 TypeTable>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 62 61 63 8 (set (reg:SI 74 [ TypeTable ])
        (mem/i:SI (reg/f:SI 73) [0 TypeTable+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 73)
        (nil)))

(insn 63 62 112 8 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])
        (reg:SI 74 [ TypeTable ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ TypeTable ])
        (nil)))

(note 112 63 64 8 NOTE_INSN_LOOP_BEG)

(jump_insn 64 112 65 8 (set (pc)
        (label_ref 95)) 517 {jump} (nil)
    (nil))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 65 64 66)

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 66 65 67 9 98 "" [1 uses])

(note 67 66 69 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 69 67 70 9 (set (reg/f:SI 75 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 70 69 71 9 (set (reg:SI 61 [ D.8453 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 75 [ T ])
                (const_int 8 [0x8])) [0 <variable>.class+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 75 [ T ])
        (nil)))

(insn 71 70 72 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 61 [ D.8453 ])
            (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 class+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8453 ])
        (nil)))

(jump_insn 72 71 74 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 74 72 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 76 10 (set (reg/f:SI 76 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 76 75 77 10 (set (reg:SI 60 [ D.8454 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 76 [ T ])
                (const_int 4 [0x4])) [0 <variable>.mask+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 76 [ T ])
        (nil)))

(insn 77 76 78 10 (parallel [
            (set (reg:SI 59 [ D.8455 ])
                (and:SI (reg:SI 60 [ D.8454 ])
                    (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [0 filter+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 60 [ D.8454 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 78 77 79 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 59 [ D.8455 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8455 ])
        (nil)))

(jump_insn 79 78 81 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 81 79 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 83 81 84 11 (set (reg/f:SI 77 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 84 83 85 11 (set (reg:SI 58 [ D.8456 ])
        (mem/s/f/j:SI (reg/f:SI 77 [ T ]) [0 <variable>.name+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 77 [ T ])
        (nil)))

(insn 85 84 86 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 58 [ D.8456 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8456 ])
        (nil)))

(insn 86 85 87 11 (set (reg/f:SI 78)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC18") [flags 0x2] <string_cst 0x7655d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 87 86 88 11 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 78)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 78)
        (nil)))

(call_insn 88 87 89 11 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 89 88 90 12 99 "" [2 uses])

(note 90 89 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 92 90 93 12 (set (reg/f:SI 79 [ T ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 93 92 94 12 (set (reg:SI 80 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 79 [ T ])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79 [ T ])
        (nil)))

(insn 94 93 95 12 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])
        (reg:SI 80 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 80 [ <variable>.next ])
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 95 94 96 13 97 "" [1 uses])

(note 96 95 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 97 96 98 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 T+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 98 97 113 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 113 98 101 13 NOTE_INSN_LOOP_END)

(note 101 113 106 NOTE_INSN_FUNCTION_END)

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 106 101 109 14 102 "" [1 uses])

(note 109 106 0 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function registerNetType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
62 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 58 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 58 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ type ])
        (nil)))

(insn 11 10 12 0 (set (reg:SI 59 [ name ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 11 13 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 59 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ name ])
        (nil)))

(call_insn 13 12 15 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 15 13 16 0 (set (reg:SI 60 [ initNetType ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 initNetType+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 60 [ initNetType ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ initNetType ])
        (nil)))

(insn 17 16 18 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 18 17 19 0 (set (reg:SI 61 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 19 18 20 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ type ])
        (nil)))

(call_insn 20 19 21 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("setTypeData") [flags 0x303] <function_decl 0x73d600 setTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 21 20 0 NOTE_INSN_FUNCTION_END)


;; Function initNetTypes



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 72 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref AREG, else GENERAL_REGS
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref CREG, else GENERAL_REGS
  Register 71 pref GENERAL_REGS or none
  Register 72 pref CREG, else GENERAL_REGS
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref FLOAT_INT_SSE_REGS or none
  Register 76 pref FLOAT_INT_SSE_REGS or none
  Register 77 pref GENERAL_REGS or none
78 registers.

Register 58 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 4 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 3 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 6 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 6; set 1 time; pref AREG, else GENERAL_REGS.

Register 68 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 70 used 2 times across 3 insns in block 1; set 1 time; pref CREG, else GENERAL_REGS.

Register 71 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 3 insns in block 2; set 1 time; pref CREG, else GENERAL_REGS.

Register 73 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 77 used 3 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

7 basic blocks, 11 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  5
Successors:  2 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  3 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  1 2 3 (fallthru)
Successors:  5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  0 4 (fallthru)
Successors:  1 6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 1.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 1.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 2.
;; Register 71 in 0.
;; Register 72 in 2.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 77 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 68 [ N ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 N+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 68 [ N ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ N ])
        (nil)))

(call_insn 10 9 12 0 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_initStandardNet$stub") <function_decl 0x716000 initStandardNet>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 12 10 76 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A64])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(note 76 12 13 0 NOTE_INSN_LOOP_BEG)

(jump_insn 13 76 14 0 (set (pc)
        (label_ref 51)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 14 13 15)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 15 14 16 1 108 "" [1 uses])

(note 16 15 18 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 18 16 19 1 (set (reg/f:SI 69 [ N ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 N+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 19 18 20 1 (set (reg:SI 66 [ D.8483 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 69 [ N ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 69 [ N ])
        (nil)))

(insn 20 19 21 1 (set (reg:SI 70 [ i ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 1 (set (reg:SI 71)
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 22 21 23 1 (parallel [
            (set (reg:SI 65 [ D.8484 ])
                (ashift:SI (reg:SI 71)
                    (subreg:QI (reg:SI 70 [ i ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 71)
            (expr_list:REG_DEAD (reg:SI 70 [ i ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 23 22 24 1 (set (reg:SI 64 [ D.8485 ])
        (reg:SI 65 [ D.8484 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.8484 ])
        (nil)))

(insn 24 23 25 1 (parallel [
            (set (reg:SI 63 [ D.8486 ])
                (and:SI (reg:SI 66 [ D.8483 ])
                    (reg:SI 64 [ D.8485 ])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 66 [ D.8483 ])
            (expr_list:REG_DEAD (reg:SI 64 [ D.8485 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 25 24 26 1 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 63 [ D.8486 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8486 ])
        (nil)))

(jump_insn 26 25 28 1 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 28 26 29 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 30 2 (set (reg:SI 72 [ i ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 30 29 31 2 (set (reg:SI 73)
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 31 30 32 2 (parallel [
            (set (reg:SI 62 [ D.8487 ])
                (ashift:SI (reg:SI 73)
                    (subreg:QI (reg:SI 72 [ i ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 73)
            (expr_list:REG_DEAD (reg:SI 72 [ i ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 32 31 33 2 (set (reg:SI 61 [ D.8488 ])
        (reg:SI 62 [ D.8487 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8487 ])
        (nil)))

(insn 33 32 34 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 34 33 35 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ D.8488 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8488 ])
        (nil)))

(call_insn 35 34 36 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 36 35 37 2 (set (reg:SI 60 [ D.8489 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 37 36 38 2 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 init+0 S4 A32])
        (reg:SI 60 [ D.8489 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8489 ])
        (nil)))

(insn 38 37 39 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 init+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 39 38 41 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 41 39 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 43 41 44 3 (set (reg:SI 59 [ init.10 ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 init+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 44 43 45 3 (set (reg:SI 74 [ N ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 N+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 45 44 46 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 74 [ N ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ N ])
        (nil)))

(call_insn 46 45 47 3 (set (reg:SI 0 ax)
        (call (mem:QI (reg:SI 59 [ init.10 ]) [0 S1 A8])
            (const_int 16 [0x10]))) 694 {*call_value_1} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_DEAD (reg:SI 59 [ init.10 ])
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 47 46 48 4 109 "" [2 uses])

(note 48 47 75 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 75 48 50 4 (parallel [
            (set (reg/f:SI 77)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 50 75 51 4 (parallel [
            (set (mem/i:SI (reg/f:SI 77) [0 i+0 S4 A64])
                (plus:SI (mem/i:SI (reg/f:SI 77) [0 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg/f:SI 77)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 51 50 52 5 107 "" [1 uses])

(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A64])
            (const_int 31 [0x1f]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 54 53 77 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 77 54 56 5 NOTE_INSN_LOOP_END)

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 56 77 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 58 56 59 6 (set (reg:SI 58 [ D.8491 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 59 58 62 6 (set (reg:SI 67 [ <result> ])
        (reg:SI 58 [ D.8491 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8491 ])
        (nil)))

(note 62 59 65 6 NOTE_INSN_FUNCTION_END)

(insn 65 62 71 6 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 67 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ <result> ])
        (nil)))

(insn 71 65 0 6 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function registerGroupType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
64 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 58 [ class ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 class+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 58 [ class ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ class ])
        (nil)))

(insn 10 9 11 0 (set (reg:SI 59 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 11 10 12 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 59 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ type ])
        (nil)))

(insn 12 11 13 0 (set (reg:SI 60 [ name ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 13 12 14 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 60 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ name ])
        (nil)))

(call_insn 14 13 16 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 16 14 17 0 (set (reg:SI 61 [ initGroupType ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 12 [0xc])) [0 initGroupType+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 18 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 61 [ initGroupType ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ initGroupType ])
        (nil)))

(insn 18 17 19 0 (set (reg:SI 62 [ class ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 class+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 19 18 20 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 62 [ class ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ class ])
        (nil)))

(insn 20 19 21 0 (set (reg:SI 63 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 63 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ type ])
        (nil)))

(call_insn 22 21 23 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("setTypeData") [flags 0x303] <function_decl 0x73d600 setTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 22 0 NOTE_INSN_FUNCTION_END)


;; Function initializeGroupProc



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
85 registers.

Register 58 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 3 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 3 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 70 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 72 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 73 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 74 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 75 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 76 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 77 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 78 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 79 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 82 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 83 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 84 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

9 basic blocks, 14 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  3 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  2 3 (fallthru)
Successors:  5 (fallthru) 8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  4 (fallthru)
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5 6 (fallthru)
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  7 (fallthru) 4
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 1.
;; Register 69 in 1.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg/f:SI 69 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 70 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 12 0 (set (mem/s/j:SI (plus:SI (reg/f:SI 69 [ P ])
                (const_int 8 [0x8])) [0 <variable>.group+0 S4 A32])
        (reg:SI 70 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ G ])
        (expr_list:REG_DEAD (reg/f:SI 69 [ P ])
            (nil))))

(insn 12 10 13 0 (set (reg/f:SI 71 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 13 12 14 0 (set (mem/s/j:SI (plus:SI (reg/f:SI 71 [ P ])
                (const_int 16 [0x10])) [0 <variable>.backwardProc+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 71 [ P ])
        (nil)))

(insn 14 13 15 0 (set (reg/f:SI 72 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 15 14 16 0 (set (reg:SI 68 [ D.8509 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 72 [ P ])
                (const_int 16 [0x10])) [0 <variable>.backwardProc+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 72 [ P ])
        (nil)))

(insn 16 15 17 0 (set (reg/f:SI 73 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 19 0 (set (mem/s/j:SI (plus:SI (reg/f:SI 73 [ P ])
                (const_int 12 [0xc])) [0 <variable>.forwardProc+0 S4 A32])
        (reg:SI 68 [ D.8509 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.8509 ])
        (expr_list:REG_DEAD (reg/f:SI 73 [ P ])
            (nil))))

(insn 19 17 20 0 (set (reg/f:SI 74 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 20 19 21 0 (set (reg:SI 67 [ D.8510 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 74 [ P ])
                (const_int 20 [0x14])) [0 <variable>.groupHistoryData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 74 [ P ])
        (nil)))

(insn 21 20 22 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 67 [ D.8510 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.8510 ])
        (nil)))

(jump_insn 22 21 24 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 31)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 24 22 25 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 1 (set (reg/f:SI 75 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 26 25 27 1 (set (reg:SI 66 [ D.8511 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 75 [ P ])
                (const_int 20 [0x14])) [0 <variable>.groupHistoryData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 75 [ P ])
        (nil)))

(insn 27 26 28 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 66 [ D.8511 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.8511 ])
        (nil)))

(call_insn 28 27 29 1 (call (mem/u/c:QI (symbol_ref:SI ("&L_free$stub") <function_decl 0x58b980 free>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 29 28 30 1 (set (reg/f:SI 76 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 30 29 31 1 (set (mem/s/j:SI (plus:SI (reg/f:SI 76 [ P ])
                (const_int 20 [0x14])) [0 <variable>.groupHistoryData+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 76 [ P ])
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 31 30 32 2 117 "" [1 uses])

(note 32 31 34 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 34 32 35 2 (set (reg/f:SI 77 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 35 34 36 2 (set (reg:SI 65 [ D.8512 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 77 [ P ])
                (const_int 24 [0x18])) [0 <variable>.unitData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 77 [ P ])
        (nil)))

(insn 36 35 37 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 65 [ D.8512 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.8512 ])
        (nil)))

(jump_insn 37 36 39 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 39 37 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 41 3 (set (reg/f:SI 78 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 41 40 42 3 (set (reg:SI 64 [ D.8513 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 78 [ P ])
                (const_int 24 [0x18])) [0 <variable>.unitData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 78 [ P ])
        (nil)))

(insn 42 41 43 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 64 [ D.8513 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.8513 ])
        (nil)))

(call_insn 43 42 44 3 (call (mem/u/c:QI (symbol_ref:SI ("&L_free$stub") <function_decl 0x58b980 free>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 44 43 45 3 (set (reg/f:SI 79 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 45 44 46 3 (set (mem/s/j:SI (plus:SI (reg/f:SI 79 [ P ])
                (const_int 24 [0x18])) [0 <variable>.unitData+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79 [ P ])
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 46 45 47 4 119 "" [1 uses])

(note 47 46 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 49 47 50 4 (set (reg/f:SI 80 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 50 49 51 4 (set (reg:SI 63 [ D.8514 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 80 [ P ])
                (const_int 28 [0x1c])) [0 <variable>.unitHistoryData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 80 [ P ])
        (nil)))

(insn 51 50 52 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 63 [ D.8514 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8514 ])
        (nil)))

(jump_insn 52 51 54 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 54 52 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 5 (set (reg/f:SI 81 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 56 55 57 5 (set (reg:SI 62 [ D.8515 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 81 [ P ])
                (const_int 28 [0x1c])) [0 <variable>.unitHistoryData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 81 [ P ])
        (nil)))

(insn 57 56 58 5 (set (reg:SI 61 [ D.8516 ])
        (mem/f:SI (reg:SI 62 [ D.8515 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8515 ])
        (nil)))

(insn 58 57 59 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 61 [ D.8516 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8516 ])
        (nil)))

(jump_insn 59 58 61 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 61 59 62 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 62 61 63 6 (set (reg/f:SI 82 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 63 62 64 6 (set (reg:SI 60 [ D.8517 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 82 [ P ])
                (const_int 28 [0x1c])) [0 <variable>.unitHistoryData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 82 [ P ])
        (nil)))

(insn 64 63 65 6 (set (reg:SI 59 [ D.8518 ])
        (mem/f:SI (reg:SI 60 [ D.8517 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8517 ])
        (nil)))

(insn 65 64 66 6 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 59 [ D.8518 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8518 ])
        (nil)))

(call_insn 66 65 67 6 (call (mem/u/c:QI (symbol_ref:SI ("&L_free$stub") <function_decl 0x58b980 free>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 67 66 68 7 123 "" [1 uses])

(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 69 68 70 7 (set (reg/f:SI 83 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 70 69 71 7 (set (reg:SI 58 [ D.8519 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 83 [ P ])
                (const_int 28 [0x1c])) [0 <variable>.unitHistoryData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 83 [ P ])
        (nil)))

(insn 71 70 72 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 58 [ D.8519 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8519 ])
        (nil)))

(call_insn 72 71 73 7 (call (mem/u/c:QI (symbol_ref:SI ("&L_free$stub") <function_decl 0x58b980 free>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 73 72 74 7 (set (reg/f:SI 84 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 74 73 77 7 (set (mem/s/j:SI (plus:SI (reg/f:SI 84 [ P ])
                (const_int 28 [0x1c])) [0 <variable>.unitHistoryData+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 84 [ P ])
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 77 74 82 NOTE_INSN_FUNCTION_END)

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 82 77 85 8 125 "" [1 uses])

(note 85 82 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function initGroupTypes



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 63 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 66 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 69 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 76 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 80 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 94 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref AREG, else GENERAL_REGS
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref AREG, else GENERAL_REGS
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref AREG, else GENERAL_REGS
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref AREG, else GENERAL_REGS
  Register 77 pref GENERAL_REGS or none
  Register 78 pref CREG, else GENERAL_REGS
  Register 79 pref GENERAL_REGS or none
  Register 80 pref CREG, else GENERAL_REGS
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref GENERAL_REGS or none
  Register 98 pref GENERAL_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref GENERAL_REGS or none
  Register 101 pref GENERAL_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref FLOAT_INT_SSE_REGS or none
  Register 111 pref FLOAT_INT_SSE_REGS or none
  Register 112 pref GENERAL_REGS or none
113 registers.

Register 58 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 6 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 17; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 3 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 6 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 12; set 1 time; pref AREG, else GENERAL_REGS.

Register 64 used 2 times across 3 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 6 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 7; set 1 time; pref AREG, else GENERAL_REGS.

Register 67 used 2 times across 3 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 5 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 70 used 2 times across 3 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 6 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 21; set 1 time; pref AREG, else GENERAL_REGS.

Register 77 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 78 used 2 times across 3 insns in block 1; set 1 time; pref CREG, else GENERAL_REGS.

Register 79 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 80 used 2 times across 3 insns in block 2; set 1 time; pref CREG, else GENERAL_REGS.

Register 81 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 82 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 83 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 84 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 85 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 86 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 87 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 88 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 89 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 90 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 91 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 93 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 94 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 95 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 96 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 97 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 98 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 99 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 100 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 101 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 102 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 104 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 105 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 106 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 107 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 108 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 109 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none.

Register 112 used 3 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

22 basic blocks, 32 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  5
Successors:  2 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  3 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  1 2 3 (fallthru)
Successors:  5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  0 4 (fallthru)
Successors:  1 6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 1, count 0, freq 0.
Predecessors:  10
Successors:  8 (fallthru) 9
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 1, count 0, freq 0.
Predecessors:  7 (fallthru)
Successors:  9 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  7 8 (fallthru)
Successors:  10 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 1, count 0, freq 0.
Predecessors:  6 9 (fallthru)
Successors:  7 11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  10 (fallthru)
Successors:  15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 1, count 0, freq 0.
Predecessors:  15
Successors:  13 (fallthru) 14
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 1, count 0, freq 0.
Predecessors:  12 (fallthru)
Successors:  14 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 15, loop_depth 1, count 0, freq 0.
Predecessors:  12 13 (fallthru)
Successors:  15 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 14, next 16, loop_depth 1, count 0, freq 0.
Predecessors:  11 14 (fallthru)
Successors:  12 16 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 0, count 0, freq 0.
Predecessors:  15 (fallthru)
Successors:  20
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 17 prev 16, next 18, loop_depth 1, count 0, freq 0.
Predecessors:  20
Successors:  18 (fallthru) 19
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 18 prev 17, next 19, loop_depth 1, count 0, freq 0.
Predecessors:  17 (fallthru)
Successors:  19 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 19 prev 18, next 20, loop_depth 1, count 0, freq 0.
Predecessors:  17 18 (fallthru)
Successors:  20 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 20 prev 19, next 21, loop_depth 1, count 0, freq 0.
Predecessors:  16 19 (fallthru)
Successors:  17 21 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 21 prev 20, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  20 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 1.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 1.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 2.
;; Register 79 in 0.
;; Register 80 in 2.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 1.
;; Register 89 in 1.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 1.
;; Register 98 in 1.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 1.
;; Register 107 in 1.
;; Register 108 in 0.
;; Register 109 in 0.
;; Register 112 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 208 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(note 208 8 9 0 NOTE_INSN_LOOP_BEG)

(jump_insn 9 208 10 0 (set (pc)
        (label_ref 48)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 10 9 11)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 11 10 12 1 128 "" [1 uses])

(note 12 11 14 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 14 12 15 1 (set (reg/f:SI 77 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 15 14 16 1 (set (reg:SI 75 [ D.8554 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 77 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 77 [ G ])
        (nil)))

(insn 16 15 17 1 (set (reg:SI 78 [ i ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 18 1 (set (reg:SI 79)
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 18 17 19 1 (parallel [
            (set (reg:SI 74 [ D.8555 ])
                (ashift:SI (reg:SI 79)
                    (subreg:QI (reg:SI 78 [ i ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 79)
            (expr_list:REG_DEAD (reg:SI 78 [ i ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 19 18 20 1 (set (reg:SI 73 [ D.8556 ])
        (reg:SI 74 [ D.8555 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.8555 ])
        (nil)))

(insn 20 19 21 1 (parallel [
            (set (reg:SI 72 [ D.8557 ])
                (and:SI (reg:SI 75 [ D.8554 ])
                    (reg:SI 73 [ D.8556 ])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 75 [ D.8554 ])
            (expr_list:REG_DEAD (reg:SI 73 [ D.8556 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 21 20 22 1 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 72 [ D.8557 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ D.8557 ])
        (nil)))

(jump_insn 22 21 24 1 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 24 22 25 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 2 (set (reg:SI 80 [ i ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 26 25 27 2 (set (reg:SI 81)
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 2 (parallel [
            (set (reg:SI 71 [ D.8558 ])
                (ashift:SI (reg:SI 81)
                    (subreg:QI (reg:SI 80 [ i ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 81)
            (expr_list:REG_DEAD (reg:SI 80 [ i ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 28 27 29 2 (set (reg:SI 70 [ D.8559 ])
        (reg:SI 71 [ D.8558 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ D.8558 ])
        (nil)))

(insn 29 28 30 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 30 29 31 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 70 [ D.8559 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.8559 ])
        (nil)))

(call_insn 31 30 32 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 32 31 33 2 (set (reg:SI 69 [ D.8560 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 33 32 34 2 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
        (reg:SI 69 [ D.8560 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ D.8560 ])
        (nil)))

(insn 34 33 35 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 35 34 37 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 37 35 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 3 (set (reg:SI 68 [ init.11 ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 40 39 41 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 41 40 42 3 (set (reg:SI 82 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 42 41 43 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 82 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 82 [ G ])
        (nil)))

(call_insn 43 42 44 3 (call (mem:QI (reg:SI 68 [ init.11 ]) [0 S1 A8])
        (const_int 16 [0x10])) 526 {*call_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ init.11 ])
        (nil))
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 44 43 45 4 129 "" [2 uses])

(note 45 44 207 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 207 45 47 4 (parallel [
            (set (reg/f:SI 112)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 47 207 48 4 (parallel [
            (set (mem/i:SI (reg/f:SI 112) [0 i+0 S4 A32])
                (plus:SI (mem/i:SI (reg/f:SI 112) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg/f:SI 112)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 48 47 49 5 127 "" [1 uses])

(note 49 48 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 31 [0x1f]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 51 50 209 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 11)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 209 51 53 5 NOTE_INSN_LOOP_END)

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 53 209 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 55 53 56 6 (set (reg/f:SI 83 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 56 55 57 6 (set (reg:SI 84 [ <variable>.inputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 83 [ G ])
                (const_int 16 [0x10])) [0 <variable>.inputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 83 [ G ])
        (nil)))

(insn 57 56 210 6 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
        (reg:SI 84 [ <variable>.inputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ <variable>.inputProcs ])
        (nil)))

(note 210 57 58 6 NOTE_INSN_LOOP_BEG)

(jump_insn 58 210 59 6 (set (pc)
        (label_ref 93)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 59 58 60)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 60 59 61 7 134 "" [1 uses])

(note 61 60 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 63 61 64 7 (set (reg:SI 85 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 64 63 65 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 85 [ P ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 85 [ P ])
        (nil)))

(insn 65 64 66 7 (set (reg:SI 86 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 66 65 67 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 86 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 86 [ G ])
        (nil)))

(call_insn 67 66 69 7 (call (mem:QI (symbol_ref:SI ("initializeGroupProc") [flags 0x303] <function_decl 0x777300 initializeGroupProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 69 67 70 7 (set (reg/f:SI 87 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 70 69 71 7 (set (reg:SI 67 [ D.8562 ])
        (mem/s/j:SI (reg/f:SI 87 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 87 [ P ])
        (nil)))

(insn 71 70 72 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 72 71 73 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 67 [ D.8562 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.8562 ])
        (nil)))

(call_insn 73 72 74 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 74 73 75 7 (set (reg:SI 66 [ D.8563 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 75 74 76 7 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
        (reg:SI 66 [ D.8563 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.8563 ])
        (nil)))

(insn 76 75 77 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 77 76 79 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 87)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 79 77 81 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 81 79 82 8 (set (reg:SI 65 [ init.12 ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 82 81 83 8 (set (reg:SI 88 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 83 82 84 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 88 [ P ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 88 [ P ])
        (nil)))

(insn 84 83 85 8 (set (reg:SI 89 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 85 84 86 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 89 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 89 [ G ])
        (nil)))

(call_insn 86 85 87 8 (call (mem:QI (reg:SI 65 [ init.12 ]) [0 S1 A8])
        (const_int 16 [0x10])) 526 {*call_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ init.12 ])
        (nil))
    (nil))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 87 86 88 9 135 "" [1 uses])

(note 88 87 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 90 88 91 9 (set (reg/f:SI 90 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 91 90 92 9 (set (reg:SI 91 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 90 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 90 [ P ])
        (nil)))

(insn 92 91 93 9 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
        (reg:SI 91 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 91 [ <variable>.next ])
        (nil)))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 93 92 94 10 133 "" [1 uses])

(note 94 93 95 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 96 95 211 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 211 96 98 10 NOTE_INSN_LOOP_END)

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 98 211 100 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 100 98 101 11 (set (reg/f:SI 92 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 101 100 102 11 (set (reg:SI 93 [ <variable>.outputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 92 [ G ])
                (const_int 24 [0x18])) [0 <variable>.outputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 92 [ G ])
        (nil)))

(insn 102 101 212 11 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
        (reg:SI 93 [ <variable>.outputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 93 [ <variable>.outputProcs ])
        (nil)))

(note 212 102 103 11 NOTE_INSN_LOOP_BEG)

(jump_insn 103 212 104 11 (set (pc)
        (label_ref 138)) 517 {jump} (nil)
    (nil))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 104 103 105)

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 105 104 106 12 139 "" [1 uses])

(note 106 105 108 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 108 106 109 12 (set (reg:SI 94 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 109 108 110 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 94 [ P ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 94 [ P ])
        (nil)))

(insn 110 109 111 12 (set (reg:SI 95 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 111 110 112 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 95 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 95 [ G ])
        (nil)))

(call_insn 112 111 114 12 (call (mem:QI (symbol_ref:SI ("initializeGroupProc") [flags 0x303] <function_decl 0x777300 initializeGroupProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 114 112 115 12 (set (reg/f:SI 96 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 115 114 116 12 (set (reg:SI 64 [ D.8565 ])
        (mem/s/j:SI (reg/f:SI 96 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 96 [ P ])
        (nil)))

(insn 116 115 117 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 117 116 118 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 64 [ D.8565 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.8565 ])
        (nil)))

(call_insn 118 117 119 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 119 118 120 12 (set (reg:SI 63 [ D.8566 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 120 119 121 12 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
        (reg:SI 63 [ D.8566 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8566 ])
        (nil)))

(insn 121 120 122 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 122 121 124 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 132)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 124 122 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 126 124 127 13 (set (reg:SI 62 [ init.13 ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 127 126 128 13 (set (reg:SI 97 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 128 127 129 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 97 [ P ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 97 [ P ])
        (nil)))

(insn 129 128 130 13 (set (reg:SI 98 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 130 129 131 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 98 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 98 [ G ])
        (nil)))

(call_insn 131 130 132 13 (call (mem:QI (reg:SI 62 [ init.13 ]) [0 S1 A8])
        (const_int 16 [0x10])) 526 {*call_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ init.13 ])
        (nil))
    (nil))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 132 131 133 14 140 "" [1 uses])

(note 133 132 135 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 135 133 136 14 (set (reg/f:SI 99 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 136 135 137 14 (set (reg:SI 100 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 99 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 99 [ P ])
        (nil)))

(insn 137 136 138 14 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
        (reg:SI 100 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 100 [ <variable>.next ])
        (nil)))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 138 137 139 15 138 "" [1 uses])

(note 139 138 140 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 141 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 141 140 213 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 105)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 213 141 143 15 NOTE_INSN_LOOP_END)

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 143 213 145 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 145 143 146 16 (set (reg/f:SI 101 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 146 145 147 16 (set (reg:SI 102 [ <variable>.costProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 101 [ G ])
                (const_int 32 [0x20])) [0 <variable>.costProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 101 [ G ])
        (nil)))

(insn 147 146 214 16 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
        (reg:SI 102 [ <variable>.costProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 102 [ <variable>.costProcs ])
        (nil)))

(note 214 147 148 16 NOTE_INSN_LOOP_BEG)

(jump_insn 148 214 149 16 (set (pc)
        (label_ref 183)) 517 {jump} (nil)
    (nil))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 149 148 150)

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 150 149 151 17 144 "" [1 uses])

(note 151 150 153 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 153 151 154 17 (set (reg:SI 103 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 154 153 155 17 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 103 [ P ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 103 [ P ])
        (nil)))

(insn 155 154 156 17 (set (reg:SI 104 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 156 155 157 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 104 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 104 [ G ])
        (nil)))

(call_insn 157 156 159 17 (call (mem:QI (symbol_ref:SI ("initializeGroupProc") [flags 0x303] <function_decl 0x777300 initializeGroupProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 159 157 160 17 (set (reg/f:SI 105 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 160 159 161 17 (set (reg:SI 61 [ D.8568 ])
        (mem/s/j:SI (reg/f:SI 105 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 105 [ P ])
        (nil)))

(insn 161 160 162 17 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 162 161 163 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ D.8568 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8568 ])
        (nil)))

(call_insn 163 162 164 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 164 163 165 17 (set (reg:SI 60 [ D.8569 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 165 164 166 17 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
        (reg:SI 60 [ D.8569 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8569 ])
        (nil)))

(insn 166 165 167 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 167 166 169 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 177)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 169 167 171 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 171 169 172 18 (set (reg:SI 59 [ init.14 ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 init+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 172 171 173 18 (set (reg:SI 106 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 173 172 174 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 106 [ P ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 106 [ P ])
        (nil)))

(insn 174 173 175 18 (set (reg:SI 107 [ G ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 175 174 176 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 107 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 107 [ G ])
        (nil)))

(call_insn 176 175 177 18 (call (mem:QI (reg:SI 59 [ init.14 ]) [0 S1 A8])
        (const_int 16 [0x10])) 526 {*call_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ init.14 ])
        (nil))
    (nil))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 19, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 177 176 178 19 145 "" [1 uses])

(note 178 177 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 180 178 181 19 (set (reg/f:SI 108 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 181 180 182 19 (set (reg:SI 109 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 108 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 108 [ P ])
        (nil)))

(insn 182 181 183 19 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
        (reg:SI 109 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 109 [ <variable>.next ])
        (nil)))
;; End of basic block 19, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 20, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 183 182 184 20 143 "" [1 uses])

(note 184 183 185 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 185 184 186 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 P+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 186 185 215 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 150)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 20, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 215 186 188 20 NOTE_INSN_LOOP_END)

;; Start of basic block 21, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 188 215 190 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 190 188 191 21 (set (reg:SI 58 [ D.8571 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 191 190 194 21 (set (reg:SI 76 [ <result> ])
        (reg:SI 58 [ D.8571 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8571 ])
        (nil)))

(note 194 191 197 21 NOTE_INSN_FUNCTION_END)

(insn 197 194 203 21 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 76 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ <result> ])
        (nil)))

(insn 203 197 0 21 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 21, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function printGroupType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 94 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 110 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 111 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 113 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 114 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 115 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 116 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 117 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 118 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 119 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref AREG, else GENERAL_REGS
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref AREG, else GENERAL_REGS
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref AREG, else GENERAL_REGS
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref GENERAL_REGS or none
  Register 98 pref GENERAL_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref GENERAL_REGS or none
  Register 101 pref GENERAL_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref GENERAL_REGS or none
  Register 111 pref GENERAL_REGS or none
  Register 112 pref GENERAL_REGS or none
  Register 113 pref GENERAL_REGS or none
  Register 114 pref GENERAL_REGS or none
  Register 115 pref GENERAL_REGS or none
  Register 116 pref GENERAL_REGS or none
  Register 117 pref GENERAL_REGS or none
  Register 118 pref GENERAL_REGS or none
  Register 119 pref GENERAL_REGS or none
120 registers.

Register 58 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 14; set 1 time; pref AREG, else GENERAL_REGS.

Register 66 used 2 times across 3 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 2 insns in block 8; set 1 time; pref AREG, else GENERAL_REGS.

Register 70 used 2 times across 3 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 74 used 2 times across 3 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 77 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 78 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 79 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 82 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 83 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 84 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 85 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 86 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 87 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 88 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 89 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 90 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 91 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 93 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 94 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 95 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 96 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none; pointer.

Register 97 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 98 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 99 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 100 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 101 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 102 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 104 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 105 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 106 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 107 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 108 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 109 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 110 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none.

Register 111 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 112 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 113 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none.

Register 114 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 115 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 116 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 117 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 118 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 119 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

19 basic blocks, 29 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  5
Successors:  3 (fallthru) 4
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  2 3 (fallthru)
Successors:  5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  1 4 (fallthru)
Successors:  2 6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  0 5 (fallthru)
Successors:  7 (fallthru) 12
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  11
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 1, count 0, freq 0.
Predecessors:  11
Successors:  9 (fallthru) 10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  8 (fallthru)
Successors:  10 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 1, count 0, freq 0.
Predecessors:  8 9 (fallthru)
Successors:  11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 1, count 0, freq 0.
Predecessors:  7 10 (fallthru)
Successors:  8 12 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  6 11 (fallthru)
Successors:  13 (fallthru) 18
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  12 (fallthru)
Successors:  17
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 15, loop_depth 1, count 0, freq 0.
Predecessors:  17
Successors:  15 (fallthru) 16
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 14, next 16, loop_depth 1, count 0, freq 0.
Predecessors:  14 (fallthru)
Successors:  16 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 1, count 0, freq 0.
Predecessors:  14 15 (fallthru)
Successors:  17 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 17 prev 16, next 18, loop_depth 1, count 0, freq 0.
Predecessors:  13 16 (fallthru)
Successors:  14 18 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 18 prev 17, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  12 17 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 0.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 0.
;; Register 107 in 0.
;; Register 108 in 0.
;; Register 109 in 0.
;; Register 110 in 0.
;; Register 111 in 0.
;; Register 112 in 0.
;; Register 113 in 0.
;; Register 114 in 0.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 78 [ V ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 V+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 11 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])
        (reg:SI 78 [ V ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78 [ V ])
        (nil)))

(insn 11 9 12 0 (set (reg/f:SI 79 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 11 13 0 (set (reg:SI 77 [ D.8598 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 79 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79 [ G ])
        (nil)))

(insn 13 12 14 0 (parallel [
            (set (reg:SI 76 [ D.8599 ])
                (and:SI (reg:SI 77 [ D.8598 ])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 77 [ D.8598 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 14 13 15 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 76 [ D.8599 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ D.8599 ])
        (nil)))

(insn 15 14 16 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (reg/f:SI 80)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC19") [flags 0x2] <string_cst 0x79cbd0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 17 16 18 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 80)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 80)
        (nil)))

(call_insn 18 17 20 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 20 18 21 0 (set (reg/f:SI 81 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 0 (set (reg:SI 75 [ D.8600 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 81 [ G ])
                (const_int 16 [0x10])) [0 <variable>.inputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 81 [ G ])
        (nil)))

(insn 22 21 23 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 75 [ D.8600 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 75 [ D.8600 ])
        (nil)))

(jump_insn 23 22 25 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 25 23 27 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 1 (set (reg/f:SI 82)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC20") [flags 0x2] <string_cst 0x79ce40>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 28 27 29 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 82)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 82)
        (nil)))

(call_insn 29 28 31 1 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 31 29 32 1 (set (reg/f:SI 83 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 32 31 33 1 (set (reg:SI 84 [ <variable>.inputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 83 [ G ])
                (const_int 16 [0x10])) [0 <variable>.inputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 83 [ G ])
        (nil)))

(insn 33 32 223 1 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 84 [ <variable>.inputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ <variable>.inputProcs ])
        (nil)))

(note 223 33 34 1 NOTE_INSN_LOOP_BEG)

(jump_insn 34 223 35 1 (set (pc)
        (label_ref 69)) 517 {jump} (nil)
    (nil))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 35 34 36)

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 36 35 37 2 153 "" [1 uses])

(note 37 36 39 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 2 (set (reg/f:SI 85 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 40 39 41 2 (set (reg:SI 74 [ D.8601 ])
        (mem/s/j:SI (reg/f:SI 85 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 85 [ P ])
        (nil)))

(insn 41 40 42 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 42 41 43 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 74 [ D.8601 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.8601 ])
        (nil)))

(call_insn 43 42 44 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lookupTypeName") [flags 0x103] <function_decl 0x709680 lookupTypeName>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 44 43 45 2 (set (reg:SI 73 [ D.8602 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 45 44 46 2 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])
        (reg:SI 73 [ D.8602 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ D.8602 ])
        (nil)))

(insn 46 45 47 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 47 46 49 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 57)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 49 47 51 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 51 49 52 3 (set (reg/f:SI 86 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 52 51 53 3 (set (reg:SI 72 [ D.8603 ])
        (mem/s/j:SI (reg/f:SI 86 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 86 [ P ])
        (nil)))

(insn 53 52 54 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 72 [ D.8603 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ D.8603 ])
        (nil)))

(insn 54 53 55 3 (set (reg/f:SI 87)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC21") [flags 0x2] <string_cst 0x756500>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 55 54 56 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 87)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 87)
        (nil)))

(call_insn 56 55 57 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_error$stub") <function_decl 0x69df80 error>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 57 56 58 4 154 "" [1 uses])

(note 58 57 60 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 60 58 61 4 (set (reg:SI 88 [ name ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 61 60 62 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 88 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 88 [ name ])
        (nil)))

(insn 62 61 63 4 (set (reg/f:SI 89)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC18") [flags 0x2] <string_cst 0x7655d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 63 62 64 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 89)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 89)
        (nil)))

(call_insn 64 63 66 4 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 66 64 67 4 (set (reg/f:SI 90 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 67 66 68 4 (set (reg:SI 91 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 90 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 90 [ P ])
        (nil)))

(insn 68 67 69 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 91 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 91 [ <variable>.next ])
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 69 68 70 5 152 "" [1 uses])

(note 70 69 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 72 71 224 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 224 72 73 5 NOTE_INSN_LOOP_END)

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 73 224 74 6 150 "" [1 uses])

(note 74 73 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 76 74 77 6 (set (reg/f:SI 92 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 77 76 78 6 (set (reg:SI 71 [ D.8604 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 92 [ G ])
                (const_int 24 [0x18])) [0 <variable>.outputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 92 [ G ])
        (nil)))

(insn 78 77 79 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 71 [ D.8604 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ D.8604 ])
        (nil)))

(jump_insn 79 78 81 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 129)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 81 79 83 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 83 81 84 7 (set (reg/f:SI 93)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC22") [flags 0x2] <string_cst 0x79e8d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 84 83 85 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 93)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 93)
        (nil)))

(call_insn 85 84 87 7 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 87 85 88 7 (set (reg/f:SI 94 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 88 87 89 7 (set (reg:SI 95 [ <variable>.outputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 94 [ G ])
                (const_int 24 [0x18])) [0 <variable>.outputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 94 [ G ])
        (nil)))

(insn 89 88 225 7 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 95 [ <variable>.outputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 95 [ <variable>.outputProcs ])
        (nil)))

(note 225 89 90 7 NOTE_INSN_LOOP_BEG)

(jump_insn 90 225 91 7 (set (pc)
        (label_ref 125)) 517 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 91 90 92)

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 92 91 93 8 159 "" [1 uses])

(note 93 92 95 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 95 93 96 8 (set (reg/f:SI 96 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 96 95 97 8 (set (reg:SI 70 [ D.8605 ])
        (mem/s/j:SI (reg/f:SI 96 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 96 [ P ])
        (nil)))

(insn 97 96 98 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 98 97 99 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 70 [ D.8605 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.8605 ])
        (nil)))

(call_insn 99 98 100 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lookupTypeName") [flags 0x103] <function_decl 0x709680 lookupTypeName>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 100 99 101 8 (set (reg:SI 69 [ D.8606 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 101 100 102 8 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])
        (reg:SI 69 [ D.8606 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ D.8606 ])
        (nil)))

(insn 102 101 103 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 103 102 105 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 113)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 105 103 107 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 107 105 108 9 (set (reg/f:SI 97 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 108 107 109 9 (set (reg:SI 68 [ D.8607 ])
        (mem/s/j:SI (reg/f:SI 97 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 97 [ P ])
        (nil)))

(insn 109 108 110 9 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 68 [ D.8607 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.8607 ])
        (nil)))

(insn 110 109 111 9 (set (reg/f:SI 98)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC23") [flags 0x2] <string_cst 0x756540>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 111 110 112 9 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 98)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 98)
        (nil)))

(call_insn 112 111 113 9 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_error$stub") <function_decl 0x69df80 error>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 113 112 114 10 160 "" [1 uses])

(note 114 113 116 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 116 114 117 10 (set (reg:SI 99 [ name ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 117 116 118 10 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 99 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 99 [ name ])
        (nil)))

(insn 118 117 119 10 (set (reg/f:SI 100)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC18") [flags 0x2] <string_cst 0x7655d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 119 118 120 10 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 100)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 100)
        (nil)))

(call_insn 120 119 122 10 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 122 120 123 10 (set (reg/f:SI 101 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 123 122 124 10 (set (reg:SI 102 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 101 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 101 [ P ])
        (nil)))

(insn 124 123 125 10 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 102 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 102 [ <variable>.next ])
        (nil)))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 125 124 126 11 158 "" [1 uses])

(note 126 125 127 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 127 126 128 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 128 127 226 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 226 128 129 11 NOTE_INSN_LOOP_END)

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 129 226 130 12 156 "" [1 uses])

(note 130 129 132 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 132 130 133 12 (set (reg/f:SI 103 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 133 132 134 12 (set (reg:SI 67 [ D.8608 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 103 [ G ])
                (const_int 32 [0x20])) [0 <variable>.costProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 103 [ G ])
        (nil)))

(insn 134 133 135 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 67 [ D.8608 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.8608 ])
        (nil)))

(jump_insn 135 134 137 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 185)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 137 135 139 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 139 137 140 13 (set (reg/f:SI 104)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC24") [flags 0x2] <string_cst 0x7a0390>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 140 139 141 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 104)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 104)
        (nil)))

(call_insn 141 140 143 13 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 143 141 144 13 (set (reg/f:SI 105 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 144 143 145 13 (set (reg:SI 106 [ <variable>.costProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 105 [ G ])
                (const_int 32 [0x20])) [0 <variable>.costProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 105 [ G ])
        (nil)))

(insn 145 144 227 13 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 106 [ <variable>.costProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 106 [ <variable>.costProcs ])
        (nil)))

(note 227 145 146 13 NOTE_INSN_LOOP_BEG)

(jump_insn 146 227 147 13 (set (pc)
        (label_ref 181)) 517 {jump} (nil)
    (nil))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 148)

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 148 147 149 14 165 "" [1 uses])

(note 149 148 151 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 151 149 152 14 (set (reg/f:SI 107 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 152 151 153 14 (set (reg:SI 66 [ D.8609 ])
        (mem/s/j:SI (reg/f:SI 107 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 107 [ P ])
        (nil)))

(insn 153 152 154 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 154 153 155 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 66 [ D.8609 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.8609 ])
        (nil)))

(call_insn 155 154 156 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lookupTypeName") [flags 0x103] <function_decl 0x709680 lookupTypeName>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 156 155 157 14 (set (reg:SI 65 [ D.8610 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 157 156 158 14 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])
        (reg:SI 65 [ D.8610 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.8610 ])
        (nil)))

(insn 158 157 159 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 159 158 161 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 169)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 161 159 163 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 163 161 164 15 (set (reg/f:SI 108 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 164 163 165 15 (set (reg:SI 64 [ D.8611 ])
        (mem/s/j:SI (reg/f:SI 108 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 108 [ P ])
        (nil)))

(insn 165 164 166 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 64 [ D.8611 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.8611 ])
        (nil)))

(insn 166 165 167 15 (set (reg/f:SI 109)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC25") [flags 0x2] <string_cst 0x756580>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 167 166 168 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 109)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 109)
        (nil)))

(call_insn 168 167 169 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_error$stub") <function_decl 0x69df80 error>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 169 168 170 16 166 "" [1 uses])

(note 170 169 172 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 172 170 173 16 (set (reg:SI 110 [ name ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 173 172 174 16 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 110 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 110 [ name ])
        (nil)))

(insn 174 173 175 16 (set (reg/f:SI 111)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC18") [flags 0x2] <string_cst 0x7655d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 175 174 176 16 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 111)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 111)
        (nil)))

(call_insn 176 175 178 16 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_append$stub") <function_decl 0x69dc80 append>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 178 176 179 16 (set (reg/f:SI 112 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 179 178 180 16 (set (reg:SI 113 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 112 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 112 [ P ])
        (nil)))

(insn 180 179 181 16 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 113 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 113 [ <variable>.next ])
        (nil)))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 181 180 182 17 164 "" [1 uses])

(note 182 181 183 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 183 182 184 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 184 183 228 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 148)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 228 184 185 17 NOTE_INSN_LOOP_END)

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 185 228 186 18 162 "" [1 uses])

(note 186 185 188 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 188 186 189 18 (set (reg/f:SI 114 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 189 188 190 18 (set (reg:SI 63 [ D.8612 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 114 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 114 [ G ])
        (nil)))

(insn 190 189 191 18 (parallel [
            (set (reg:SI 62 [ D.8613 ])
                (and:SI (reg:SI 63 [ D.8612 ])
                    (const_int 258048 [0x3f000])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 63 [ D.8612 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 191 190 192 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 62 [ D.8613 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8613 ])
        (nil)))

(insn 192 191 193 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 193 192 194 18 (set (reg/f:SI 115)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC26") [flags 0x2] <string_cst 0x7a0e10>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 194 193 195 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 115)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 115)
        (nil)))

(call_insn 195 194 197 18 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 197 195 198 18 (set (reg/f:SI 116 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 198 197 199 18 (set (reg:SI 61 [ D.8614 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 116 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 116 [ G ])
        (nil)))

(insn 199 198 200 18 (parallel [
            (set (reg:SI 60 [ D.8615 ])
                (and:SI (reg:SI 61 [ D.8614 ])
                    (const_int 15728640 [0xf00000])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 61 [ D.8614 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 200 199 201 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 60 [ D.8615 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8615 ])
        (nil)))

(insn 201 200 202 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 202 201 203 18 (set (reg/f:SI 117)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC27") [flags 0x2] <string_cst 0x7a2060>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 203 202 204 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 117)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 117)
        (nil)))

(call_insn 204 203 206 18 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 206 204 207 18 (set (reg/f:SI 118 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 207 206 208 18 (set (reg:SI 59 [ D.8616 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 118 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 118 [ G ])
        (nil)))

(insn 208 207 209 18 (parallel [
            (set (reg:SI 58 [ D.8617 ])
                (and:SI (reg:SI 59 [ D.8616 ])
                    (const_int -15986704 [0xffffffffff0c0ff0])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 59 [ D.8616 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 209 208 210 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 58 [ D.8617 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8617 ])
        (nil)))

(insn 210 209 211 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 211 210 212 18 (set (reg/f:SI 119)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC28") [flags 0x2] <string_cst 0x7a22a0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 212 211 213 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 119)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))

(call_insn 213 212 214 18 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 214 213 0 NOTE_INSN_FUNCTION_END)


;; Function printGroupTypes



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
66 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 64 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 15 [0xf])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (reg/f:SI 58)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC29") [flags 0x2] <string_cst 0x7ab9c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 11 10 12 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 58)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 58)
        (nil)))

(call_insn 12 11 14 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 14 12 15 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(insn 15 14 16 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (reg/f:SI 59)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC30") [flags 0x2] <string_cst 0x7abb10>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 17 16 18 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 59)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 59)
        (nil)))

(call_insn 18 17 20 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 20 18 21 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 22 21 23 0 (set (reg/f:SI 60)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC31") [flags 0x2] <string_cst 0x7abc60>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 23 22 24 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 60)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 60)
        (nil)))

(call_insn 24 23 26 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 26 24 27 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1039 [0x40f])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 0 (set (reg/f:SI 61)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC32") [flags 0x2] <string_cst 0x7abdb0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 29 28 30 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 61)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 61)
        (nil)))

(call_insn 30 29 32 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 32 30 33 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 4128768 [0x3f0000])) 41 {*movsi_1} (nil)
    (nil))

(insn 33 32 34 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 34 33 35 0 (set (reg/f:SI 62)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC33") [flags 0x2] <string_cst 0x7abf00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 35 34 36 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 62)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 62)
        (nil)))

(call_insn 36 35 38 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 38 36 39 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 258048 [0x3f000])) 41 {*movsi_1} (nil)
    (nil))

(insn 39 38 40 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 40 39 41 0 (set (reg/f:SI 63)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC34") [flags 0x2] <string_cst 0x756c00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 41 40 42 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 63)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 63)
        (nil)))

(call_insn 42 41 44 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 44 42 45 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 15728640 [0xf00000])) 41 {*movsi_1} (nil)
    (nil))

(insn 45 44 46 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 46 45 47 0 (set (reg/f:SI 64)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC27") [flags 0x2] <string_cst 0x7a2060>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 47 46 48 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 64)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 64)
        (nil)))

(call_insn 48 47 50 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 50 48 51 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int -15986704 [0xffffffffff0c0ff0])) 41 {*movsi_1} (nil)
    (nil))

(insn 51 50 52 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 52 51 53 0 (set (reg/f:SI 65)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC28") [flags 0x2] <string_cst 0x7a22a0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 53 52 54 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 65)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 65)
        (nil)))

(call_insn 54 53 55 0 (call (mem:QI (symbol_ref:SI ("printTypes") [flags 0x103] <function_decl 0x709b80 printTypes>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 55 54 0 NOTE_INSN_FUNCTION_END)


;; Function selectFirstType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:15000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 74 costs: AREG:2000 DREG:2000 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref AREG, else GENERAL_REGS
  Register 70 pref GENERAL_REGS or none
  Register 71 pref CREG, else GENERAL_REGS
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref CREG, else GENERAL_REGS
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref FLOAT_INT_SSE_REGS or none
  Register 78 pref FLOAT_INT_SSE_REGS or none
  Register 79 pref GENERAL_REGS or none
80 registers.

Register 58 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 6 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 67 used 4 times across 6 insns; set 3 times; GENERAL_REGS or none.

Register 68 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 2 insns in block 8; set 1 time; pref AREG, else GENERAL_REGS.

Register 70 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 3 insns in block 3; set 1 time; pref CREG, else GENERAL_REGS.

Register 72 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 3 insns in block 4; set 1 time; pref CREG, else GENERAL_REGS.

Register 75 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 79 used 3 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

9 basic blocks, 13 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  0
Successors:  6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  6
Successors:  4 (fallthru) 5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  3
Successors:  6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 1, count 0, freq 0.
Predecessors:  2 5 (fallthru)
Successors:  3 7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67

Basic block 8 prev 7, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  1 4 7 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 1.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 2.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 2.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 79 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 70 [ range ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 range+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (parallel [
            (set (reg:SI 68 [ D.8641 ])
                (and:SI (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])
                    (reg:SI 70 [ range ])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 70 [ range ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (and:SI (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])
                        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                                (const_int 4 [0x4])) [0 range+0 S4 A32]))
                    (nil))))))

(insn 10 9 11 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 68 [ D.8641 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.8641 ])
        (nil)))

(jump_insn 11 10 13 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 13 11 14 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 1 (set (reg:SI 67 [ D.8642 ])
        (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 15 14 16 1 (set (pc)
        (label_ref 63)) 517 {jump} (nil)
    (nil))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67

(barrier 16 15 17)

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 17 16 18 2 174 "" [1 uses])

(note 18 17 20 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 82 2 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(note 82 20 21 2 NOTE_INSN_LOOP_BEG)

(jump_insn 21 82 22 2 (set (pc)
        (label_ref 54)) 517 {jump} (nil)
    (nil))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 22 21 23)

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 23 22 24 3 178 "" [1 uses])

(note 24 23 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 26 24 27 3 (set (reg:SI 71 [ i ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 3 (set (reg:SI 72)
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 3 (parallel [
            (set (reg:SI 66 [ D.8643 ])
                (ashift:SI (reg:SI 72)
                    (subreg:QI (reg:SI 71 [ i ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 72)
            (expr_list:REG_DEAD (reg:SI 71 [ i ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 29 28 30 3 (set (reg:SI 65 [ D.8644 ])
        (reg:SI 66 [ D.8643 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.8643 ])
        (nil)))

(insn 30 29 31 3 (parallel [
            (set (reg:SI 64 [ D.8645 ])
                (and:SI (reg:SI 65 [ D.8644 ])
                    (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 range+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 65 [ D.8644 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 31 30 32 3 (parallel [
            (set (reg:SI 63 [ D.8646 ])
                (and:SI (reg:SI 64 [ D.8645 ])
                    (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 64 [ D.8645 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 32 31 33 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 63 [ D.8646 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8646 ])
        (nil)))

(jump_insn 33 32 35 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 35 33 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 38 4 (set (reg:SI 73 [ range ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 range+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 38 37 39 4 (set (reg:SI 62 [ D.8647 ])
        (not:SI (reg:SI 73 [ range ]))) 398 {*one_cmplsi2_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ range ])
        (expr_list:REG_EQUAL (not:SI (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                        (const_int 4 [0x4])) [0 range+0 S4 A32]))
            (nil))))

(insn 39 38 40 4 (parallel [
            (set (reg:SI 61 [ D.8648 ])
                (and:SI (reg:SI 62 [ D.8647 ])
                    (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 62 [ D.8647 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 40 39 41 4 (set (reg:SI 74 [ i ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 41 40 42 4 (set (reg:SI 75)
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 42 41 43 4 (parallel [
            (set (reg:SI 60 [ D.8649 ])
                (ashift:SI (reg:SI 75)
                    (subreg:QI (reg:SI 74 [ i ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 75)
            (expr_list:REG_DEAD (reg:SI 74 [ i ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 43 42 44 4 (set (reg:SI 59 [ D.8650 ])
        (reg:SI 60 [ D.8649 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8649 ])
        (nil)))

(insn 44 43 45 4 (parallel [
            (set (reg:SI 76)
                (ior:SI (reg:SI 61 [ D.8648 ])
                    (reg:SI 59 [ D.8650 ])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 61 [ D.8648 ])
            (expr_list:REG_DEAD (reg:SI 59 [ D.8650 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 45 44 47 4 (set (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])
        (reg:SI 76)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76)
        (expr_list:REG_EQUAL (ior:SI (reg:SI 61 [ D.8648 ])
                (reg:SI 59 [ D.8650 ]))
            (nil))))

(insn 47 45 48 4 (set (reg:SI 67 [ D.8642 ])
        (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 48 47 49 4 (set (pc)
        (label_ref 63)) 517 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67

(barrier 49 48 50)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 50 49 51 5 179 "" [1 uses])

(note 51 50 81 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 81 51 53 5 (parallel [
            (set (reg/f:SI 79)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 53 81 54 5 (parallel [
            (set (mem/i:SI (reg/f:SI 79) [0 i+0 S4 A32])
                (plus:SI (mem/i:SI (reg/f:SI 79) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg/f:SI 79)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 54 53 55 6 177 "" [1 uses])

(note 55 54 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 6 (set (reg:SI 58 [ i.15 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 57 56 58 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 58 [ i.15 ])
            (const_int 3 [0x3]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ i.15 ])
        (nil)))

(jump_insn 58 57 83 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 23)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 83 58 60 6 NOTE_INSN_LOOP_END)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 60 83 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 62 60 63 7 (set (reg:SI 67 [ D.8642 ])
        (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67
(code_label 63 62 64 8 176 "" [2 uses])

(note 64 63 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 68 8 (set (reg:SI 69 [ <result> ])
        (reg:SI 67 [ D.8642 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.8642 ])
        (nil)))

(note 68 65 71 8 NOTE_INSN_FUNCTION_END)

(insn 71 68 77 8 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 69 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ <result> ])
        (nil)))

(insn 77 71 0 8 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function updateMin



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:39000 FP_TOP_SSE_REGS:51000 FP_SECOND_SSE_REGS:51000 FLOAT_SSE_REGS:51000 FLOAT_INT_REGS:51000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:51000 ALL_REGS:51000 MEM:11000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:6000 DREG:6000 CREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 Q_REGS:6000 NON_Q_REGS:6000 INDEX_REGS:6000 LEGACY_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:19000 MMX_REGS:32000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:32000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:40000 MEM:13000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 64 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 66 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref FLOAT_INT_SSE_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref FP_TOP_REG, else FLOAT_INT_REGS
  Register 62 pref FLOAT_INT_SSE_REGS or none
  Register 63 pref Q_REGS, else GENERAL_REGS
  Register 64 pref SSE_REGS or none
  Register 65 pref Q_REGS, else GENERAL_REGS
  Register 66 pref SSE_REGS or none
  Register 67 pref FLOAT_INT_SSE_REGS or none
68 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 3 times across 5 insns; set 2 times; FLOAT_INT_SSE_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 5; set 1 time; pref FP_TOP_REG, else FLOAT_INT_REGS.

Register 62 used 2 times across 2 insns in block 0; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 63 used 4 times across 5 insns in block 0; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 64 used 2 times across 2 insns in block 0; set 1 time; SSE_REGS or none.

Register 65 used 2 times across 2 insns in block 0; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 66 used 2 times across 2 insns in block 1; set 1 time; SSE_REGS or none.

6 basic blocks, 9 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  3 1 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  3 2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 2, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

Basic block 3 prev 4, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  0 1
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

Basic block 5 prev 3, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  3 4
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 60 in 0.
;; Register 61 in 8.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 21.
;; Register 65 in 1.
;; Register 66 in 21.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 7 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 0 (set (reg:SF 62 [ val ])
        (mem/i:SF (reg/f:SI 16 argp) [0 val+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 8 7 10 0 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])
        (reg:SF 62 [ val ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 62 [ val ])
        (nil)))

(insn 10 8 11 0 (set (reg:SF 64 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 11 10 12 0 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 64 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 64 [ __x ])
        (nil)))

(insn 12 11 13 0 (set (reg:QI 63)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 13 12 14 0 (set (reg:QI 65)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 14 13 15 0 (parallel [
            (set (reg:QI 63)
                (ior:QI (reg:QI 63)
                    (reg:QI 65)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 65)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32]))
                    (nil))))))

(insn 15 14 16 0 (parallel [
            (set (reg:SI 58 [ D.8667 ])
                (zero_extend:SI (reg:QI 63)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 63)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 16 15 18 0 (set (reg:SI 60 [ D.8663 ])
        (reg:SI 58 [ D.8667 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8667 ])
        (nil)))

(insn 18 16 19 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8663 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8663 ])
        (nil)))

(jump_insn 19 18 21 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 21 19 22 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 1 (set (reg:SF 66 [ new ])
        (mem/i:SF (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 new+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 23 22 24 1 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 66 [ new ])
            (mem/i:SF (reg/f:SI 16 argp) [0 val+0 S4 A32]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 66 [ new ])
        (nil)))

(jump_insn 24 23 53 1 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 53 24 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 33 53 34 4 186 "" [0 uses])

(note 34 33 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 36 34 57 4 (set (reg:SF 59 [ D.8664 ])
        (mem/i:SF (reg/f:SI 16 argp) [0 val+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(jump_insn 57 36 58 4 (set (pc)
        (label_ref 37)) 517 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 58 57 28)

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 28 58 29 3 184 "" [2 uses])

(note 29 28 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 3 (set (reg:SF 59 [ D.8664 ])
        (mem/i:SF (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 new+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(jump_insn 31 30 32 3 (set (pc)
        (label_ref 37)) 517 {jump} (nil)
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 32 31 37)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
(code_label 37 32 38 5 188 "" [2 uses])

(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 42 5 (set (reg:SF 61 [ <result> ])
        (reg:SF 59 [ D.8664 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 59 [ D.8664 ])
        (nil)))

(note 42 39 45 5 NOTE_INSN_FUNCTION_END)

(insn 45 42 51 5 (set (reg/i:SF 8 st [ <result> ])
        (reg:SF 61 [ <result> ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 61 [ <result> ])
        (nil)))

(insn 51 45 0 5 (use (reg/i:SF 8 st [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function updateMax



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:39000 FP_TOP_SSE_REGS:51000 FP_SECOND_SSE_REGS:51000 FLOAT_SSE_REGS:51000 FLOAT_INT_REGS:51000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:51000 ALL_REGS:51000 MEM:11000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:6000 DREG:6000 CREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 Q_REGS:6000 NON_Q_REGS:6000 INDEX_REGS:6000 LEGACY_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:19000 MMX_REGS:32000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:32000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:40000 MEM:13000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 64 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 66 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:11000
  Register 67 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref FLOAT_INT_SSE_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref FP_TOP_REG, else FLOAT_INT_REGS
  Register 62 pref FLOAT_INT_SSE_REGS or none
  Register 63 pref Q_REGS, else GENERAL_REGS
  Register 64 pref SSE_REGS or none
  Register 65 pref Q_REGS, else GENERAL_REGS
  Register 66 pref SSE_REGS or none
  Register 67 pref SSE_REGS or none
  Register 68 pref FLOAT_INT_SSE_REGS or none
69 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 3 times across 5 insns; set 2 times; FLOAT_INT_SSE_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 5; set 1 time; pref FP_TOP_REG, else FLOAT_INT_REGS.

Register 62 used 2 times across 2 insns in block 0; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 63 used 4 times across 5 insns in block 0; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 64 used 2 times across 2 insns in block 0; set 1 time; SSE_REGS or none.

Register 65 used 2 times across 2 insns in block 0; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 66 used 2 times across 3 insns in block 1; set 1 time; SSE_REGS or none.

Register 67 used 2 times across 2 insns in block 1; set 1 time; SSE_REGS or none.

6 basic blocks, 9 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  3 1 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  3 2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 2, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

Basic block 3 prev 4, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  0 1
Successors:  5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

Basic block 5 prev 3, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  3 4
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 60 in 0.
;; Register 61 in 8.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 21.
;; Register 65 in 1.
;; Register 66 in 22.
;; Register 67 in 21.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 7 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 0 (set (reg:SF 62 [ val ])
        (mem/i:SF (reg/f:SI 16 argp) [0 val+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 8 7 10 0 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])
        (reg:SF 62 [ val ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 62 [ val ])
        (nil)))

(insn 10 8 11 0 (set (reg:SF 64 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 11 10 12 0 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 64 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 64 [ __x ])
        (nil)))

(insn 12 11 13 0 (set (reg:QI 63)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 13 12 14 0 (set (reg:QI 65)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 14 13 15 0 (parallel [
            (set (reg:QI 63)
                (ior:QI (reg:QI 63)
                    (reg:QI 65)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 65)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32]))
                    (nil))))))

(insn 15 14 16 0 (parallel [
            (set (reg:SI 58 [ D.8680 ])
                (zero_extend:SI (reg:QI 63)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 63)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 16 15 18 0 (set (reg:SI 60 [ D.8676 ])
        (reg:SI 58 [ D.8680 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8680 ])
        (nil)))

(insn 18 16 19 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8676 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8676 ])
        (nil)))

(jump_insn 19 18 21 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 21 19 22 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 1 (set (reg:SF 66 [ new ])
        (mem/i:SF (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 new+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 23 22 24 1 (set (reg:SF 67 [ val ])
        (mem/i:SF (reg/f:SI 16 argp) [0 val+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 24 23 25 1 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 67 [ val ])
            (reg:SF 66 [ new ]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 67 [ val ])
        (expr_list:REG_DEAD (reg:SF 66 [ new ])
            (nil))))

(jump_insn 25 24 54 1 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 54 25 34 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 34 54 35 4 193 "" [0 uses])

(note 35 34 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 58 4 (set (reg:SF 59 [ D.8677 ])
        (mem/i:SF (reg/f:SI 16 argp) [0 val+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(jump_insn 58 37 59 4 (set (pc)
        (label_ref 38)) 517 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 59 58 29)

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 29 59 30 3 191 "" [2 uses])

(note 30 29 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 3 (set (reg:SF 59 [ D.8677 ])
        (mem/i:SF (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 new+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(jump_insn 32 31 33 3 (set (pc)
        (label_ref 38)) 517 {jump} (nil)
    (nil))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 33 32 38)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
(code_label 38 33 39 5 195 "" [2 uses])

(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 43 5 (set (reg:SF 61 [ <result> ])
        (reg:SF 59 [ D.8677 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 59 [ D.8677 ])
        (nil)))

(note 43 40 46 5 NOTE_INSN_FUNCTION_END)

(insn 46 43 52 5 (set (reg/i:SF 8 st [ <result> ])
        (reg:SF 61 [ <result> ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 61 [ <result> ])
        (nil)))

(insn 52 46 0 5 (use (reg/i:SF 8 st [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 8 [st] 16 [argp] 20 [frame]


;; Function estimateOutputBounds



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:11000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:11000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:12000 DREG:12000 CREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 Q_REGS:12000 NON_Q_REGS:12000 INDEX_REGS:12000 LEGACY_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:21000 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:34000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:46000 MEM:10000
  Register 75 costs: AREG:12000 DREG:12000 CREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 Q_REGS:12000 NON_Q_REGS:12000 INDEX_REGS:12000 LEGACY_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:21000 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:34000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:46000 MEM:10000
  Register 76 costs: AREG:12000 DREG:12000 CREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 Q_REGS:12000 NON_Q_REGS:12000 INDEX_REGS:12000 LEGACY_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:21000 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:34000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:46000 MEM:10000
  Register 77 costs: AD_REGS:62000 Q_REGS:62000 NON_Q_REGS:62000 INDEX_REGS:62000 LEGACY_REGS:62000 GENERAL_REGS:62000 FP_TOP_REG:50000 FP_SECOND_REG:50000 FLOAT_REGS:50000 SSE_REGS:8000 FP_TOP_SSE_REGS:50000 FP_SECOND_SSE_REGS:50000 FLOAT_SSE_REGS:50000 FLOAT_INT_REGS:66000 INT_SSE_REGS:62000 FLOAT_INT_SSE_REGS:66000 ALL_REGS:66000 MEM:23000
  Register 78 costs: AD_REGS:54000 Q_REGS:54000 NON_Q_REGS:54000 INDEX_REGS:54000 LEGACY_REGS:54000 GENERAL_REGS:54000 FP_TOP_REG:42000 FP_SECOND_REG:42000 FLOAT_REGS:42000 SSE_REGS:0 FP_TOP_SSE_REGS:42000 FP_SECOND_SSE_REGS:42000 FLOAT_SSE_REGS:42000 FLOAT_INT_REGS:58000 INT_SSE_REGS:54000 FLOAT_INT_SSE_REGS:58000 ALL_REGS:58000 MEM:15000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 81 costs: AREG:12000 DREG:12000 CREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 Q_REGS:12000 NON_Q_REGS:12000 INDEX_REGS:12000 LEGACY_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:21000 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:34000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:46000 MEM:10000
  Register 82 costs: AREG:12000 DREG:12000 CREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 Q_REGS:12000 NON_Q_REGS:12000 INDEX_REGS:12000 LEGACY_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:-1000 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:21000 MMX_REGS:38000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:34000 INT_SSE_REGS:34000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:46000 MEM:10000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:208000 MMX_REGS:208000 FP_TOP_SSE_REGS:208000 FP_SECOND_SSE_REGS:208000 FLOAT_SSE_REGS:208000 FLOAT_INT_REGS:144000 INT_SSE_REGS:208000 FLOAT_INT_SSE_REGS:208000 ALL_REGS:208000 MEM:49000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 94 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AD_REGS:54000 Q_REGS:54000 NON_Q_REGS:54000 INDEX_REGS:54000 LEGACY_REGS:54000 GENERAL_REGS:54000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 FP_TOP_SSE_REGS:42000 FP_SECOND_SSE_REGS:42000 FLOAT_SSE_REGS:42000 FLOAT_INT_REGS:58000 INT_SSE_REGS:54000 FLOAT_INT_SSE_REGS:58000 ALL_REGS:58000 MEM:14000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 110 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 111 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 113 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 114 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 115 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 116 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 117 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 118 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 119 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 120 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 121 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 122 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 123 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 124 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 125 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 126 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 127 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 128 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 129 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:11000
  Register 131 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 132 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 133 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 134 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 135 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 136 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 137 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 138 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 139 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:11000
  Register 140 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 141 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 142 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 143 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 144 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 145 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 146 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 147 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 148 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 149 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 150 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 151 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 152 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 153 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 154 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 155 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 156 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 157 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 158 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 159 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 160 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 161 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 162 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 163 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000
  Register 164 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 165 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:52000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:13000
  Register 166 costs: AREG:13000 DREG:13000 CREG:13000 SIREG:13000 DIREG:13000 AD_REGS:13000 Q_REGS:13000 NON_Q_REGS:13000 INDEX_REGS:13000 LEGACY_REGS:13000 GENERAL_REGS:13000 FP_TOP_REG:21000 FP_SECOND_REG:21000 FLOAT_REGS:21000 SSE_REGS:0 MMX_REGS:30000 FP_TOP_SSE_REGS:38000 FP_SECOND_SSE_REGS:38000 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:38000 ALL_REGS:38000 MEM:12000
  Register 167 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 168 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 169 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:0 MMX_REGS:26000 FP_TOP_SSE_REGS:34000 FP_SECOND_SSE_REGS:34000 FLOAT_SSE_REGS:34000 FLOAT_INT_REGS:34000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:34000 ALL_REGS:34000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref FLOAT_INT_SSE_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref SSE_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref SSE_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref FP_TOP_REG, else FLOAT_REGS
  Register 75 pref FP_TOP_REG, else FLOAT_REGS
  Register 76 pref FP_TOP_REG, else FLOAT_REGS
  Register 77 pref SSE_REGS or none
  Register 78 pref SSE_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref FP_TOP_REG, else FLOAT_REGS
  Register 82 pref FP_TOP_REG, else FLOAT_REGS
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref FLOAT_INT_SSE_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref FLOAT_INT_SSE_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref FLOAT_INT_SSE_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref GENERAL_REGS or none
  Register 95 pref FLOAT_INT_SSE_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref FLOAT_INT_SSE_REGS or none
  Register 98 pref FLOAT_INT_SSE_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref FLOAT_INT_SSE_REGS or none
  Register 101 pref FLOAT_INT_SSE_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref FLOAT_INT_SSE_REGS or none
  Register 104 pref FLOAT_INT_SSE_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref GENERAL_REGS or none
  Register 107 pref SSE_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref FLOAT_INT_SSE_REGS or none
  Register 111 pref GENERAL_REGS or none
  Register 112 pref FLOAT_INT_SSE_REGS or none
  Register 113 pref FLOAT_INT_SSE_REGS or none
  Register 114 pref GENERAL_REGS or none
  Register 115 pref FLOAT_INT_SSE_REGS or none
  Register 116 pref FLOAT_INT_SSE_REGS or none
  Register 117 pref GENERAL_REGS or none
  Register 118 pref FLOAT_INT_SSE_REGS or none
  Register 119 pref GENERAL_REGS or none
  Register 120 pref FLOAT_INT_SSE_REGS or none
  Register 121 pref FLOAT_INT_SSE_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref FLOAT_INT_SSE_REGS or none
  Register 124 pref Q_REGS, else GENERAL_REGS
  Register 125 pref SSE_REGS or none
  Register 126 pref Q_REGS, else GENERAL_REGS
  Register 127 pref GENERAL_REGS or none
  Register 128 pref FLOAT_INT_SSE_REGS or none
  Register 129 pref GENERAL_REGS or none
  Register 130 pref SSE_REGS or none
  Register 131 pref SSE_REGS or none
  Register 132 pref FLOAT_INT_SSE_REGS or none
  Register 133 pref Q_REGS, else GENERAL_REGS
  Register 134 pref SSE_REGS or none
  Register 135 pref Q_REGS, else GENERAL_REGS
  Register 136 pref GENERAL_REGS or none
  Register 137 pref FLOAT_INT_SSE_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref SSE_REGS or none
  Register 140 pref SSE_REGS or none
  Register 141 pref GENERAL_REGS or none
  Register 142 pref FLOAT_INT_SSE_REGS or none
  Register 143 pref GENERAL_REGS or none
  Register 144 pref GENERAL_REGS or none
  Register 145 pref FLOAT_INT_SSE_REGS or none
  Register 146 pref Q_REGS, else GENERAL_REGS
  Register 147 pref SSE_REGS or none
  Register 148 pref Q_REGS, else GENERAL_REGS
  Register 149 pref FLOAT_INT_SSE_REGS or none
  Register 150 pref Q_REGS, else GENERAL_REGS
  Register 151 pref SSE_REGS or none
  Register 152 pref Q_REGS, else GENERAL_REGS
  Register 153 pref GENERAL_REGS or none
  Register 154 pref GENERAL_REGS or none
  Register 155 pref FLOAT_INT_SSE_REGS or none
  Register 156 pref GENERAL_REGS or none
  Register 157 pref FLOAT_INT_SSE_REGS or none
  Register 158 pref GENERAL_REGS or none
  Register 159 pref FLOAT_INT_SSE_REGS or none
  Register 160 pref GENERAL_REGS or none
  Register 161 pref FLOAT_INT_SSE_REGS or none
  Register 162 pref GENERAL_REGS or none
  Register 163 pref FLOAT_INT_SSE_REGS or none
  Register 164 pref GENERAL_REGS or none
  Register 165 pref Q_REGS, else GENERAL_REGS
  Register 166 pref SSE_REGS or none
  Register 167 pref Q_REGS, else GENERAL_REGS
  Register 168 pref GENERAL_REGS or none
  Register 169 pref FLOAT_INT_SSE_REGS or none
170 registers.

Register 58 used 2 times across 2 insns in block 40; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 37; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 27; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 40; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 40; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 65 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 37; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 3 insns in block 32; set 1 time; SSE_REGS or none.

Register 70 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 3 insns in block 29; set 1 time; SSE_REGS or none.

Register 72 used 2 times across 2 insns in block 27; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 25; set 1 time; pref FP_TOP_REG, else FLOAT_REGS.

Register 75 used 2 times across 2 insns in block 24; set 1 time; pref FP_TOP_REG, else FLOAT_REGS.

Register 76 used 2 times across 2 insns in block 24; set 1 time; pref FP_TOP_REG, else FLOAT_REGS.

Register 77 used 2 times across 2 insns in block 22; set 1 time; 8 bytes; SSE_REGS or none.

Register 78 used 2 times across 4 insns in block 22; set 1 time; 8 bytes; SSE_REGS or none.

Register 79 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 80 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 81 used 2 times across 2 insns in block 21; set 1 time; pref FP_TOP_REG, else FLOAT_REGS.

Register 82 used 2 times across 2 insns in block 21; set 1 time; pref FP_TOP_REG, else FLOAT_REGS.

Register 83 used 16 times across 27 insns; set 1 time; dies in 4 places; GENERAL_REGS or none.

Register 84 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 85 used 4 times across 4 insns in block 0; set 2 times; GENERAL_REGS or none; pointer.

Register 86 used 2 times across 2 insns in block 0; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 87 used 4 times across 4 insns in block 0; set 2 times; GENERAL_REGS or none; pointer.

Register 88 used 2 times across 2 insns in block 0; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 89 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 90 used 2 times across 2 insns in block 0; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 91 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 92 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 93 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 94 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 95 used 2 times across 2 insns in block 20; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 96 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 97 used 2 times across 2 insns in block 20; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 98 used 2 times across 2 insns in block 20; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 99 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none; pointer.

Register 100 used 2 times across 2 insns in block 21; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 101 used 2 times across 2 insns in block 21; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 102 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none; pointer.

Register 103 used 2 times across 2 insns in block 21; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 104 used 2 times across 2 insns in block 21; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 105 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none; pointer.

Register 106 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none; pointer.

Register 107 used 2 times across 2 insns in block 22; set 1 time; 8 bytes; SSE_REGS or none.

Register 108 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none; pointer.

Register 109 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none; pointer.

Register 110 used 2 times across 2 insns in block 23; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 111 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none; pointer.

Register 112 used 2 times across 2 insns in block 24; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 113 used 2 times across 2 insns in block 24; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 114 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none; pointer.

Register 115 used 2 times across 2 insns in block 24; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 116 used 2 times across 2 insns in block 24; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 117 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none; pointer.

Register 118 used 2 times across 2 insns in block 24; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 119 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none; pointer.

Register 120 used 2 times across 2 insns in block 25; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 121 used 2 times across 2 insns in block 25; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 122 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none; pointer.

Register 123 used 2 times across 2 insns in block 27; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 124 used 4 times across 5 insns in block 27; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 125 used 2 times across 2 insns in block 27; set 1 time; SSE_REGS or none.

Register 126 used 2 times across 2 insns in block 27; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 127 used 2 times across 2 insns in block 28; set 1 time; GENERAL_REGS or none; pointer.

Register 128 used 2 times across 2 insns in block 28; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 129 used 2 times across 2 insns in block 29; set 1 time; GENERAL_REGS or none; pointer.

Register 130 used 2 times across 2 insns in block 29; set 1 time; SSE_REGS or none.

Register 131 used 2 times across 2 insns in block 29; set 1 time; SSE_REGS or none.

Register 132 used 2 times across 2 insns in block 30; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 133 used 4 times across 5 insns in block 30; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 134 used 2 times across 2 insns in block 30; set 1 time; SSE_REGS or none.

Register 135 used 2 times across 2 insns in block 30; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 136 used 2 times across 2 insns in block 31; set 1 time; GENERAL_REGS or none; pointer.

Register 137 used 2 times across 2 insns in block 31; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 138 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none; pointer.

Register 139 used 2 times across 2 insns in block 32; set 1 time; SSE_REGS or none.

Register 140 used 2 times across 2 insns in block 32; set 1 time; SSE_REGS or none.

Register 141 used 2 times across 2 insns in block 33; set 1 time; GENERAL_REGS or none; pointer.

Register 142 used 2 times across 2 insns in block 33; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 143 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none; pointer.

Register 144 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none.

Register 145 used 2 times across 2 insns in block 36; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 146 used 4 times across 5 insns in block 36; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 147 used 2 times across 2 insns in block 36; set 1 time; SSE_REGS or none.

Register 148 used 2 times across 2 insns in block 36; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 149 used 2 times across 2 insns in block 37; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 150 used 4 times across 5 insns in block 37; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 151 used 2 times across 2 insns in block 37; set 1 time; SSE_REGS or none.

Register 152 used 2 times across 2 insns in block 37; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 153 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none; pointer.

Register 154 used 2 times across 2 insns in block 39; set 1 time; GENERAL_REGS or none; pointer.

Register 155 used 2 times across 2 insns in block 39; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 156 used 2 times across 2 insns in block 39; set 1 time; GENERAL_REGS or none; pointer.

Register 157 used 2 times across 2 insns in block 39; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 158 used 2 times across 2 insns in block 39; set 1 time; GENERAL_REGS or none; pointer.

Register 159 used 2 times across 2 insns in block 39; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 160 used 2 times across 3 insns in block 40; set 1 time; GENERAL_REGS or none; pointer.

Register 161 used 2 times across 2 insns in block 40; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 162 used 2 times across 3 insns in block 40; set 1 time; GENERAL_REGS or none; pointer.

Register 163 used 2 times across 2 insns in block 40; set 1 time; FLOAT_INT_SSE_REGS or none.

Register 164 used 2 times across 2 insns in block 40; set 1 time; GENERAL_REGS or none; pointer.

Register 165 used 4 times across 5 insns in block 40; set 2 times; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 166 used 2 times across 2 insns in block 40; set 1 time; SSE_REGS or none.

Register 167 used 2 times across 2 insns in block 40; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 168 used 2 times across 3 insns in block 41; set 1 time; GENERAL_REGS or none; pointer.

Register 169 used 2 times across 2 insns in block 41; set 1 time; FLOAT_INT_SSE_REGS or none.

43 basic blocks, 68 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  35
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  35
Successors:  21 2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  11 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  24 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  8 5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  4 (fallthru)
Successors:  21 6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 6 prev 5, next 7, loop_depth 1, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  24 7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 1, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 1, count 0, freq 0.
Predecessors:  4
Successors:  25 9 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  8 (fallthru)
Successors:  21 10 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 1, count 0, freq 0.
Predecessors:  9 (fallthru)
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 1, count 0, freq 0.
Predecessors:  2
Successors:  20 12 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 12 prev 11, next 13, loop_depth 1, count 0, freq 0.
Predecessors:  11 (fallthru)
Successors:  16 13 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 13 prev 12, next 14, loop_depth 1, count 0, freq 0.
Predecessors:  12 (fallthru)
Successors:  21 14 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 14 prev 13, next 15, loop_depth 1, count 0, freq 0.
Predecessors:  13 (fallthru)
Successors:  21 15 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 14, next 16, loop_depth 1, count 0, freq 0.
Predecessors:  14 (fallthru)
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 1, count 0, freq 0.
Predecessors:  12
Successors:  21 17 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 17 prev 16, next 18, loop_depth 1, count 0, freq 0.
Predecessors:  16 (fallthru)
Successors:  21 18 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

Basic block 18 prev 17, next 19, loop_depth 1, count 0, freq 0.
Predecessors:  17 (fallthru)
Successors:  26 19 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 19 prev 18, next 20, loop_depth 1, count 0, freq 0.
Predecessors:  18 (fallthru)
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 20 prev 19, next 21, loop_depth 1, count 0, freq 0.
Predecessors:  11
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 21 prev 20, next 22, loop_depth 1, count 0, freq 0.
Predecessors:  1 5 9 13 14 16 17
Successors:  22 (fallthru) 23
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 22 prev 21, next 23, loop_depth 1, count 0, freq 0.
Predecessors:  21 (fallthru)
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 23 prev 22, next 24, loop_depth 1, count 0, freq 0.
Predecessors:  21
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 24 prev 23, next 25, loop_depth 1, count 0, freq 0.
Predecessors:  3 6
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 25 prev 24, next 26, loop_depth 1, count 0, freq 0.
Predecessors:  8
Successors:  34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 26 prev 25, next 27, loop_depth 1, count 0, freq 0.
Predecessors:  18
Successors:  27 (fallthru) 34
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 27 prev 26, next 28, loop_depth 1, count 0, freq 0.
Predecessors:  26 (fallthru)
Successors:  28 (fallthru) 29
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 28 prev 27, next 29, loop_depth 1, count 0, freq 0.
Predecessors:  27 (fallthru)
Successors:  30
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 29 prev 28, next 30, loop_depth 1, count 0, freq 0.
Predecessors:  27
Successors:  30 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 30 prev 29, next 31, loop_depth 1, count 0, freq 0.
Predecessors:  28 29 (fallthru)
Successors:  31 (fallthru) 32
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 31 prev 30, next 32, loop_depth 1, count 0, freq 0.
Predecessors:  30 (fallthru)
Successors:  33
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 32 prev 31, next 33, loop_depth 1, count 0, freq 0.
Predecessors:  30
Successors:  33 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 33 prev 32, next 34, loop_depth 1, count 0, freq 0.
Predecessors:  31 32 (fallthru)
Successors:  34 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 34 prev 33, next 35, loop_depth 1, count 0, freq 0.
Predecessors:  19 20 23 24 25 26 33 (fallthru) 22 7 10 15
Successors:  35 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 35 prev 34, next 36, loop_depth 1, count 0, freq 0.
Predecessors:  0 34 (fallthru)
Successors:  1 36 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 36 prev 35, next 37, loop_depth 0, count 0, freq 0.
Predecessors:  35 (fallthru)
Successors:  37 (fallthru) 40
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 37 prev 36, next 38, loop_depth 0, count 0, freq 0.
Predecessors:  36 (fallthru)
Successors:  38 (fallthru) 40
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 38 prev 37, next 39, loop_depth 0, count 0, freq 0.
Predecessors:  37 (fallthru)
Successors:  39 (fallthru) 40
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 39 prev 38, next 40, loop_depth 0, count 0, freq 0.
Predecessors:  38 (fallthru)
Successors:  40 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 40 prev 39, next 41, loop_depth 0, count 0, freq 0.
Predecessors:  36 37 38 39 (fallthru)
Successors:  41 (fallthru) 42
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 41 prev 40, next 42, loop_depth 0, count 0, freq 0.
Predecessors:  40 (fallthru)
Successors:  42 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 42 prev 41, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  41 (fallthru) 40
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 22.
;; Register 70 in 0.
;; Register 71 in 22.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 8.
;; Register 75 in 8.
;; Register 76 in 8.
;; Register 77 in 21.
;; Register 78 in 22.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 8.
;; Register 82 in 8.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 0.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 0.
;; Register 107 in 21.
;; Register 108 in 0.
;; Register 109 in 0.
;; Register 110 in 0.
;; Register 111 in 0.
;; Register 112 in 0.
;; Register 113 in 0.
;; Register 114 in 0.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 0.
;; Register 120 in 0.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 21.
;; Register 126 in 1.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 21.
;; Register 131 in 21.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 21.
;; Register 135 in 1.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 21.
;; Register 140 in 21.
;; Register 141 in 0.
;; Register 142 in 0.
;; Register 143 in 0.
;; Register 144 in 0.
;; Register 145 in 0.
;; Register 146 in 0.
;; Register 147 in 21.
;; Register 148 in 1.
;; Register 149 in 0.
;; Register 150 in 0.
;; Register 151 in 21.
;; Register 152 in 1.
;; Register 153 in 0.
;; Register 154 in 0.
;; Register 155 in 0.
;; Register 156 in 0.
;; Register 157 in 0.
;; Register 158 in 0.
;; Register 159 in 0.
;; Register 160 in 1.
;; Register 161 in 0.
;; Register 162 in 1.
;; Register 163 in 0.
;; Register 164 in 0.
;; Register 165 in 0.
;; Register 166 in 21.
;; Register 167 in 1.
;; Register 168 in 1.
;; Register 169 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 84 [ V ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 V+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 11 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])
        (reg:SI 84 [ V ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ V ])
        (nil)))

(insn 11 9 12 0 (set (reg/f:SI 85)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_NaNfunion$non_lazy_ptr") [flags 0x100] <var_decl 0x555a00 NaNfunion>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 12 11 13 0 (set (reg/f:SI 85)
        (mem/u/c:SI (reg/f:SI 85) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 13 12 14 0 (set (reg:SF 86 [ NaNfunion.__r ])
        (mem/s/j:SF (reg/f:SI 85) [0 NaNfunion.__r+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 85)
        (nil)))

(insn 14 13 15 0 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 86 [ NaNfunion.__r ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 86 [ NaNfunion.__r ])
        (nil)))

(insn 15 14 16 0 (set (reg/f:SI 87)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_NaNfunion$non_lazy_ptr") [flags 0x100] <var_decl 0x555a00 NaNfunion>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 16 15 17 0 (set (reg/f:SI 87)
        (mem/u/c:SI (reg/f:SI 87) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 17 16 18 0 (set (reg:SF 88 [ NaNfunion.__r ])
        (mem/s/j:SF (reg/f:SI 87) [0 NaNfunion.__r+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 87)
        (nil)))

(insn 18 17 19 0 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 88 [ NaNfunion.__r ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 88 [ NaNfunion.__r ])
        (nil)))

(insn 19 18 20 0 (set (reg/f:SI 89)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC35") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 20 19 21 0 (set (reg:SF 90)
        (mem/u/i:SF (reg/f:SI 89) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 89)
        (nil)))

(insn 21 20 23 0 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (reg:SF 90)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 90)
        (nil)))

(insn 23 21 24 0 (set (reg/f:SI 91 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 24 23 25 0 (set (reg:SI 92 [ <variable>.outputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 91 [ G ])
                (const_int 24 [0x18])) [0 <variable>.outputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 91 [ G ])
        (nil)))

(insn 25 24 370 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])
        (reg:SI 92 [ <variable>.outputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 92 [ <variable>.outputProcs ])
        (nil)))

(note 370 25 26 0 NOTE_INSN_LOOP_BEG)

(jump_insn 26 370 27 0 (set (pc)
        (label_ref 256)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 28)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 28 27 29 1 199 "" [1 uses])

(note 29 28 31 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 31 29 32 1 (set (reg/f:SI 93 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 32 31 34 1 (set (reg:SI 83 [ D.8709 ])
        (mem/s/j:SI (reg/f:SI 93 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 93 [ P ])
        (nil)))

(insn 34 32 35 1 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 64 [0x40]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 35 34 350 1 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 350 35 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 36 350 37 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 83 [ D.8709 ])
            (const_int 64 [0x40]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 37 36 351 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 351 37 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 38 351 39 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 8 [0x8]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 39 38 352 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 135)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 352 39 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 40 352 41 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 83 [ D.8709 ])
            (const_int 8 [0x8]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 41 40 353 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 353 41 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 42 353 43 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 2 [0x2]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 43 42 354 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 354 43 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 44 354 45 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 4 [0x4]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ D.8709 ])
        (nil)))

(jump_insn 45 44 355 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 135)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 355 45 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn 46 355 47 7 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 47 46 48)

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(code_label 48 47 356 8 207 "" [1 uses])

(note 356 48 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 49 356 50 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 16 [0x10]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 50 49 357 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 162)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 357 50 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 51 357 52 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 32 [0x20]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ D.8709 ])
        (nil)))

(jump_insn 52 51 358 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 358 52 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(jump_insn 53 358 54 10 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 54 53 55)

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(code_label 55 54 359 11 206 "" [1 uses])

(note 359 55 56 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 56 359 57 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 1024 [0x400]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 57 56 360 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 360 57 58 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 58 360 59 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 83 [ D.8709 ])
            (const_int 1024 [0x400]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 59 58 361 12 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 361 59 60 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 60 361 61 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 128 [0x80]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 61 60 362 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 362 61 62 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 62 362 63 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 256 [0x100]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ D.8709 ])
        (nil)))

(jump_insn 63 62 363 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 363 63 64 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(jump_insn 64 363 65 15 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 65 64 66)

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(code_label 66 65 364 16 208 "" [1 uses])

(note 364 66 67 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 67 364 68 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 16384 [0x4000]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 68 67 365 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 365 68 69 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 69 365 70 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 2097152 [0x200000]))) 5 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 70 69 366 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
(note 366 70 71 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 71 366 72 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ D.8709 ])
            (const_int 2048 [0x800]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ D.8709 ])
        (nil)))

(jump_insn 72 71 367 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 176)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 19, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 367 72 73 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(jump_insn 73 367 74 19 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 19, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 74 73 75)

;; Start of basic block 20, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 75 74 76 20 204 "" [1 uses])

(note 76 75 78 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 78 76 79 20 (set (reg/f:SI 94)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC35") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 79 78 80 20 (set (reg:SF 95)
        (mem/u/i:SF (reg/f:SI 94) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 94)
        (nil)))

(insn 80 79 82 20 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 95)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 95)
        (nil)))

(insn 82 80 83 20 (set (reg/f:SI 96)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC36") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 83 82 84 20 (set (reg:SF 97)
        (mem/u/i:SF (reg/f:SI 96) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 96)
        (nil)))

(insn 84 83 85 20 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (reg:SF 97)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 97)
        (nil)))

(insn 85 84 86 20 (set (reg:SF 98 [ init ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])) 90 {*movsf_1} (nil)
    (nil))

(insn 86 85 88 20 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 98 [ init ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 98 [ init ])
        (nil)))

(jump_insn 88 86 89 20 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 20, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 89 88 90)

;; Start of basic block 21, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 90 89 91 21 201 "" [7 uses])

(note 91 90 93 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 93 91 94 21 (set (reg/f:SI 99)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC35") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 94 93 95 21 (set (reg:SF 100)
        (mem/u/i:SF (reg/f:SI 99) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 99)
        (nil)))

(insn 95 94 96 21 (set (mem:SF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SF 100)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 100)
        (nil)))

(insn 96 95 97 21 (set (reg:SF 101 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 97 96 98 21 (set (mem:SF (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SF 101 [ min ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 101 [ min ])
        (nil)))

(call_insn 98 97 99 21 (set (reg:SF 8 st)
        (call (mem:QI (symbol_ref:SI ("updateMin") [flags 0x303] <function_decl 0x7b0e80 updateMin>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 99 98 100 21 (set (reg:SF 82 [ D.8710 ])
        (reg:SF 8 st)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 8 st)
        (nil)))

(insn 100 99 102 21 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 82 [ D.8710 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 82 [ D.8710 ])
        (nil)))

(insn 102 100 103 21 (set (reg/f:SI 102)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC36") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 103 102 104 21 (set (reg:SF 103)
        (mem/u/i:SF (reg/f:SI 102) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 102)
        (nil)))

(insn 104 103 105 21 (set (mem:SF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SF 103)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 103)
        (nil)))

(insn 105 104 106 21 (set (reg:SF 104 [ max ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 106 105 107 21 (set (mem:SF (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SF 104 [ max ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 104 [ max ])
        (nil)))

(call_insn 107 106 108 21 (set (reg:SF 8 st)
        (call (mem:QI (symbol_ref:SI ("updateMax") [flags 0x303] <function_decl 0x7bd380 updateMax>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 108 107 109 21 (set (reg:SF 81 [ D.8711 ])
        (reg:SF 8 st)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 8 st)
        (nil)))

(insn 109 108 111 21 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 81 [ D.8711 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 81 [ D.8711 ])
        (nil)))

(insn 111 109 112 21 (set (reg/f:SI 105 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 112 111 113 21 (set (reg:SI 80 [ D.8712 ])
        (mem/s/j:SI (reg/f:SI 105 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 105 [ P ])
        (nil)))

(insn 113 112 114 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 80 [ D.8712 ])
            (const_int 64 [0x40]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 80 [ D.8712 ])
        (nil)))

(jump_insn 114 113 116 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 21, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 22, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 116 114 118 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 118 116 119 22 (set (reg/f:SI 106 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 119 118 120 22 (set (reg:SI 79 [ D.8713 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 106 [ G ])
                (const_int 40 [0x28])) [0 <variable>.numUnits+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 106 [ G ])
        (nil)))

(insn 120 119 121 22 (set (reg:DF 78 [ D.8714 ])
        (float:DF (reg:SI 79 [ D.8713 ]))) 178 {*floatsidf2_sse} (nil)
    (expr_list:REG_DEAD (reg:SI 79 [ D.8713 ])
        (nil)))

(insn 121 120 122 22 (set (reg/f:SI 108)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC37") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 122 121 123 22 (set (reg:DF 107)
        (mem/u/i:DF (reg/f:SI 108) [0 S8 A64])) 94 {*movdf_nointeger} (nil)
    (expr_list:REG_DEAD (reg/f:SI 108)
        (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
            (nil))))

(insn 123 122 124 22 (set (reg:DF 77 [ D.8715 ])
        (div:DF (reg:DF 107)
            (reg:DF 78 [ D.8714 ]))) 576 {*fop_df_1_sse} (nil)
    (expr_list:REG_DEAD (reg:DF 107)
        (expr_list:REG_DEAD (reg:DF 78 [ D.8714 ])
            (nil))))

(insn 124 123 125 22 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (float_truncate:SF (reg:DF 77 [ D.8715 ]))) 130 {*truncdfsf_fast_sse} (nil)
    (expr_list:REG_DEAD (reg:DF 77 [ D.8715 ])
        (nil)))

(jump_insn 125 124 126 22 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 22, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 126 125 127)

;; Start of basic block 23, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 127 126 128 23 209 "" [1 uses])

(note 128 127 130 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 130 128 131 23 (set (reg/f:SI 109)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC38") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 131 130 132 23 (set (reg:SF 110)
        (mem/u/i:SF (reg/f:SI 109) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 109)
        (nil)))

(insn 132 131 133 23 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (reg:SF 110)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 110)
        (nil)))

(jump_insn 133 132 134 23 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 23, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 134 133 135)

;; Start of basic block 24, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 135 134 136 24 202 "" [2 uses])

(note 136 135 138 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 138 136 139 24 (set (reg/f:SI 111)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC39") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 139 138 140 24 (set (reg:SF 112)
        (mem/u/i:SF (reg/f:SI 111) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 111)
        (nil)))

(insn 140 139 141 24 (set (mem:SF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SF 112)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 112)
        (nil)))

(insn 141 140 142 24 (set (reg:SF 113 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 142 141 143 24 (set (mem:SF (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SF 113 [ min ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 113 [ min ])
        (nil)))

(call_insn 143 142 144 24 (set (reg:SF 8 st)
        (call (mem:QI (symbol_ref:SI ("updateMin") [flags 0x303] <function_decl 0x7b0e80 updateMin>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 144 143 145 24 (set (reg:SF 76 [ D.8716 ])
        (reg:SF 8 st)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 8 st)
        (nil)))

(insn 145 144 147 24 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 76 [ D.8716 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 76 [ D.8716 ])
        (nil)))

(insn 147 145 148 24 (set (reg/f:SI 114)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC36") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 148 147 149 24 (set (reg:SF 115)
        (mem/u/i:SF (reg/f:SI 114) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 114)
        (nil)))

(insn 149 148 150 24 (set (mem:SF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SF 115)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 115)
        (nil)))

(insn 150 149 151 24 (set (reg:SF 116 [ max ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 151 150 152 24 (set (mem:SF (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SF 116 [ max ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 116 [ max ])
        (nil)))

(call_insn 152 151 153 24 (set (reg:SF 8 st)
        (call (mem:QI (symbol_ref:SI ("updateMax") [flags 0x303] <function_decl 0x7bd380 updateMax>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 153 152 154 24 (set (reg:SF 75 [ D.8717 ])
        (reg:SF 8 st)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 8 st)
        (nil)))

(insn 154 153 156 24 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 75 [ D.8717 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 75 [ D.8717 ])
        (nil)))

(insn 156 154 157 24 (set (reg/f:SI 117)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC35") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 157 156 158 24 (set (reg:SF 118)
        (mem/u/i:SF (reg/f:SI 117) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 117)
        (nil)))

(insn 158 157 160 24 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (reg:SF 118)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 118)
        (nil)))

(jump_insn 160 158 161 24 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 24, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 161 160 162)

;; Start of basic block 25, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 162 161 163 25 203 "" [1 uses])

(note 163 162 165 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 165 163 166 25 (set (reg/f:SI 119)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC35") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 166 165 167 25 (set (reg:SF 120)
        (mem/u/i:SF (reg/f:SI 119) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))

(insn 167 166 168 25 (set (mem:SF (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SF 120)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 120)
        (nil)))

(insn 168 167 169 25 (set (reg:SF 121 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 169 168 170 25 (set (mem:SF (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SF 121 [ min ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 121 [ min ])
        (nil)))

(call_insn 170 169 171 25 (set (reg:SF 8 st)
        (call (mem:QI (symbol_ref:SI ("updateMin") [flags 0x303] <function_decl 0x7b0e80 updateMin>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 171 170 172 25 (set (reg:SF 74 [ D.8718 ])
        (reg:SF 8 st)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 8 st)
        (nil)))

(insn 172 171 174 25 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 74 [ D.8718 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 74 [ D.8718 ])
        (nil)))

(jump_insn 174 172 175 25 (set (pc)
        (label_ref 250)) 517 {jump} (nil)
    (nil))
;; End of basic block 25, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 176)

;; Start of basic block 26, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 176 175 177 26 205 "" [1 uses])

(note 177 176 179 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 179 177 180 26 (set (reg/f:SI 122 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 180 179 181 26 (set (reg:SI 73 [ D.8719 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 122 [ P ])
                (const_int 32 [0x20])) [0 <variable>.otherData+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 122 [ P ])
        (nil)))

(insn 181 180 182 26 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])
        (reg:SI 73 [ D.8719 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ D.8719 ])
        (nil)))

(insn 182 181 183 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 183 182 185 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 250)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 26, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 27, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 185 183 186 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 186 185 187 27 (set (reg:SF 123 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 187 186 189 27 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 __x+0 S4 A32])
        (reg:SF 123 [ min ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 123 [ min ])
        (nil)))

(insn 189 187 190 27 (set (reg:SF 125 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 __x+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 190 189 191 27 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 125 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 __x+0 S4 A32]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 125 [ __x ])
        (nil)))

(insn 191 190 192 27 (set (reg:QI 124)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 192 191 193 27 (set (reg:QI 126)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 193 192 194 27 (parallel [
            (set (reg:QI 124)
                (ior:QI (reg:QI 124)
                    (reg:QI 126)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 126)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -20 [0xffffffffffffffec])) [0 __x+0 S4 A32])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -20 [0xffffffffffffffec])) [0 __x+0 S4 A32]))
                    (nil))))))

(insn 194 193 195 27 (parallel [
            (set (reg:SI 62 [ D.8733 ])
                (zero_extend:SI (reg:QI 124)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 124)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 195 194 197 27 (set (reg:SI 72 [ D.8720 ])
        (reg:SI 62 [ D.8733 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.8733 ])
        (nil)))

(insn 197 195 198 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 72 [ D.8720 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ D.8720 ])
        (nil)))

(jump_insn 198 197 200 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 206)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 27, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 28, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 200 198 201 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 201 200 202 28 (set (reg/f:SI 127 [ S ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 202 201 203 28 (set (reg:SF 128 [ <variable>.minOutput ])
        (mem/s/j:SF (plus:SI (reg/f:SI 127 [ S ])
                (const_int 172 [0xac])) [0 <variable>.minOutput+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 127 [ S ])
        (nil)))

(insn 203 202 204 28 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 128 [ <variable>.minOutput ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 128 [ <variable>.minOutput ])
        (nil)))

(jump_insn 204 203 205 28 (set (pc)
        (label_ref 214)) 517 {jump} (nil)
    (nil))
;; End of basic block 28, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 205 204 206)

;; Start of basic block 29, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 206 205 207 29 212 "" [1 uses])

(note 207 206 209 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 209 207 210 29 (set (reg/f:SI 129 [ S ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 210 209 211 29 (set (reg:SF 71 [ D.8721 ])
        (mem/s/j:SF (plus:SI (reg/f:SI 129 [ S ])
                (const_int 172 [0xac])) [0 <variable>.minOutput+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 129 [ S ])
        (nil)))

(insn 211 210 212 29 (set (reg:SF 130 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 212 211 213 29 (set (reg:SF 131)
        (plus:SF (reg:SF 130 [ min ])
            (reg:SF 71 [ D.8721 ]))) 565 {*fop_sf_comm_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 130 [ min ])
        (expr_list:REG_DEAD (reg:SF 71 [ D.8721 ])
            (nil))))

(insn 213 212 214 29 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 131)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 131)
        (nil)))
;; End of basic block 29, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 30, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 214 213 215 30 214 "" [1 uses])

(note 215 214 216 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 216 215 217 30 (set (reg:SF 132 [ max ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 217 216 219 30 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 __x+0 S4 A128])
        (reg:SF 132 [ max ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 132 [ max ])
        (nil)))

(insn 219 217 220 30 (set (reg:SF 134 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 __x+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 220 219 221 30 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 134 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 __x+0 S4 A128]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 134 [ __x ])
        (nil)))

(insn 221 220 222 30 (set (reg:QI 133)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 222 221 223 30 (set (reg:QI 135)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 223 222 224 30 (parallel [
            (set (reg:QI 133)
                (ior:QI (reg:QI 133)
                    (reg:QI 135)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 135)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 __x+0 S4 A128])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -16 [0xfffffffffffffff0])) [0 __x+0 S4 A128]))
                    (nil))))))

(insn 224 223 225 30 (parallel [
            (set (reg:SI 61 [ D.8736 ])
                (zero_extend:SI (reg:QI 133)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 133)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 225 224 227 30 (set (reg:SI 70 [ D.8722 ])
        (reg:SI 61 [ D.8736 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.8736 ])
        (nil)))

(insn 227 225 228 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ D.8722 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.8722 ])
        (nil)))

(jump_insn 228 227 230 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 30, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 31, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 230 228 231 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 231 230 232 31 (set (reg/f:SI 136 [ S ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 232 231 233 31 (set (reg:SF 137 [ <variable>.maxOutput ])
        (mem/s/j:SF (plus:SI (reg/f:SI 136 [ S ])
                (const_int 176 [0xb0])) [0 <variable>.maxOutput+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 136 [ S ])
        (nil)))

(insn 233 232 234 31 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 137 [ <variable>.maxOutput ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 137 [ <variable>.maxOutput ])
        (nil)))

(jump_insn 234 233 235 31 (set (pc)
        (label_ref 244)) 517 {jump} (nil)
    (nil))
;; End of basic block 31, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 235 234 236)

;; Start of basic block 32, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 236 235 237 32 215 "" [1 uses])

(note 237 236 239 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 239 237 240 32 (set (reg/f:SI 138 [ S ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 240 239 241 32 (set (reg:SF 69 [ D.8723 ])
        (mem/s/j:SF (plus:SI (reg/f:SI 138 [ S ])
                (const_int 176 [0xb0])) [0 <variable>.maxOutput+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 138 [ S ])
        (nil)))

(insn 241 240 242 32 (set (reg:SF 139 [ max ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 242 241 243 32 (set (reg:SF 140)
        (plus:SF (reg:SF 139 [ max ])
            (reg:SF 69 [ D.8723 ]))) 565 {*fop_sf_comm_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 139 [ max ])
        (expr_list:REG_DEAD (reg:SF 69 [ D.8723 ])
            (nil))))

(insn 243 242 244 32 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 140)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 140)
        (nil)))
;; End of basic block 32, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 33, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 244 243 245 33 217 "" [1 uses])

(note 245 244 247 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 247 245 248 33 (set (reg/f:SI 141 [ S ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 S+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 248 247 249 33 (set (reg:SF 142 [ <variable>.initOutput ])
        (mem/s/j:SF (plus:SI (reg/f:SI 141 [ S ])
                (const_int 180 [0xb4])) [0 <variable>.initOutput+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 141 [ S ])
        (nil)))

(insn 249 248 250 33 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (reg:SF 142 [ <variable>.initOutput ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 142 [ <variable>.initOutput ])
        (nil)))
;; End of basic block 33, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 34, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 250 249 251 34 200 "" [10 uses])

(note 251 250 253 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 253 251 254 34 (set (reg/f:SI 143 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 254 253 255 34 (set (reg:SI 144 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 143 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 143 [ P ])
        (nil)))

(insn 255 254 256 34 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])
        (reg:SI 144 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 144 [ <variable>.next ])
        (nil)))
;; End of basic block 34, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 35, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 256 255 257 35 198 "" [1 uses])

(note 257 256 258 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 258 257 259 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 P+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 259 258 371 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 35, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 371 259 261 35 NOTE_INSN_LOOP_END)

;; Start of basic block 36, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 261 371 262 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 262 261 263 36 (set (reg:SF 145 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 263 262 265 36 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 __x+0 S4 A32])
        (reg:SF 145 [ min ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 145 [ min ])
        (nil)))

(insn 265 263 266 36 (set (reg:SF 147 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 __x+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 266 265 267 36 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 147 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 __x+0 S4 A32]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 147 [ __x ])
        (nil)))

(insn 267 266 268 36 (set (reg:QI 146)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 268 267 269 36 (set (reg:QI 148)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 269 268 270 36 (parallel [
            (set (reg:QI 146)
                (ior:QI (reg:QI 146)
                    (reg:QI 148)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 148)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -12 [0xfffffffffffffff4])) [0 __x+0 S4 A32])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -12 [0xfffffffffffffff4])) [0 __x+0 S4 A32]))
                    (nil))))))

(insn 270 269 271 36 (parallel [
            (set (reg:SI 60 [ D.8739 ])
                (zero_extend:SI (reg:QI 146)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 146)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 271 270 273 36 (set (reg:SI 68 [ D.8725 ])
        (reg:SI 60 [ D.8739 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8739 ])
        (nil)))

(insn 273 271 274 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 68 [ D.8725 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.8725 ])
        (nil)))

(jump_insn 274 273 276 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 311)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 36, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 37, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 276 274 277 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 277 276 278 37 (set (reg:SF 149 [ max ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 278 277 280 37 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 __x+0 S4 A64])
        (reg:SF 149 [ max ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 149 [ max ])
        (nil)))

(insn 280 278 281 37 (set (reg:SF 151 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 __x+0 S4 A64])) 90 {*movsf_1} (nil)
    (nil))

(insn 281 280 282 37 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 151 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 __x+0 S4 A64]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 151 [ __x ])
        (nil)))

(insn 282 281 283 37 (set (reg:QI 150)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 283 282 284 37 (set (reg:QI 152)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 284 283 285 37 (parallel [
            (set (reg:QI 150)
                (ior:QI (reg:QI 150)
                    (reg:QI 152)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 152)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 __x+0 S4 A64])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 __x+0 S4 A64]))
                    (nil))))))

(insn 285 284 286 37 (parallel [
            (set (reg:SI 59 [ D.8742 ])
                (zero_extend:SI (reg:QI 150)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 150)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 286 285 288 37 (set (reg:SI 67 [ D.8726 ])
        (reg:SI 59 [ D.8742 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.8742 ])
        (nil)))

(insn 288 286 289 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 67 [ D.8726 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.8726 ])
        (nil)))

(jump_insn 289 288 291 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 311)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 37, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 38, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 291 289 292 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 292 291 293 38 (set (reg/f:SI 153 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 293 292 294 38 (set (reg:SI 66 [ D.8727 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 153 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 153 [ G ])
        (nil)))

(insn 294 293 295 38 (parallel [
            (set (reg:SI 65 [ D.8728 ])
                (and:SI (reg:SI 66 [ D.8727 ])
                    (const_int 5632 [0x1600])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 66 [ D.8727 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 295 294 296 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 65 [ D.8728 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.8728 ])
        (nil)))

(jump_insn 296 295 298 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 311)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 38, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 39, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 298 296 300 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 300 298 301 39 (set (reg/f:SI 154)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC35") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 301 300 302 39 (set (reg:SF 155)
        (mem/u/i:SF (reg/f:SI 154) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 154)
        (nil)))

(insn 302 301 304 39 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])
        (reg:SF 155)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 155)
        (nil)))

(insn 304 302 305 39 (set (reg/f:SI 156)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC36") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 305 304 306 39 (set (reg:SF 157)
        (mem/u/i:SF (reg/f:SI 156) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 156)
        (nil)))

(insn 306 305 308 39 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])
        (reg:SF 157)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 157)
        (nil)))

(insn 308 306 309 39 (set (reg/f:SI 158)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/u:SI ("*LC38") [flags 0x2])
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 309 308 310 39 (set (reg:SF 159)
        (mem/u/i:SF (reg/f:SI 158) [0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 158)
        (nil)))

(insn 310 309 311 39 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])
        (reg:SF 159)) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 159)
        (nil)))
;; End of basic block 39, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 40, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 311 310 312 40 219 "" [3 uses])

(note 312 311 314 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 314 312 315 40 (set (reg/f:SI 160 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 315 314 316 40 (set (reg:SF 161 [ min ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 min+0 S4 A128])) 90 {*movsf_1} (nil)
    (nil))

(insn 316 315 318 40 (set (mem/s/j:SF (plus:SI (reg/f:SI 160 [ G ])
                (const_int 172 [0xac])) [0 <variable>.minOutput+0 S4 A32])
        (reg:SF 161 [ min ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 161 [ min ])
        (expr_list:REG_DEAD (reg/f:SI 160 [ G ])
            (nil))))

(insn 318 316 319 40 (set (reg/f:SI 162 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 319 318 320 40 (set (reg:SF 163 [ max ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 max+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 320 319 322 40 (set (mem/s/j:SF (plus:SI (reg/f:SI 162 [ G ])
                (const_int 176 [0xb0])) [0 <variable>.maxOutput+0 S4 A32])
        (reg:SF 163 [ max ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 163 [ max ])
        (expr_list:REG_DEAD (reg/f:SI 162 [ G ])
            (nil))))

(insn 322 320 323 40 (set (reg/f:SI 164 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 323 322 324 40 (set (reg:SF 64 [ D.8729 ])
        (mem/s/j:SF (plus:SI (reg/f:SI 164 [ G ])
                (const_int 180 [0xb4])) [0 <variable>.initOutput+0 S4 A32])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 164 [ G ])
        (nil)))

(insn 324 323 326 40 (set (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])
        (reg:SF 64 [ D.8729 ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 64 [ D.8729 ])
        (nil)))

(insn 326 324 327 40 (set (reg:SF 166 [ __x ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])) 90 {*movsf_1} (nil)
    (nil))

(insn 327 326 328 40 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 166 [ __x ])
            (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32]))) 32 {*cmpfp_iu_sse} (nil)
    (expr_list:REG_DEAD (reg:SF 166 [ __x ])
        (nil)))

(insn 328 327 329 40 (set (reg:QI 165)
        (ltgt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (nil))

(insn 329 328 330 40 (set (reg:QI 167)
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0x0]))) 499 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))

(insn 330 329 331 40 (parallel [
            (set (reg:QI 165)
                (ior:QI (reg:QI 165)
                    (reg:QI 167)))
            (clobber (reg:CC 17 flags))
        ]) 329 {*iorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 167)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (ne:QI (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32])
                        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 __x+0 S4 A32]))
                    (nil))))))

(insn 331 330 332 40 (parallel [
            (set (reg:SI 58 [ D.8745 ])
                (zero_extend:SI (reg:QI 165)))
            (clobber (reg:CC 17 flags))
        ]) 109 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 165)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 332 331 334 40 (set (reg:SI 63 [ D.8730 ])
        (reg:SI 58 [ D.8745 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8745 ])
        (nil)))

(insn 334 332 335 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 63 [ D.8730 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8730 ])
        (nil)))

(jump_insn 335 334 337 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 348)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 40, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 41, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 337 335 338 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 338 337 339 41 (set (reg/f:SI 168 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 339 338 340 41 (set (reg:SF 169 [ init ])
        (mem/i:SF (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 init+0 S4 A64])) 90 {*movsf_1} (nil)
    (nil))

(insn 340 339 343 41 (set (mem/s/j:SF (plus:SI (reg/f:SI 168 [ G ])
                (const_int 180 [0xb4])) [0 <variable>.initOutput+0 S4 A32])
        (reg:SF 169 [ init ])) 90 {*movsf_1} (nil)
    (expr_list:REG_DEAD (reg:SF 169 [ init ])
        (expr_list:REG_DEAD (reg/f:SI 168 [ G ])
            (nil))))
;; End of basic block 41, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 343 340 348 NOTE_INSN_FUNCTION_END)

;; Start of basic block 42, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 348 343 369 42 225 "" [1 uses])

(note 369 348 0 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 42, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function cleanupGroupType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 94 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 110 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 111 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 113 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 114 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 115 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 116 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 117 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 118 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 119 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 120 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 121 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 122 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 123 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 124 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 125 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 126 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 127 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 128 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 129 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 131 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 132 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 133 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 134 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 135 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 136 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 137 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 138 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 139 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 140 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 141 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 142 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 143 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 144 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 145 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 146 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 147 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 148 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 149 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 150 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 151 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 152 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 153 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 154 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 155 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 156 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 157 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 158 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 159 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 160 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 161 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 162 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 163 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 164 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 165 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 166 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 167 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 168 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 169 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 170 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 171 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 172 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 173 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 174 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 175 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 176 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 177 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 178 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 179 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 180 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 181 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 182 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 183 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 184 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000
  Register 185 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 186 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 187 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 188 costs: AREG:0 DREG:0 CREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 189 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:6000
  Register 190 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 191 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 192 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 193 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 194 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 195 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 196 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 197 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 198 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 199 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 200 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 201 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 202 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 203 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 204 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 205 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 206 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 207 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 208 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 209 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 210 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 211 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 212 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 213 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 214 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 215 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 216 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 217 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 218 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 219 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 220 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 221 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 222 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 223 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 224 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 225 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 226 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 227 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 228 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 229 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 230 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 231 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 232 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 233 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 234 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 235 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 236 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 237 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 238 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 239 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 240 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 241 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 242 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 243 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 244 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 245 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 246 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 247 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 248 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 249 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 250 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 251 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 252 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 253 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 254 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 255 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 256 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 257 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 258 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 259 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 260 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 261 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 262 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 263 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 264 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 265 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 266 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 267 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref Q_REGS, else GENERAL_REGS
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref Q_REGS, else GENERAL_REGS
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref Q_REGS, else GENERAL_REGS
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref Q_REGS, else GENERAL_REGS
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref Q_REGS, else GENERAL_REGS
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref GENERAL_REGS or none
  Register 98 pref GENERAL_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref Q_REGS, else GENERAL_REGS
  Register 101 pref GENERAL_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref Q_REGS, else GENERAL_REGS
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref GENERAL_REGS or none
  Register 111 pref GENERAL_REGS or none
  Register 112 pref Q_REGS, else GENERAL_REGS
  Register 113 pref GENERAL_REGS or none
  Register 114 pref GENERAL_REGS or none
  Register 115 pref GENERAL_REGS or none
  Register 116 pref GENERAL_REGS or none
  Register 117 pref GENERAL_REGS or none
  Register 118 pref Q_REGS, else GENERAL_REGS
  Register 119 pref GENERAL_REGS or none
  Register 120 pref GENERAL_REGS or none
  Register 121 pref GENERAL_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 124 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref GENERAL_REGS or none
  Register 128 pref Q_REGS, else GENERAL_REGS
  Register 129 pref GENERAL_REGS or none
  Register 130 pref GENERAL_REGS or none
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 134 pref Q_REGS, else GENERAL_REGS
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref GENERAL_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref GENERAL_REGS or none
  Register 140 pref Q_REGS, else GENERAL_REGS
  Register 141 pref GENERAL_REGS or none
  Register 142 pref GENERAL_REGS or none
  Register 143 pref GENERAL_REGS or none
  Register 144 pref GENERAL_REGS or none
  Register 145 pref GENERAL_REGS or none
  Register 146 pref GENERAL_REGS or none
  Register 147 pref GENERAL_REGS or none
  Register 148 pref GENERAL_REGS or none
  Register 149 pref GENERAL_REGS or none
  Register 150 pref GENERAL_REGS or none
  Register 151 pref GENERAL_REGS or none
  Register 152 pref GENERAL_REGS or none
  Register 153 pref GENERAL_REGS or none
  Register 154 pref GENERAL_REGS or none
  Register 155 pref GENERAL_REGS or none
  Register 156 pref GENERAL_REGS or none
  Register 157 pref GENERAL_REGS or none
  Register 158 pref GENERAL_REGS or none
  Register 159 pref Q_REGS, else GENERAL_REGS
  Register 160 pref GENERAL_REGS or none
  Register 161 pref GENERAL_REGS or none
  Register 162 pref GENERAL_REGS or none
  Register 163 pref GENERAL_REGS or none
  Register 164 pref GENERAL_REGS or none
  Register 165 pref GENERAL_REGS or none
  Register 166 pref GENERAL_REGS or none
  Register 167 pref GENERAL_REGS or none
  Register 168 pref GENERAL_REGS or none
  Register 169 pref GENERAL_REGS or none
  Register 170 pref Q_REGS, else GENERAL_REGS
  Register 171 pref GENERAL_REGS or none
  Register 172 pref GENERAL_REGS or none
  Register 173 pref GENERAL_REGS or none
  Register 174 pref GENERAL_REGS or none
  Register 175 pref GENERAL_REGS or none
  Register 176 pref GENERAL_REGS or none
  Register 177 pref GENERAL_REGS or none
  Register 178 pref GENERAL_REGS or none
  Register 179 pref GENERAL_REGS or none
  Register 180 pref GENERAL_REGS or none
  Register 181 pref GENERAL_REGS or none
  Register 182 pref GENERAL_REGS or none
  Register 183 pref GENERAL_REGS or none
  Register 184 pref GENERAL_REGS or none
  Register 185 pref GENERAL_REGS or none
  Register 186 pref GENERAL_REGS or none
  Register 187 pref GENERAL_REGS or none
  Register 188 pref Q_REGS, else GENERAL_REGS
  Register 189 pref GENERAL_REGS or none
  Register 190 pref GENERAL_REGS or none
  Register 191 pref GENERAL_REGS or none
  Register 192 pref GENERAL_REGS or none
  Register 193 pref GENERAL_REGS or none
  Register 194 pref GENERAL_REGS or none
  Register 195 pref GENERAL_REGS or none
  Register 196 pref GENERAL_REGS or none
  Register 197 pref GENERAL_REGS or none
  Register 198 pref GENERAL_REGS or none
  Register 199 pref GENERAL_REGS or none
  Register 200 pref GENERAL_REGS or none
  Register 201 pref GENERAL_REGS or none
  Register 202 pref GENERAL_REGS or none
  Register 203 pref GENERAL_REGS or none
  Register 204 pref GENERAL_REGS or none
  Register 205 pref GENERAL_REGS or none
  Register 206 pref GENERAL_REGS or none
  Register 207 pref GENERAL_REGS or none
  Register 208 pref GENERAL_REGS or none
  Register 209 pref GENERAL_REGS or none
  Register 210 pref GENERAL_REGS or none
  Register 211 pref GENERAL_REGS or none
  Register 212 pref GENERAL_REGS or none
  Register 213 pref GENERAL_REGS or none
  Register 214 pref GENERAL_REGS or none
  Register 215 pref GENERAL_REGS or none
  Register 216 pref GENERAL_REGS or none
  Register 217 pref GENERAL_REGS or none
  Register 218 pref GENERAL_REGS or none
  Register 219 pref GENERAL_REGS or none
  Register 220 pref GENERAL_REGS or none
  Register 221 pref GENERAL_REGS or none
  Register 222 pref GENERAL_REGS or none
  Register 223 pref GENERAL_REGS or none
  Register 224 pref GENERAL_REGS or none
  Register 225 pref GENERAL_REGS or none
  Register 226 pref GENERAL_REGS or none
  Register 227 pref GENERAL_REGS or none
  Register 228 pref GENERAL_REGS or none
  Register 229 pref GENERAL_REGS or none
  Register 230 pref GENERAL_REGS or none
  Register 231 pref GENERAL_REGS or none
  Register 232 pref GENERAL_REGS or none
  Register 233 pref GENERAL_REGS or none
  Register 234 pref GENERAL_REGS or none
  Register 235 pref GENERAL_REGS or none
  Register 236 pref GENERAL_REGS or none
  Register 237 pref GENERAL_REGS or none
  Register 238 pref GENERAL_REGS or none
  Register 239 pref GENERAL_REGS or none
  Register 240 pref GENERAL_REGS or none
  Register 241 pref GENERAL_REGS or none
  Register 242 pref GENERAL_REGS or none
  Register 243 pref GENERAL_REGS or none
  Register 244 pref GENERAL_REGS or none
  Register 245 pref GENERAL_REGS or none
  Register 246 pref GENERAL_REGS or none
  Register 247 pref GENERAL_REGS or none
  Register 248 pref GENERAL_REGS or none
  Register 249 pref GENERAL_REGS or none
  Register 250 pref GENERAL_REGS or none
  Register 251 pref GENERAL_REGS or none
  Register 252 pref GENERAL_REGS or none
  Register 253 pref GENERAL_REGS or none
  Register 254 pref GENERAL_REGS or none
  Register 255 pref GENERAL_REGS or none
  Register 256 pref GENERAL_REGS or none
  Register 257 pref GENERAL_REGS or none
  Register 258 pref GENERAL_REGS or none
  Register 259 pref GENERAL_REGS or none
  Register 260 pref GENERAL_REGS or none
  Register 261 pref GENERAL_REGS or none
  Register 262 pref GENERAL_REGS or none
  Register 263 pref GENERAL_REGS or none
  Register 264 pref GENERAL_REGS or none
  Register 265 pref GENERAL_REGS or none
  Register 266 pref GENERAL_REGS or none
  Register 267 pref GENERAL_REGS or none
268 registers.

Register 58 used 2 times across 3 insns in block 59; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 59; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 58; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 58; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 57; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 63 used 2 times across 2 insns in block 57; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 57; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 2 insns in block 57; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 57; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 56; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 68 used 2 times across 2 insns in block 56; set 1 time; GENERAL_REGS or none.

Register 69 used 2 times across 2 insns in block 56; set 1 time; GENERAL_REGS or none.

Register 70 used 2 times across 2 insns in block 56; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 56; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 56; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 53; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 74 used 2 times across 2 insns in block 53; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 53; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 51; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 77 used 2 times across 2 insns in block 51; set 1 time; GENERAL_REGS or none.

Register 78 used 2 times across 2 insns in block 51; set 1 time; GENERAL_REGS or none.

Register 79 used 2 times across 2 insns in block 51; set 1 time; GENERAL_REGS or none.

Register 80 used 2 times across 2 insns in block 51; set 1 time; GENERAL_REGS or none.

Register 81 used 2 times across 2 insns in block 50; set 1 time; GENERAL_REGS or none.

Register 82 used 2 times across 2 insns in block 50; set 1 time; GENERAL_REGS or none.

Register 83 used 2 times across 2 insns in block 50; set 1 time; GENERAL_REGS or none.

Register 84 used 2 times across 2 insns in block 50; set 1 time; GENERAL_REGS or none.

Register 85 used 2 times across 2 insns in block 49; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 86 used 2 times across 2 insns in block 49; set 1 time; GENERAL_REGS or none.

Register 87 used 2 times across 2 insns in block 49; set 1 time; GENERAL_REGS or none.

Register 88 used 2 times across 2 insns in block 49; set 1 time; GENERAL_REGS or none.

Register 89 used 2 times across 2 insns in block 49; set 1 time; GENERAL_REGS or none.

Register 90 used 2 times across 2 insns in block 48; set 1 time; GENERAL_REGS or none.

Register 91 used 2 times across 2 insns in block 48; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 2 insns in block 46; set 1 time; GENERAL_REGS or none.

Register 93 used 2 times across 2 insns in block 46; set 1 time; GENERAL_REGS or none.

Register 94 used 2 times across 2 insns in block 45; set 1 time; GENERAL_REGS or none.

Register 95 used 2 times across 2 insns in block 45; set 1 time; GENERAL_REGS or none.

Register 96 used 2 times across 2 insns in block 44; set 1 time; GENERAL_REGS or none.

Register 97 used 2 times across 2 insns in block 44; set 1 time; GENERAL_REGS or none.

Register 98 used 2 times across 2 insns in block 44; set 1 time; GENERAL_REGS or none.

Register 99 used 2 times across 2 insns in block 44; set 1 time; GENERAL_REGS or none.

Register 100 used 2 times across 2 insns in block 43; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 101 used 2 times across 2 insns in block 43; set 1 time; 1 bytes; GENERAL_REGS or none.

Register 102 used 2 times across 2 insns in block 43; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 2 insns in block 43; set 1 time; GENERAL_REGS or none.

Register 104 used 2 times across 2 insns in block 43; set 1 time; GENERAL_REGS or none.

Register 105 used 2 times across 2 insns in block 43; set 1 time; GENERAL_REGS or none.

Register 106 used 2 times across 2 insns in block 41; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 107 used 2 times across 2 insns in block 41; set 1 time; GENERAL_REGS or none.

Register 108 used 2 times across 2 insns in block 41; set 1 time; GENERAL_REGS or none.

Register 109 used 2 times across 2 insns in block 41; set 1 time; GENERAL_REGS or none.

Register 110 used 2 times across 2 insns in block 41; set 1 time; GENERAL_REGS or none.

Register 111 used 2 times across 2 insns in block 41; set 1 time; GENERAL_REGS or none.

Register 112 used 2 times across 2 insns in block 38; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 113 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 114 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 115 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 116 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 117 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 118 used 2 times across 2 insns in block 36; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 119 used 2 times across 2 insns in block 36; set 1 time; 1 bytes; GENERAL_REGS or none.

Register 120 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 121 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 122 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 123 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 124 used 2 times across 2 insns in block 33; set 1 time; GENERAL_REGS or none.

Register 125 used 2 times across 2 insns in block 33; set 1 time; GENERAL_REGS or none.

Register 126 used 2 times across 2 insns in block 33; set 1 time; GENERAL_REGS or none.

Register 127 used 2 times across 2 insns in block 33; set 1 time; GENERAL_REGS or none.

Register 128 used 2 times across 2 insns in block 32; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 129 used 2 times across 2 insns in block 32; set 1 time; 1 bytes; GENERAL_REGS or none.

Register 130 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 131 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 132 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 133 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 134 used 2 times across 2 insns in block 29; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 135 used 2 times across 2 insns in block 29; set 1 time; 1 bytes; GENERAL_REGS or none.

Register 136 used 2 times across 2 insns in block 29; set 1 time; GENERAL_REGS or none.

Register 137 used 2 times across 2 insns in block 29; set 1 time; GENERAL_REGS or none.

Register 138 used 2 times across 2 insns in block 27; set 1 time; GENERAL_REGS or none.

Register 139 used 2 times across 2 insns in block 27; set 1 time; GENERAL_REGS or none.

Register 140 used 2 times across 2 insns in block 24; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 141 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 142 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 143 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 144 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 145 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 146 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 147 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 148 used 2 times across 3 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 149 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 150 used 2 times across 4 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 151 used 2 times across 3 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 152 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 153 used 2 times across 4 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 154 used 2 times across 3 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 155 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 156 used 2 times across 4 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 157 used 2 times across 3 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 158 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 159 used 2 times across 2 insns in block 11; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 160 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 161 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 162 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 163 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 164 used 2 times across 3 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 165 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 166 used 2 times across 3 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 167 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 168 used 2 times across 3 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 169 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none.

Register 170 used 2 times across 2 insns in block 8; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 171 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 172 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 173 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 174 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 175 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 176 used 2 times across 3 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 177 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 178 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 179 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 180 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 181 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 182 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 183 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 184 used 3 times across 4 insns; set 2 times; GENERAL_REGS or none.

Register 185 used 2 times across 3 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 186 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 187 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 188 used 2 times across 2 insns in block 0; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 189 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 190 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 191 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 192 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 193 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 194 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 195 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 196 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 197 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 198 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 199 used 4 times across 4 insns in block 8; set 2 times; GENERAL_REGS or none; pointer.

Register 200 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 201 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 202 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 203 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 204 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 205 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 206 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 207 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 208 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 209 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 210 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 211 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 212 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 213 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 214 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 215 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 216 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 217 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 218 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 219 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none.

Register 220 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 221 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 222 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 223 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 224 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 225 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 226 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 227 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none.

Register 228 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 229 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 230 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 231 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 232 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 233 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none; pointer.

Register 234 used 4 times across 4 insns in block 24; set 2 times; GENERAL_REGS or none; pointer.

Register 235 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 236 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none.

Register 237 used 2 times across 2 insns in block 27; set 1 time; GENERAL_REGS or none; pointer.

Register 238 used 2 times across 2 insns in block 29; set 1 time; GENERAL_REGS or none; pointer.

Register 239 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none.

Register 240 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none; pointer.

Register 241 used 2 times across 2 insns in block 33; set 1 time; GENERAL_REGS or none; pointer.

Register 242 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none.

Register 243 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none; pointer.

Register 244 used 2 times across 2 insns in block 37; set 1 time; GENERAL_REGS or none.

Register 245 used 4 times across 4 insns in block 38; set 2 times; GENERAL_REGS or none; pointer.

Register 246 used 2 times across 2 insns in block 39; set 1 time; GENERAL_REGS or none.

Register 247 used 2 times across 2 insns in block 40; set 1 time; GENERAL_REGS or none.

Register 248 used 4 times across 4 insns in block 41; set 2 times; GENERAL_REGS or none; pointer.

Register 249 used 2 times across 2 insns in block 43; set 1 time; GENERAL_REGS or none; pointer.

Register 250 used 2 times across 2 insns in block 44; set 1 time; GENERAL_REGS or none; pointer.

Register 251 used 2 times across 2 insns in block 45; set 1 time; GENERAL_REGS or none; pointer.

Register 252 used 2 times across 2 insns in block 46; set 1 time; GENERAL_REGS or none; pointer.

Register 253 used 2 times across 2 insns in block 47; set 1 time; GENERAL_REGS or none.

Register 254 used 2 times across 2 insns in block 48; set 1 time; GENERAL_REGS or none.

Register 255 used 2 times across 2 insns in block 48; set 1 time; GENERAL_REGS or none; pointer.

Register 256 used 2 times across 2 insns in block 49; set 1 time; GENERAL_REGS or none; pointer.

Register 257 used 2 times across 2 insns in block 50; set 1 time; GENERAL_REGS or none; pointer.

Register 258 used 2 times across 2 insns in block 51; set 1 time; GENERAL_REGS or none; pointer.

Register 259 used 2 times across 2 insns in block 52; set 1 time; GENERAL_REGS or none.

Register 260 used 2 times across 2 insns in block 53; set 1 time; GENERAL_REGS or none; pointer.

Register 261 used 2 times across 2 insns in block 54; set 1 time; GENERAL_REGS or none.

Register 262 used 2 times across 2 insns in block 55; set 1 time; GENERAL_REGS or none.

Register 263 used 4 times across 4 insns in block 56; set 2 times; GENERAL_REGS or none; pointer.

Register 264 used 2 times across 2 insns in block 57; set 1 time; GENERAL_REGS or none; pointer.

Register 265 used 2 times across 2 insns in block 58; set 1 time; GENERAL_REGS or none; pointer.

Register 266 used 2 times across 2 insns in block 59; set 1 time; GENERAL_REGS or none; pointer.

Register 267 used 2 times across 2 insns in block 59; set 1 time; GENERAL_REGS or none; pointer.

61 basic blocks, 97 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  5 3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  5 4 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 184

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  2 3
Successors:  6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 184

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  4 5 (fallthru)
Successors:  7 (fallthru) 8
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 184
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  8 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  6 7 (fallthru)
Successors:  9 (fallthru) 10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 0, count 0, freq 0.
Predecessors:  8 (fallthru)
Successors:  11
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  8
Successors:  11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  9 10 (fallthru)
Successors:  12 (fallthru) 13
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  11 (fallthru)
Successors:  13 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  11 12 (fallthru)
Successors:  15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 15, loop_depth 1, count 0, freq 0.
Predecessors:  15
Successors:  15 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 14, next 16, loop_depth 1, count 0, freq 0.
Predecessors:  13 14 (fallthru)
Successors:  14 16 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 0, count 0, freq 0.
Predecessors:  15 (fallthru)
Successors:  18
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 17 prev 16, next 18, loop_depth 1, count 0, freq 0.
Predecessors:  18
Successors:  18 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 18 prev 17, next 19, loop_depth 1, count 0, freq 0.
Predecessors:  16 17 (fallthru)
Successors:  17 19 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 19 prev 18, next 20, loop_depth 0, count 0, freq 0.
Predecessors:  18 (fallthru)
Successors:  21
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 20 prev 19, next 21, loop_depth 1, count 0, freq 0.
Predecessors:  21
Successors:  21 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 21 prev 20, next 22, loop_depth 1, count 0, freq 0.
Predecessors:  19 20 (fallthru)
Successors:  20 22 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 22 prev 21, next 23, loop_depth 0, count 0, freq 0.
Predecessors:  21 (fallthru)
Successors:  23 (fallthru) 27
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 23 prev 22, next 24, loop_depth 0, count 0, freq 0.
Predecessors:  22 (fallthru)
Successors:  24 (fallthru) 27
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 24 prev 23, next 25, loop_depth 0, count 0, freq 0.
Predecessors:  23 (fallthru)
Successors:  25 (fallthru) 26
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 25 prev 24, next 26, loop_depth 0, count 0, freq 0.
Predecessors:  24 (fallthru)
Successors:  27
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 26 prev 25, next 27, loop_depth 0, count 0, freq 0.
Predecessors:  24
Successors:  27 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 27 prev 26, next 28, loop_depth 0, count 0, freq 0.
Predecessors:  22 23 25 26 (fallthru)
Successors:  28 (fallthru) 41
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 28 prev 27, next 29, loop_depth 0, count 0, freq 0.
Predecessors:  27 (fallthru)
Successors:  31 29 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 29 prev 28, next 30, loop_depth 0, count 0, freq 0.
Predecessors:  28 (fallthru)
Successors:  31 30 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 30 prev 29, next 31, loop_depth 0, count 0, freq 0.
Predecessors:  29 (fallthru)
Successors:  41
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 31 prev 30, next 32, loop_depth 0, count 0, freq 0.
Predecessors:  28 29
Successors:  35 32 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 32 prev 31, next 33, loop_depth 0, count 0, freq 0.
Predecessors:  31 (fallthru)
Successors:  35 33 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 33 prev 32, next 34, loop_depth 0, count 0, freq 0.
Predecessors:  32 (fallthru)
Successors:  35 34 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 34 prev 33, next 35, loop_depth 0, count 0, freq 0.
Predecessors:  33 (fallthru)
Successors:  41
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 35 prev 34, next 36, loop_depth 0, count 0, freq 0.
Predecessors:  31 32 33
Successors:  38 36 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 36 prev 35, next 37, loop_depth 0, count 0, freq 0.
Predecessors:  35 (fallthru)
Successors:  38 37 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 37 prev 36, next 38, loop_depth 0, count 0, freq 0.
Predecessors:  36 (fallthru)
Successors:  41
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 38 prev 37, next 39, loop_depth 0, count 0, freq 0.
Predecessors:  35 36
Successors:  39 (fallthru) 40
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 39 prev 38, next 40, loop_depth 0, count 0, freq 0.
Predecessors:  38 (fallthru)
Successors:  41
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 40 prev 39, next 41, loop_depth 0, count 0, freq 0.
Predecessors:  38
Successors:  41 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 41 prev 40, next 42, loop_depth 0, count 0, freq 0.
Predecessors:  27 30 34 37 39 40 (fallthru)
Successors:  42 (fallthru) 48
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 42 prev 41, next 43, loop_depth 0, count 0, freq 0.
Predecessors:  41 (fallthru)
Successors:  45 43 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 43 prev 42, next 44, loop_depth 0, count 0, freq 0.
Predecessors:  42 (fallthru)
Successors:  48 44 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 44 prev 43, next 45, loop_depth 0, count 0, freq 0.
Predecessors:  43 (fallthru)
Successors:  45 (fallthru) 48
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 45 prev 44, next 46, loop_depth 0, count 0, freq 0.
Predecessors:  42 44 (fallthru)
Successors:  46 (fallthru) 48
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 46 prev 45, next 47, loop_depth 0, count 0, freq 0.
Predecessors:  45 (fallthru)
Successors:  47 (fallthru) 48
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 47 prev 46, next 48, loop_depth 0, count 0, freq 0.
Predecessors:  46 (fallthru)
Successors:  48 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 48 prev 47, next 49, loop_depth 0, count 0, freq 0.
Predecessors:  41 43 44 45 46 47 (fallthru)
Successors:  49 (fallthru) 56
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 49 prev 48, next 50, loop_depth 0, count 0, freq 0.
Predecessors:  48 (fallthru)
Successors:  50 (fallthru) 56
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 50 prev 49, next 51, loop_depth 0, count 0, freq 0.
Predecessors:  49 (fallthru)
Successors:  51 (fallthru) 56
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 51 prev 50, next 52, loop_depth 0, count 0, freq 0.
Predecessors:  50 (fallthru)
Successors:  52 (fallthru) 53
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 52 prev 51, next 53, loop_depth 0, count 0, freq 0.
Predecessors:  51 (fallthru)
Successors:  56
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 53 prev 52, next 54, loop_depth 0, count 0, freq 0.
Predecessors:  51
Successors:  54 (fallthru) 55
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 54 prev 53, next 55, loop_depth 0, count 0, freq 0.
Predecessors:  53 (fallthru)
Successors:  56
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 55 prev 54, next 56, loop_depth 0, count 0, freq 0.
Predecessors:  53
Successors:  56 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 56 prev 55, next 57, loop_depth 0, count 0, freq 0.
Predecessors:  48 49 50 52 54 55 (fallthru)
Successors:  57 (fallthru) 60
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 57 prev 56, next 58, loop_depth 0, count 0, freq 0.
Predecessors:  56 (fallthru)
Successors:  58 (fallthru) 60
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 58 prev 57, next 59, loop_depth 0, count 0, freq 0.
Predecessors:  57 (fallthru)
Successors:  59 (fallthru) 60
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 59 prev 58, next 60, loop_depth 0, count 0, freq 0.
Predecessors:  58 (fallthru)
Successors:  60 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 60 prev 59, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  59 (fallthru) 56 57 58
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 1.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 0.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 0.
;; Register 107 in 0.
;; Register 108 in 0.
;; Register 109 in 0.
;; Register 110 in 0.
;; Register 111 in 0.
;; Register 112 in 0.
;; Register 113 in 0.
;; Register 114 in 0.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 0.
;; Register 120 in 0.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 0.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 0.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 0.
;; Register 135 in 0.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 0.
;; Register 140 in 0.
;; Register 141 in 0.
;; Register 142 in 0.
;; Register 143 in 0.
;; Register 144 in 0.
;; Register 145 in 0.
;; Register 146 in 0.
;; Register 147 in 0.
;; Register 148 in 1.
;; Register 149 in 0.
;; Register 150 in 1.
;; Register 151 in 1.
;; Register 152 in 0.
;; Register 153 in 1.
;; Register 154 in 1.
;; Register 155 in 0.
;; Register 156 in 1.
;; Register 157 in 1.
;; Register 158 in 0.
;; Register 159 in 0.
;; Register 160 in 0.
;; Register 161 in 0.
;; Register 162 in 0.
;; Register 163 in 0.
;; Register 164 in 1.
;; Register 165 in 0.
;; Register 166 in 1.
;; Register 167 in 0.
;; Register 168 in 1.
;; Register 169 in 0.
;; Register 170 in 0.
;; Register 171 in 0.
;; Register 172 in 0.
;; Register 173 in 0.
;; Register 174 in 0.
;; Register 175 in 0.
;; Register 176 in 1.
;; Register 177 in 0.
;; Register 178 in 0.
;; Register 179 in 0.
;; Register 180 in 0.
;; Register 181 in 0.
;; Register 182 in 0.
;; Register 183 in 0.
;; Register 185 in 1.
;; Register 186 in 0.
;; Register 187 in 0.
;; Register 188 in 0.
;; Register 189 in 0.
;; Register 190 in 0.
;; Register 191 in 0.
;; Register 192 in 0.
;; Register 193 in 0.
;; Register 194 in 0.
;; Register 195 in 0.
;; Register 196 in 0.
;; Register 197 in 0.
;; Register 198 in 0.
;; Register 199 in 0.
;; Register 200 in 0.
;; Register 201 in 0.
;; Register 202 in 0.
;; Register 203 in 0.
;; Register 204 in 0.
;; Register 205 in 0.
;; Register 206 in 0.
;; Register 207 in 0.
;; Register 208 in 0.
;; Register 209 in 0.
;; Register 210 in 0.
;; Register 211 in 0.
;; Register 212 in 0.
;; Register 213 in 0.
;; Register 214 in 0.
;; Register 215 in 0.
;; Register 216 in 0.
;; Register 217 in 0.
;; Register 218 in 0.
;; Register 219 in 0.
;; Register 220 in 0.
;; Register 221 in 0.
;; Register 222 in 0.
;; Register 223 in 0.
;; Register 224 in 0.
;; Register 225 in 0.
;; Register 226 in 0.
;; Register 227 in 0.
;; Register 228 in 0.
;; Register 229 in 0.
;; Register 230 in 0.
;; Register 231 in 0.
;; Register 232 in 0.
;; Register 233 in 0.
;; Register 234 in 0.
;; Register 235 in 0.
;; Register 236 in 0.
;; Register 237 in 0.
;; Register 238 in 0.
;; Register 239 in 0.
;; Register 240 in 0.
;; Register 241 in 0.
;; Register 242 in 0.
;; Register 243 in 0.
;; Register 244 in 0.
;; Register 245 in 0.
;; Register 246 in 0.
;; Register 247 in 0.
;; Register 248 in 0.
;; Register 249 in 0.
;; Register 250 in 0.
;; Register 251 in 0.
;; Register 252 in 0.
;; Register 253 in 0.
;; Register 254 in 0.
;; Register 255 in 0.
;; Register 256 in 0.
;; Register 257 in 0.
;; Register 258 in 0.
;; Register 259 in 0.
;; Register 260 in 0.
;; Register 261 in 0.
;; Register 262 in 0.
;; Register 263 in 0.
;; Register 264 in 0.
;; Register 265 in 0.
;; Register 266 in 0.
;; Register 267 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 191 [ V ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 V+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 11 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])
        (reg:SI 191 [ V ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 191 [ V ])
        (nil)))

(insn 11 9 12 0 (set (reg/f:SI 192 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 11 13 0 (set (reg:SI 190 [ D.8783 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 192 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 192 [ G ])
        (nil)))

(insn 13 12 14 0 (parallel [
            (set (reg:SI 189 [ D.8784 ])
                (and:SI (reg:SI 190 [ D.8783 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 190 [ D.8783 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 14 13 15 0 (set (reg:QI 188 [ D.8785 ])
        (subreg:QI (reg:SI 189 [ D.8784 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 189 [ D.8784 ])
        (nil)))

(insn 15 14 16 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 188 [ D.8785 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 188 [ D.8785 ])
        (nil)))

(jump_insn 16 15 18 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 18 16 20 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 1 (set (reg/f:SI 193 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 1 (set (reg:SI 187 [ D.8786 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 193 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 193 [ G ])
        (nil)))

(insn 22 21 23 1 (parallel [
            (set (reg:SI 186 [ D.8787 ])
                (and:SI (reg:SI 187 [ D.8786 ])
                    (const_int -258064 [0xfffffffffffc0ff0])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 187 [ D.8786 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 23 22 24 1 (parallel [
            (set (reg:SI 185 [ D.8788 ])
                (ior:SI (reg:SI 186 [ D.8787 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 186 [ D.8787 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 24 23 25 1 (set (reg/f:SI 194 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 25 24 26 1 (set (mem/s/j:SI (plus:SI (reg/f:SI 194 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 185 [ D.8788 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 185 [ D.8788 ])
        (expr_list:REG_DEAD (reg/f:SI 194 [ G ])
            (nil))))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 26 25 27 2 228 "" [1 uses])

(note 27 26 29 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 29 27 30 2 (set (reg/f:SI 195 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 30 29 31 2 (set (reg:SI 183 [ D.8792 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 195 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 195 [ G ])
        (nil)))

(insn 31 30 32 2 (parallel [
            (set (reg:SI 182 [ D.8793 ])
                (and:SI (reg:SI 183 [ D.8792 ])
                    (const_int 11 [0xb])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 183 [ D.8792 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 182 [ D.8793 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 182 [ D.8793 ])
        (nil)))

(jump_insn 33 32 35 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 35 33 36 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 3 (set (reg/f:SI 196 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 37 36 38 3 (set (reg:SI 181 [ D.8794 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 196 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 196 [ G ])
        (nil)))

(insn 38 37 39 3 (parallel [
            (set (reg:SI 180 [ D.8795 ])
                (lshiftrt:SI (reg:SI 181 [ D.8794 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 181 [ D.8794 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 39 38 40 3 (set (reg:SI 179 [ D.8796 ])
        (reg:SI 180 [ D.8795 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 180 [ D.8795 ])
        (nil)))

(insn 40 39 41 3 (parallel [
            (set (reg:SI 178 [ D.8797 ])
                (and:SI (reg:SI 179 [ D.8796 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 179 [ D.8796 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 41 40 42 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 178 [ D.8797 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 178 [ D.8797 ])
        (nil)))

(jump_insn 42 41 44 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 44 42 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 4 (set (reg:SI 184 [ iftmp.16 ])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 46 45 47 4 (set (pc)
        (label_ref 51)) 517 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 184

(barrier 47 46 48)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 48 47 49 5 230 "" [2 uses])

(note 49 48 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 5 (set (reg:SI 184 [ iftmp.16 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 184

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 184
(code_label 51 50 52 6 233 "" [1 uses])

(note 52 51 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 55 6 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
        (reg:SI 184 [ iftmp.16 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 184 [ iftmp.16 ])
        (nil)))

(insn 55 53 56 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 56 55 58 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 58 56 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 59 58 60 7 (set (reg/f:SI 197 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 60 59 61 7 (set (reg:SI 177 [ D.8798 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 197 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 197 [ G ])
        (nil)))

(insn 61 60 62 7 (parallel [
            (set (reg:SI 176 [ D.8799 ])
                (ior:SI (reg:SI 177 [ D.8798 ])
                    (const_int 16777216 [0x1000000])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 177 [ D.8798 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 62 61 63 7 (set (reg/f:SI 198 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 63 62 64 7 (set (mem/s/j:SI (plus:SI (reg/f:SI 198 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 176 [ D.8799 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 176 [ D.8799 ])
        (expr_list:REG_DEAD (reg/f:SI 198 [ G ])
            (nil))))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 64 63 65 8 234 "" [1 uses])

(note 65 64 67 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 67 65 68 8 (set (reg/f:SI 199)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Net$non_lazy_ptr") [flags 0x100] <var_decl 0x6e8880 Net>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 68 67 69 8 (set (reg/f:SI 199)
        (mem/u/c:SI (reg/f:SI 199) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 69 68 70 8 (set (reg:SI 175 [ Net.17 ])
        (mem/i:SI (reg/f:SI 199) [0 Net+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 199)
        (nil)))

(insn 70 69 71 8 (set (reg:SI 174 [ D.8801 ])
        (mem/s/j:SI (plus:SI (reg:SI 175 [ Net.17 ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 175 [ Net.17 ])
        (nil)))

(insn 71 70 72 8 (parallel [
            (set (reg:SI 173 [ D.8802 ])
                (lshiftrt:SI (reg:SI 174 [ D.8801 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 452 {*lshrsi3_1_one_bit} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 174 [ D.8801 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 72 71 73 8 (set (reg:SI 172 [ D.8803 ])
        (reg:SI 173 [ D.8802 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 173 [ D.8802 ])
        (nil)))

(insn 73 72 74 8 (parallel [
            (set (reg:SI 171 [ D.8804 ])
                (and:SI (reg:SI 172 [ D.8803 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 172 [ D.8803 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 74 73 75 8 (set (reg:QI 170 [ D.8805 ])
        (subreg:QI (reg:SI 171 [ D.8804 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 171 [ D.8804 ])
        (nil)))

(insn 75 74 76 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 170 [ D.8805 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 170 [ D.8805 ])
        (nil)))

(jump_insn 76 75 78 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 87)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 78 76 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 80 78 81 9 (set (reg/f:SI 200 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 81 80 82 9 (set (reg:SI 169 [ D.8806 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 200 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 200 [ G ])
        (nil)))

(insn 82 81 83 9 (parallel [
            (set (reg:SI 168 [ D.8807 ])
                (ior:SI (reg:SI 169 [ D.8806 ])
                    (const_int 33554432 [0x2000000])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 169 [ D.8806 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 83 82 84 9 (set (reg/f:SI 201 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 84 83 85 9 (set (mem/s/j:SI (plus:SI (reg/f:SI 201 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 168 [ D.8807 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 168 [ D.8807 ])
        (expr_list:REG_DEAD (reg/f:SI 201 [ G ])
            (nil))))

(jump_insn 85 84 86 9 (set (pc)
        (label_ref 95)) 517 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 86 85 87)

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 87 86 88 10 236 "" [1 uses])

(note 88 87 90 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 90 88 91 10 (set (reg/f:SI 202 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 91 90 92 10 (set (reg:SI 167 [ D.8808 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 202 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 202 [ G ])
        (nil)))

(insn 92 91 93 10 (parallel [
            (set (reg:SI 166 [ D.8809 ])
                (ior:SI (reg:SI 167 [ D.8808 ])
                    (const_int 33554432 [0x2000000])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 167 [ D.8808 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 93 92 94 10 (set (reg/f:SI 203 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 94 93 95 10 (set (mem/s/j:SI (plus:SI (reg/f:SI 203 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 166 [ D.8809 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 166 [ D.8809 ])
        (expr_list:REG_DEAD (reg/f:SI 203 [ G ])
            (nil))))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 95 94 96 11 238 "" [1 uses])

(note 96 95 98 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 98 96 99 11 (set (reg/f:SI 204 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 99 98 100 11 (set (reg:SI 165 [ D.8810 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 204 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 204 [ G ])
        (nil)))

(insn 100 99 101 11 (parallel [
            (set (reg:SI 164 [ D.8811 ])
                (ior:SI (reg:SI 165 [ D.8810 ])
                    (const_int 4096 [0x1000])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 165 [ D.8810 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 101 100 102 11 (set (reg/f:SI 205 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 102 101 104 11 (set (mem/s/j:SI (plus:SI (reg/f:SI 205 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 164 [ D.8811 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 164 [ D.8811 ])
        (expr_list:REG_DEAD (reg/f:SI 205 [ G ])
            (nil))))

(insn 104 102 105 11 (set (reg/f:SI 206 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 105 104 106 11 (set (reg:SI 163 [ D.8812 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 206 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 206 [ G ])
        (nil)))

(insn 106 105 107 11 (parallel [
            (set (reg:SI 162 [ D.8813 ])
                (lshiftrt:SI (reg:SI 163 [ D.8812 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 163 [ D.8812 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 107 106 108 11 (set (reg:SI 161 [ D.8814 ])
        (reg:SI 162 [ D.8813 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 162 [ D.8813 ])
        (nil)))

(insn 108 107 109 11 (parallel [
            (set (reg:SI 160 [ D.8815 ])
                (and:SI (reg:SI 161 [ D.8814 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 161 [ D.8814 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 109 108 110 11 (set (reg:QI 159 [ D.8816 ])
        (subreg:QI (reg:SI 160 [ D.8815 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 160 [ D.8815 ])
        (nil)))

(insn 110 109 111 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 159 [ D.8816 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 159 [ D.8816 ])
        (nil)))

(jump_insn 111 110 113 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 119)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 113 111 114 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 115 12 (set (reg/f:SI 207 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 115 114 116 12 (set (reg:SI 158 [ D.8817 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 207 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 207 [ G ])
        (nil)))

(insn 116 115 117 12 (parallel [
            (set (reg:SI 157 [ D.8818 ])
                (ior:SI (reg:SI 158 [ D.8817 ])
                    (const_int 536870912 [0x20000000])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 158 [ D.8817 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 117 116 118 12 (set (reg/f:SI 208 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 118 117 119 12 (set (mem/s/j:SI (plus:SI (reg/f:SI 208 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 157 [ D.8818 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 157 [ D.8818 ])
        (expr_list:REG_DEAD (reg/f:SI 208 [ G ])
            (nil))))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 119 118 120 13 239 "" [1 uses])

(note 120 119 122 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 122 120 123 13 (set (reg/f:SI 209 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 123 122 125 13 (set (mem/s/j:SI (plus:SI (reg/f:SI 209 [ G ])
                (const_int 12 [0xc])) [0 <variable>.inputType+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 209 [ G ])
        (nil)))

(insn 125 123 126 13 (set (reg/f:SI 210 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 126 125 127 13 (set (reg:SI 211 [ <variable>.inputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 210 [ G ])
                (const_int 16 [0x10])) [0 <variable>.inputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 210 [ G ])
        (nil)))

(insn 127 126 563 13 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 211 [ <variable>.inputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 211 [ <variable>.inputProcs ])
        (nil)))

(note 563 127 128 13 NOTE_INSN_LOOP_BEG)

(jump_insn 128 563 129 13 (set (pc)
        (label_ref 144)) 517 {jump} (nil)
    (nil))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 130)

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 130 129 131 14 242 "" [1 uses])

(note 131 130 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 133 131 134 14 (set (reg/f:SI 212 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 134 133 135 14 (set (reg:SI 156 [ D.8819 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 212 [ G ])
                (const_int 12 [0xc])) [0 <variable>.inputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 212 [ G ])
        (nil)))

(insn 135 134 136 14 (set (reg/f:SI 213 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 136 135 137 14 (set (reg:SI 155 [ D.8820 ])
        (mem/s/j:SI (reg/f:SI 213 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 213 [ P ])
        (nil)))

(insn 137 136 138 14 (parallel [
            (set (reg:SI 154 [ D.8821 ])
                (ior:SI (reg:SI 156 [ D.8819 ])
                    (reg:SI 155 [ D.8820 ])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 156 [ D.8819 ])
            (expr_list:REG_DEAD (reg:SI 155 [ D.8820 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 138 137 139 14 (set (reg/f:SI 214 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 139 138 141 14 (set (mem/s/j:SI (plus:SI (reg/f:SI 214 [ G ])
                (const_int 12 [0xc])) [0 <variable>.inputType+0 S4 A32])
        (reg:SI 154 [ D.8821 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 154 [ D.8821 ])
        (expr_list:REG_DEAD (reg/f:SI 214 [ G ])
            (nil))))

(insn 141 139 142 14 (set (reg/f:SI 215 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 142 141 143 14 (set (reg:SI 216 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 215 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 215 [ P ])
        (nil)))

(insn 143 142 144 14 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 216 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 216 [ <variable>.next ])
        (nil)))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 144 143 145 15 241 "" [1 uses])

(note 145 144 146 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 146 145 147 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 147 146 564 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 130)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 564 147 149 15 NOTE_INSN_LOOP_END)

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 149 564 151 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 151 149 152 16 (set (reg/f:SI 217 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 152 151 154 16 (set (mem/s/j:SI (plus:SI (reg/f:SI 217 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 217 [ G ])
        (nil)))

(insn 154 152 155 16 (set (reg/f:SI 218 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 155 154 156 16 (set (reg:SI 219 [ <variable>.outputProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 218 [ G ])
                (const_int 24 [0x18])) [0 <variable>.outputProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 218 [ G ])
        (nil)))

(insn 156 155 565 16 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 219 [ <variable>.outputProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 219 [ <variable>.outputProcs ])
        (nil)))

(note 565 156 157 16 NOTE_INSN_LOOP_BEG)

(jump_insn 157 565 158 16 (set (pc)
        (label_ref 173)) 517 {jump} (nil)
    (nil))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 159)

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 159 158 160 17 245 "" [1 uses])

(note 160 159 162 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 162 160 163 17 (set (reg/f:SI 220 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 163 162 164 17 (set (reg:SI 153 [ D.8822 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 220 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 220 [ G ])
        (nil)))

(insn 164 163 165 17 (set (reg/f:SI 221 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 165 164 166 17 (set (reg:SI 152 [ D.8823 ])
        (mem/s/j:SI (reg/f:SI 221 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 221 [ P ])
        (nil)))

(insn 166 165 167 17 (parallel [
            (set (reg:SI 151 [ D.8824 ])
                (ior:SI (reg:SI 153 [ D.8822 ])
                    (reg:SI 152 [ D.8823 ])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 153 [ D.8822 ])
            (expr_list:REG_DEAD (reg:SI 152 [ D.8823 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 167 166 168 17 (set (reg/f:SI 222 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 168 167 170 17 (set (mem/s/j:SI (plus:SI (reg/f:SI 222 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])
        (reg:SI 151 [ D.8824 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 151 [ D.8824 ])
        (expr_list:REG_DEAD (reg/f:SI 222 [ G ])
            (nil))))

(insn 170 168 171 17 (set (reg/f:SI 223 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 171 170 172 17 (set (reg:SI 224 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 223 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 223 [ P ])
        (nil)))

(insn 172 171 173 17 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 224 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 224 [ <variable>.next ])
        (nil)))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 173 172 174 18 244 "" [1 uses])

(note 174 173 175 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 175 174 176 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 176 175 566 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 566 176 178 18 NOTE_INSN_LOOP_END)

;; Start of basic block 19, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 178 566 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 180 178 181 19 (set (reg/f:SI 225 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 181 180 183 19 (set (mem/s/j:SI (plus:SI (reg/f:SI 225 [ G ])
                (const_int 28 [0x1c])) [0 <variable>.costType+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 225 [ G ])
        (nil)))

(insn 183 181 184 19 (set (reg/f:SI 226 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 184 183 185 19 (set (reg:SI 227 [ <variable>.costProcs ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 226 [ G ])
                (const_int 32 [0x20])) [0 <variable>.costProcs+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 226 [ G ])
        (nil)))

(insn 185 184 567 19 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 227 [ <variable>.costProcs ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 227 [ <variable>.costProcs ])
        (nil)))

(note 567 185 186 19 NOTE_INSN_LOOP_BEG)

(jump_insn 186 567 187 19 (set (pc)
        (label_ref 202)) 517 {jump} (nil)
    (nil))
;; End of basic block 19, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 187 186 188)

;; Start of basic block 20, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 188 187 189 20 248 "" [1 uses])

(note 189 188 191 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 191 189 192 20 (set (reg/f:SI 228 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 192 191 193 20 (set (reg:SI 150 [ D.8825 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 228 [ G ])
                (const_int 28 [0x1c])) [0 <variable>.costType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 228 [ G ])
        (nil)))

(insn 193 192 194 20 (set (reg/f:SI 229 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 194 193 195 20 (set (reg:SI 149 [ D.8826 ])
        (mem/s/j:SI (reg/f:SI 229 [ P ]) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 229 [ P ])
        (nil)))

(insn 195 194 196 20 (parallel [
            (set (reg:SI 148 [ D.8827 ])
                (ior:SI (reg:SI 150 [ D.8825 ])
                    (reg:SI 149 [ D.8826 ])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 150 [ D.8825 ])
            (expr_list:REG_DEAD (reg:SI 149 [ D.8826 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 196 195 197 20 (set (reg/f:SI 230 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 197 196 199 20 (set (mem/s/j:SI (plus:SI (reg/f:SI 230 [ G ])
                (const_int 28 [0x1c])) [0 <variable>.costType+0 S4 A32])
        (reg:SI 148 [ D.8827 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 148 [ D.8827 ])
        (expr_list:REG_DEAD (reg/f:SI 230 [ G ])
            (nil))))

(insn 199 197 200 20 (set (reg/f:SI 231 [ P ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 200 199 201 20 (set (reg:SI 232 [ <variable>.next ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 231 [ P ])
                (const_int 36 [0x24])) [0 <variable>.next+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 231 [ P ])
        (nil)))

(insn 201 200 202 20 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
        (reg:SI 232 [ <variable>.next ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 232 [ <variable>.next ])
        (nil)))
;; End of basic block 20, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 21, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 202 201 203 21 247 "" [1 uses])

(note 203 202 204 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 204 203 205 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 P+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 205 204 568 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 188)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 21, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 568 205 207 21 NOTE_INSN_LOOP_END)

;; Start of basic block 22, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 207 568 209 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 209 207 210 22 (set (reg/f:SI 233 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 210 209 211 22 (set (reg:SI 147 [ D.8828 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 233 [ G ])
                (const_int 12 [0xc])) [0 <variable>.inputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 233 [ G ])
        (nil)))

(insn 211 210 212 22 (parallel [
            (set (reg:SI 146 [ D.8829 ])
                (and:SI (reg:SI 147 [ D.8828 ])
                    (const_int 2575 [0xa0f])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 147 [ D.8828 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 212 211 213 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.8829 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 146 [ D.8829 ])
        (nil)))

(jump_insn 213 212 215 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 249)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 22, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 23, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 215 213 216 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 216 215 217 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 217 216 219 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 249)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 23, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 24, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 219 217 221 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 221 219 222 24 (set (reg/f:SI 234)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Net$non_lazy_ptr") [flags 0x100] <var_decl 0x6e8880 Net>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 222 221 223 24 (set (reg/f:SI 234)
        (mem/u/c:SI (reg/f:SI 234) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 223 222 224 24 (set (reg:SI 145 [ Net.18 ])
        (mem/i:SI (reg/f:SI 234) [0 Net+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 234)
        (nil)))

(insn 224 223 225 24 (set (reg:SI 144 [ D.8831 ])
        (mem/s/j:SI (plus:SI (reg:SI 145 [ Net.18 ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 145 [ Net.18 ])
        (nil)))

(insn 225 224 226 24 (parallel [
            (set (reg:SI 143 [ D.8832 ])
                (lshiftrt:SI (reg:SI 144 [ D.8831 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 144 [ D.8831 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 226 225 227 24 (set (reg:SI 142 [ D.8833 ])
        (reg:SI 143 [ D.8832 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 143 [ D.8832 ])
        (nil)))

(insn 227 226 228 24 (parallel [
            (set (reg:SI 141 [ D.8834 ])
                (and:SI (reg:SI 142 [ D.8833 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 142 [ D.8833 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 228 227 229 24 (set (reg:QI 140 [ D.8835 ])
        (subreg:QI (reg:SI 141 [ D.8834 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 141 [ D.8834 ])
        (nil)))

(insn 229 228 230 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 140 [ D.8835 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 140 [ D.8835 ])
        (nil)))

(jump_insn 230 229 232 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 24, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 25, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 232 230 234 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 234 232 235 25 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 235 234 236 25 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 236 235 237 25 (set (reg:SI 235 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 237 236 238 25 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 235 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 235 [ G ])
        (nil)))

(call_insn 238 237 239 25 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 239 238 240 25 (set (pc)
        (label_ref 249)) 517 {jump} (nil)
    (nil))
;; End of basic block 25, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 241)

;; Start of basic block 26, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 241 240 242 26 253 "" [1 uses])

(note 242 241 244 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 244 242 245 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 245 244 246 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 246 245 247 26 (set (reg:SI 236 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 247 246 248 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 236 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 236 [ G ])
        (nil)))

(call_insn 248 247 249 26 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 26, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 27, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 249 248 250 27 250 "" [3 uses])

(note 250 249 252 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 252 250 253 27 (set (reg/f:SI 237 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 253 252 254 27 (set (reg:SI 139 [ D.8836 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 237 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 237 [ G ])
        (nil)))

(insn 254 253 255 27 (parallel [
            (set (reg:SI 138 [ D.8837 ])
                (and:SI (reg:SI 139 [ D.8836 ])
                    (const_int 2891775 [0x2c1fff])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 139 [ D.8836 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 255 254 256 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 138 [ D.8837 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 138 [ D.8837 ])
        (nil)))

(jump_insn 256 255 258 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 376)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 27, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 28, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 258 256 260 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 260 258 261 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 261 260 263 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 282)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 28, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 29, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 263 261 264 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 264 263 265 29 (set (reg/f:SI 238 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 265 264 266 29 (set (reg:SI 137 [ D.8840 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 238 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 238 [ G ])
        (nil)))

(insn 266 265 267 29 (parallel [
            (set (reg:SI 136 [ D.8841 ])
                (and:SI (reg:SI 137 [ D.8840 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 137 [ D.8840 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 267 266 268 29 (set (reg:QI 135 [ D.8842 ])
        (subreg:QI (reg:SI 136 [ D.8841 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 136 [ D.8841 ])
        (nil)))

(insn 268 267 269 29 (parallel [
            (set (reg:QI 134 [ D.8843 ])
                (xor:QI (reg:QI 135 [ D.8842 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 351 {*xorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 135 [ D.8842 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 269 268 270 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 134 [ D.8843 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 134 [ D.8843 ])
        (nil)))

(jump_insn 270 269 272 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 282)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 29, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 30, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 272 270 274 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 274 272 275 30 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1024 [0x400])) 41 {*movsi_1} (nil)
    (nil))

(insn 275 274 276 30 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 276 275 277 30 (set (reg:SI 239 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 277 276 278 30 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 239 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 239 [ G ])
        (nil)))

(call_insn 278 277 280 30 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 280 278 281 30 (set (pc)
        (label_ref 376)) 517 {jump} (nil)
    (nil))
;; End of basic block 30, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 281 280 282)

;; Start of basic block 31, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 282 281 283 31 257 "" [2 uses])

(note 283 282 285 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 285 283 286 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 286 285 288 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 318)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 31, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 32, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 288 286 289 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 289 288 290 32 (set (reg/f:SI 240 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 290 289 291 32 (set (reg:SI 133 [ D.8846 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 240 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 240 [ G ])
        (nil)))

(insn 291 290 292 32 (parallel [
            (set (reg:SI 132 [ D.8847 ])
                (lshiftrt:SI (reg:SI 133 [ D.8846 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 452 {*lshrsi3_1_one_bit} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 133 [ D.8846 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 292 291 293 32 (set (reg:SI 131 [ D.8848 ])
        (reg:SI 132 [ D.8847 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 132 [ D.8847 ])
        (nil)))

(insn 293 292 294 32 (parallel [
            (set (reg:SI 130 [ D.8849 ])
                (and:SI (reg:SI 131 [ D.8848 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 131 [ D.8848 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 294 293 295 32 (set (reg:QI 129 [ D.8850 ])
        (subreg:QI (reg:SI 130 [ D.8849 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 130 [ D.8849 ])
        (nil)))

(insn 295 294 296 32 (parallel [
            (set (reg:QI 128 [ D.8851 ])
                (xor:QI (reg:QI 129 [ D.8850 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 351 {*xorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 129 [ D.8850 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 296 295 297 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 128 [ D.8851 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 128 [ D.8851 ])
        (nil)))

(jump_insn 297 296 299 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 318)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 32, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 33, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 299 297 300 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 300 299 301 33 (set (reg/f:SI 241 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 301 300 302 33 (set (reg:SI 127 [ D.8852 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 241 [ G ])
                (const_int 12 [0xc])) [0 <variable>.inputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 241 [ G ])
        (nil)))

(insn 302 301 303 33 (parallel [
            (set (reg:SI 126 [ D.8853 ])
                (lshiftrt:SI (reg:SI 127 [ D.8852 ])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 127 [ D.8852 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 303 302 304 33 (set (reg:SI 125 [ D.8854 ])
        (reg:SI 126 [ D.8853 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 126 [ D.8853 ])
        (nil)))

(insn 304 303 305 33 (parallel [
            (set (reg:SI 124 [ D.8855 ])
                (and:SI (reg:SI 125 [ D.8854 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 125 [ D.8854 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 305 304 306 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 124 [ D.8855 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 124 [ D.8855 ])
        (nil)))

(jump_insn 306 305 308 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 318)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 33, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 34, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 308 306 310 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 310 308 311 34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 512 [0x200])) 41 {*movsi_1} (nil)
    (nil))

(insn 311 310 312 34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 312 311 313 34 (set (reg:SI 242 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 313 312 314 34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 242 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 242 [ G ])
        (nil)))

(call_insn 314 313 316 34 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 316 314 317 34 (set (pc)
        (label_ref 376)) 517 {jump} (nil)
    (nil))
;; End of basic block 34, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 317 316 318)

;; Start of basic block 35, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 318 317 319 35 260 "" [3 uses])

(note 319 318 321 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 321 319 322 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 322 321 324 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 345)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 35, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 36, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 324 322 325 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 325 324 326 36 (set (reg/f:SI 243 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 326 325 327 36 (set (reg:SI 123 [ D.8858 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 243 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 243 [ G ])
        (nil)))

(insn 327 326 328 36 (parallel [
            (set (reg:SI 122 [ D.8859 ])
                (lshiftrt:SI (reg:SI 123 [ D.8858 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 123 [ D.8858 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 328 327 329 36 (set (reg:SI 121 [ D.8860 ])
        (reg:SI 122 [ D.8859 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 122 [ D.8859 ])
        (nil)))

(insn 329 328 330 36 (parallel [
            (set (reg:SI 120 [ D.8861 ])
                (and:SI (reg:SI 121 [ D.8860 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 121 [ D.8860 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 330 329 331 36 (set (reg:QI 119 [ D.8862 ])
        (subreg:QI (reg:SI 120 [ D.8861 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 120 [ D.8861 ])
        (nil)))

(insn 331 330 332 36 (parallel [
            (set (reg:QI 118 [ D.8863 ])
                (xor:QI (reg:QI 119 [ D.8862 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 351 {*xorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 119 [ D.8862 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 332 331 333 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 118 [ D.8863 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 118 [ D.8863 ])
        (nil)))

(jump_insn 333 332 335 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 345)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 36, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 37, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 335 333 337 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 337 335 338 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2048 [0x800])) 41 {*movsi_1} (nil)
    (nil))

(insn 338 337 339 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 339 338 340 37 (set (reg:SI 244 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 340 339 341 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 244 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 244 [ G ])
        (nil)))

(call_insn 341 340 343 37 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 343 341 344 37 (set (pc)
        (label_ref 376)) 517 {jump} (nil)
    (nil))
;; End of basic block 37, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 344 343 345)

;; Start of basic block 38, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 345 344 346 38 264 "" [2 uses])

(note 346 345 348 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 348 346 349 38 (set (reg/f:SI 245)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Net$non_lazy_ptr") [flags 0x100] <var_decl 0x6e8880 Net>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 349 348 350 38 (set (reg/f:SI 245)
        (mem/u/c:SI (reg/f:SI 245) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 350 349 351 38 (set (reg:SI 117 [ Net.19 ])
        (mem/i:SI (reg/f:SI 245) [0 Net+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 245)
        (nil)))

(insn 351 350 352 38 (set (reg:SI 116 [ D.8865 ])
        (mem/s/j:SI (plus:SI (reg:SI 117 [ Net.19 ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 117 [ Net.19 ])
        (nil)))

(insn 352 351 353 38 (parallel [
            (set (reg:SI 115 [ D.8866 ])
                (lshiftrt:SI (reg:SI 116 [ D.8865 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 116 [ D.8865 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 353 352 354 38 (set (reg:SI 114 [ D.8867 ])
        (reg:SI 115 [ D.8866 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 115 [ D.8866 ])
        (nil)))

(insn 354 353 355 38 (parallel [
            (set (reg:SI 113 [ D.8868 ])
                (and:SI (reg:SI 114 [ D.8867 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 114 [ D.8867 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 355 354 356 38 (set (reg:QI 112 [ D.8869 ])
        (subreg:QI (reg:SI 113 [ D.8868 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 113 [ D.8868 ])
        (nil)))

(insn 356 355 357 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 112 [ D.8869 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 112 [ D.8869 ])
        (nil)))

(jump_insn 357 356 359 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 368)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 38, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 39, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 359 357 361 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 361 359 362 39 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 256 [0x100])) 41 {*movsi_1} (nil)
    (nil))

(insn 362 361 363 39 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 363 362 364 39 (set (reg:SI 246 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 364 363 365 39 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 246 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 246 [ G ])
        (nil)))

(call_insn 365 364 366 39 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 366 365 367 39 (set (pc)
        (label_ref 376)) 517 {jump} (nil)
    (nil))
;; End of basic block 39, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 367 366 368)

;; Start of basic block 40, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 368 367 369 40 267 "" [1 uses])

(note 369 368 371 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 371 369 372 40 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 372 371 373 40 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 373 372 374 40 (set (reg:SI 247 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 374 373 375 40 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 247 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 247 [ G ])
        (nil)))

(call_insn 375 374 376 40 (call (mem/u/c:QI (symbol_ref:SI ("&L_prependProc$stub") <function_decl 0x6f2780 prependProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 40, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 41, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 376 375 377 41 255 "" [5 uses])

(note 377 376 379 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 379 377 380 41 (set (reg/f:SI 248)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Net$non_lazy_ptr") [flags 0x100] <var_decl 0x6e8880 Net>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 380 379 381 41 (set (reg/f:SI 248)
        (mem/u/c:SI (reg/f:SI 248) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 381 380 382 41 (set (reg:SI 111 [ Net.20 ])
        (mem/i:SI (reg/f:SI 248) [0 Net+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 248)
        (nil)))

(insn 382 381 383 41 (set (reg:SI 110 [ D.8873 ])
        (mem/s/j:SI (plus:SI (reg:SI 111 [ Net.20 ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 111 [ Net.20 ])
        (nil)))

(insn 383 382 384 41 (parallel [
            (set (reg:SI 109 [ D.8874 ])
                (lshiftrt:SI (reg:SI 110 [ D.8873 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 452 {*lshrsi3_1_one_bit} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 110 [ D.8873 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 384 383 385 41 (set (reg:SI 108 [ D.8875 ])
        (reg:SI 109 [ D.8874 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 109 [ D.8874 ])
        (nil)))

(insn 385 384 386 41 (parallel [
            (set (reg:SI 107 [ D.8876 ])
                (and:SI (reg:SI 108 [ D.8875 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 108 [ D.8875 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 386 385 387 41 (set (reg:QI 106 [ D.8877 ])
        (subreg:QI (reg:SI 107 [ D.8876 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 107 [ D.8876 ])
        (nil)))

(insn 387 386 388 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 106 [ D.8877 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 106 [ D.8877 ])
        (nil)))

(jump_insn 388 387 390 41 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 435)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 41, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 42, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 390 388 391 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 391 390 392 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 special+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 392 391 394 42 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 413)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 42, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 43, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 394 392 395 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 395 394 396 43 (set (reg/f:SI 249 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 396 395 397 43 (set (reg:SI 105 [ D.8878 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 249 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 249 [ G ])
        (nil)))

(insn 397 396 398 43 (parallel [
            (set (reg:SI 104 [ D.8879 ])
                (lshiftrt:SI (reg:SI 105 [ D.8878 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 452 {*lshrsi3_1_one_bit} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 105 [ D.8878 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 398 397 399 43 (set (reg:SI 103 [ D.8880 ])
        (reg:SI 104 [ D.8879 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 104 [ D.8879 ])
        (nil)))

(insn 399 398 400 43 (parallel [
            (set (reg:SI 102 [ D.8881 ])
                (and:SI (reg:SI 103 [ D.8880 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 103 [ D.8880 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 400 399 401 43 (set (reg:QI 101 [ D.8882 ])
        (subreg:QI (reg:SI 102 [ D.8881 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 102 [ D.8881 ])
        (nil)))

(insn 401 400 402 43 (parallel [
            (set (reg:QI 100 [ D.8883 ])
                (xor:QI (reg:QI 101 [ D.8882 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 351 {*xorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 101 [ D.8882 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 402 401 403 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 100 [ D.8883 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 100 [ D.8883 ])
        (nil)))

(jump_insn 403 402 405 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 435)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 43, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 44, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 405 403 406 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 406 405 407 44 (set (reg/f:SI 250 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 407 406 408 44 (set (reg:SI 99 [ D.8884 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 250 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 250 [ G ])
        (nil)))

(insn 408 407 409 44 (parallel [
            (set (reg:SI 98 [ D.8885 ])
                (lshiftrt:SI (reg:SI 99 [ D.8884 ])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 99 [ D.8884 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 409 408 410 44 (set (reg:SI 97 [ D.8886 ])
        (reg:SI 98 [ D.8885 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 98 [ D.8885 ])
        (nil)))

(insn 410 409 411 44 (parallel [
            (set (reg:SI 96 [ D.8887 ])
                (and:SI (reg:SI 97 [ D.8886 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 97 [ D.8886 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 411 410 412 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ D.8887 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 96 [ D.8887 ])
        (nil)))

(jump_insn 412 411 413 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 435)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 44, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 45, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 413 412 414 45 271 "" [1 uses])

(note 414 413 415 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 415 414 416 45 (set (reg/f:SI 251 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 416 415 417 45 (set (reg:SI 95 [ D.8888 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 251 [ G ])
                (const_int 12 [0xc])) [0 <variable>.inputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 251 [ G ])
        (nil)))

(insn 417 416 418 45 (parallel [
            (set (reg:SI 94 [ D.8889 ])
                (and:SI (reg:SI 95 [ D.8888 ])
                    (const_int 2080 [0x820])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 95 [ D.8888 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 418 417 419 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 94 [ D.8889 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 94 [ D.8889 ])
        (nil)))

(jump_insn 419 418 421 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 435)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 45, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 46, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 421 419 422 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 422 421 423 46 (set (reg/f:SI 252 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 423 422 424 46 (set (reg:SI 93 [ D.8890 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 252 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 252 [ G ])
        (nil)))

(insn 424 423 425 46 (parallel [
            (set (reg:SI 92 [ D.8891 ])
                (and:SI (reg:SI 93 [ D.8890 ])
                    (const_int 2629632 [0x282000])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 93 [ D.8890 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 425 424 426 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 92 [ D.8891 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 92 [ D.8891 ])
        (nil)))

(jump_insn 426 425 428 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 435)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 46, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 47, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 428 426 430 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 430 428 431 47 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 8192 [0x2000])) 41 {*movsi_1} (nil)
    (nil))

(insn 431 430 432 47 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 3 [0x3])) 41 {*movsi_1} (nil)
    (nil))

(insn 432 431 433 47 (set (reg:SI 253 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 433 432 434 47 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 253 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 253 [ G ])
        (nil)))

(call_insn 434 433 435 47 (call (mem/u/c:QI (symbol_ref:SI ("&L_appendProc$stub") <function_decl 0x6f2500 appendProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 47, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 48, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 435 434 436 48 269 "" [5 uses])

(note 436 435 438 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 438 436 439 48 (set (reg:SI 254 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 439 438 440 48 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 254 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 254 [ G ])
        (nil)))

(call_insn 440 439 442 48 (call (mem:QI (symbol_ref:SI ("estimateOutputBounds") [flags 0x103] <function_decl 0x70ce80 estimateOutputBounds>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 442 440 443 48 (set (reg/f:SI 255 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 443 442 444 48 (set (reg:SI 91 [ D.8892 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 255 [ G ])
                (const_int 28 [0x1c])) [0 <variable>.costType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 255 [ G ])
        (nil)))

(insn 444 443 445 48 (parallel [
            (set (reg:SI 90 [ D.8893 ])
                (and:SI (reg:SI 91 [ D.8892 ])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 91 [ D.8892 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 445 444 446 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.8893 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 90 [ D.8893 ])
        (nil)))

(jump_insn 446 445 448 48 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 514)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 48, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 49, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 448 446 449 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 449 448 450 49 (set (reg/f:SI 256 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 450 449 451 49 (set (reg:SI 89 [ D.8894 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 256 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 256 [ G ])
        (nil)))

(insn 451 450 452 49 (parallel [
            (set (reg:SI 88 [ D.8895 ])
                (lshiftrt:SI (reg:SI 89 [ D.8894 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 89 [ D.8894 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 452 451 453 49 (set (reg:SI 87 [ D.8896 ])
        (reg:SI 88 [ D.8895 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 88 [ D.8895 ])
        (nil)))

(insn 453 452 454 49 (parallel [
            (set (reg:SI 86 [ D.8897 ])
                (and:SI (reg:SI 87 [ D.8896 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 87 [ D.8896 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 454 453 455 49 (set (reg:QI 85 [ D.8898 ])
        (subreg:QI (reg:SI 86 [ D.8897 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 86 [ D.8897 ])
        (nil)))

(insn 455 454 456 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 85 [ D.8898 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 85 [ D.8898 ])
        (nil)))

(jump_insn 456 455 458 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 514)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 49, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 50, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 458 456 459 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 459 458 460 50 (set (reg/f:SI 257 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 460 459 461 50 (set (reg:SI 84 [ D.8899 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 257 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 257 [ G ])
        (nil)))

(insn 461 460 462 50 (parallel [
            (set (reg:SI 83 [ D.8900 ])
                (lshiftrt:SI (reg:SI 84 [ D.8899 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 84 [ D.8899 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 462 461 463 50 (set (reg:SI 82 [ D.8901 ])
        (reg:SI 83 [ D.8900 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ D.8900 ])
        (nil)))

(insn 463 462 464 50 (parallel [
            (set (reg:SI 81 [ D.8902 ])
                (and:SI (reg:SI 82 [ D.8901 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 82 [ D.8901 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 464 463 465 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 81 [ D.8902 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 81 [ D.8902 ])
        (nil)))

(jump_insn 465 464 467 50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 514)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 50, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 51, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 467 465 469 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 469 467 470 51 (set (reg/f:SI 258 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 470 469 471 51 (set (reg:SI 80 [ D.8903 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 258 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 258 [ G ])
        (nil)))

(insn 471 470 472 51 (parallel [
            (set (reg:SI 79 [ D.8904 ])
                (lshiftrt:SI (reg:SI 80 [ D.8903 ])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 80 [ D.8903 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 472 471 473 51 (set (reg:SI 78 [ D.8905 ])
        (reg:SI 79 [ D.8904 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 79 [ D.8904 ])
        (nil)))

(insn 473 472 474 51 (parallel [
            (set (reg:SI 77 [ D.8906 ])
                (and:SI (reg:SI 78 [ D.8905 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 78 [ D.8905 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 474 473 475 51 (set (reg:QI 76 [ D.8907 ])
        (subreg:QI (reg:SI 77 [ D.8906 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ D.8906 ])
        (nil)))

(insn 475 474 476 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 76 [ D.8907 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 76 [ D.8907 ])
        (nil)))

(jump_insn 476 475 478 51 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 487)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 51, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 52, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 478 476 480 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 480 478 481 52 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 481 480 482 52 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 482 481 483 52 (set (reg:SI 259 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 483 482 484 52 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 259 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 259 [ G ])
        (nil)))

(call_insn 484 483 485 52 (call (mem/u/c:QI (symbol_ref:SI ("&L_appendProc$stub") <function_decl 0x6f2500 appendProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 485 484 486 52 (set (pc)
        (label_ref 514)) 517 {jump} (nil)
    (nil))
;; End of basic block 52, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 486 485 487)

;; Start of basic block 53, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 487 486 488 53 280 "" [1 uses])

(note 488 487 490 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 490 488 491 53 (set (reg/f:SI 260 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 491 490 492 53 (set (reg:SI 75 [ D.8908 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 260 [ G ])
                (const_int 20 [0x14])) [0 <variable>.outputType+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 260 [ G ])
        (nil)))

(insn 492 491 493 53 (parallel [
            (set (reg:SI 74 [ D.8909 ])
                (and:SI (reg:SI 75 [ D.8908 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 75 [ D.8908 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 493 492 494 53 (set (reg:QI 73 [ D.8910 ])
        (subreg:QI (reg:SI 74 [ D.8909 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.8909 ])
        (nil)))

(insn 494 493 495 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 73 [ D.8910 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 73 [ D.8910 ])
        (nil)))

(jump_insn 495 494 497 53 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 506)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 53, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 54, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 497 495 499 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 499 497 500 54 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 500 499 501 54 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 501 500 502 54 (set (reg:SI 261 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 502 501 503 54 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 261 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 261 [ G ])
        (nil)))

(call_insn 503 502 504 54 (call (mem/u/c:QI (symbol_ref:SI ("&L_appendProc$stub") <function_decl 0x6f2500 appendProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 504 503 505 54 (set (pc)
        (label_ref 514)) 517 {jump} (nil)
    (nil))
;; End of basic block 54, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 505 504 506)

;; Start of basic block 55, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 506 505 507 55 282 "" [1 uses])

(note 507 506 509 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 509 507 510 55 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 510 509 511 55 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 511 510 512 55 (set (reg:SI 262 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 512 511 513 55 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 262 [ G ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 262 [ G ])
        (nil)))

(call_insn 513 512 514 55 (call (mem/u/c:QI (symbol_ref:SI ("&L_appendProc$stub") <function_decl 0x6f2500 appendProc>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 55, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 56, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 514 513 515 56 276 "" [5 uses])

(note 515 514 517 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn 517 515 518 56 (set (reg/f:SI 263)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Net$non_lazy_ptr") [flags 0x100] <var_decl 0x6e8880 Net>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 518 517 519 56 (set (reg/f:SI 263)
        (mem/u/c:SI (reg/f:SI 263) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 519 518 520 56 (set (reg:SI 72 [ Net.21 ])
        (mem/i:SI (reg/f:SI 263) [0 Net+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 263)
        (nil)))

(insn 520 519 521 56 (set (reg:SI 71 [ D.8912 ])
        (mem/s/j:SI (plus:SI (reg:SI 72 [ Net.21 ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ Net.21 ])
        (nil)))

(insn 521 520 522 56 (parallel [
            (set (reg:SI 70 [ D.8913 ])
                (lshiftrt:SI (reg:SI 71 [ D.8912 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 452 {*lshrsi3_1_one_bit} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 71 [ D.8912 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 522 521 523 56 (set (reg:SI 69 [ D.8914 ])
        (reg:SI 70 [ D.8913 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.8913 ])
        (nil)))

(insn 523 522 524 56 (parallel [
            (set (reg:SI 68 [ D.8915 ])
                (and:SI (reg:SI 69 [ D.8914 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 69 [ D.8914 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 524 523 525 56 (set (reg:QI 67 [ D.8916 ])
        (subreg:QI (reg:SI 68 [ D.8915 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.8915 ])
        (nil)))

(insn 525 524 526 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 67 [ D.8916 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 67 [ D.8916 ])
        (nil)))

(jump_insn 526 525 528 56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 559)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 56, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 57, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 528 526 529 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 529 528 530 57 (set (reg/f:SI 264 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 530 529 531 57 (set (reg:SI 66 [ D.8917 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 264 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 264 [ G ])
        (nil)))

(insn 531 530 532 57 (parallel [
            (set (reg:SI 65 [ D.8918 ])
                (lshiftrt:SI (reg:SI 66 [ D.8917 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 454 {*lshrsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 66 [ D.8917 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 532 531 533 57 (set (reg:SI 64 [ D.8919 ])
        (reg:SI 65 [ D.8918 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.8918 ])
        (nil)))

(insn 533 532 534 57 (parallel [
            (set (reg:SI 63 [ D.8920 ])
                (and:SI (reg:SI 64 [ D.8919 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 64 [ D.8919 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 534 533 535 57 (set (reg:QI 62 [ D.8921 ])
        (subreg:QI (reg:SI 63 [ D.8920 ]) 0)) 56 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.8920 ])
        (nil)))

(insn 535 534 536 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 62 [ D.8921 ])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 62 [ D.8921 ])
        (nil)))

(jump_insn 536 535 538 57 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 559)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 57, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 58, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 538 536 539 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn 539 538 540 58 (set (reg/f:SI 265 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 540 539 541 58 (set (reg:SI 61 [ D.8922 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 265 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 265 [ G ])
        (nil)))

(insn 541 540 542 58 (parallel [
            (set (reg:SI 60 [ D.8923 ])
                (and:SI (reg:SI 61 [ D.8922 ])
                    (const_int 258048 [0x3f000])))
            (clobber (reg:CC 17 flags))
        ]) 300 {*andsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 61 [ D.8922 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 542 541 543 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ D.8923 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.8923 ])
        (nil)))

(jump_insn 543 542 545 58 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 559)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 58, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 59, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 545 543 547 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 547 545 548 59 (set (reg/f:SI 266 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 548 547 549 59 (set (reg:SI 59 [ D.8924 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 266 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 266 [ G ])
        (nil)))

(insn 549 548 550 59 (parallel [
            (set (reg:SI 58 [ D.8925 ])
                (ior:SI (reg:SI 59 [ D.8924 ])
                    (const_int 4096 [0x1000])))
            (clobber (reg:CC 17 flags))
        ]) 319 {*iorsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 59 [ D.8924 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 550 549 551 59 (set (reg/f:SI 267 [ G ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 G+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 551 550 554 59 (set (mem/s/j:SI (plus:SI (reg/f:SI 267 [ G ])
                (const_int 8 [0x8])) [0 <variable>.type+0 S4 A32])
        (reg:SI 58 [ D.8925 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.8925 ])
        (expr_list:REG_DEAD (reg/f:SI 267 [ G ])
            (nil))))
;; End of basic block 59, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 554 551 559 NOTE_INSN_FUNCTION_END)

;; Start of basic block 60, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 559 554 562 60 288 "" [3 uses])

(note 562 559 0 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 60, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function registerProjectionType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
62 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 7 [0x7])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 58 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 58 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ type ])
        (nil)))

(insn 11 10 12 0 (set (reg:SI 59 [ name ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 11 13 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 59 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ name ])
        (nil)))

(call_insn 13 12 15 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 15 13 16 0 (set (reg:SI 60 [ connectGroups ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 connectGroups+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 60 [ connectGroups ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ connectGroups ])
        (nil)))

(insn 17 16 18 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 7 [0x7])) 41 {*movsi_1} (nil)
    (nil))

(insn 18 17 19 0 (set (reg:SI 61 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 19 18 20 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ type ])
        (nil)))

(call_insn 20 19 21 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("setTypeData") [flags 0x303] <function_decl 0x73d600 setTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 21 20 0 NOTE_INSN_FUNCTION_END)


;; Function projectionProc



Pass 0

  Register 58 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref AREG, else GENERAL_REGS
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref GENERAL_REGS or none
  Register 62 pref FLOAT_INT_SSE_REGS or none
63 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 7 [0x7])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 61 [ type ])
        (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ type ])
        (nil)))

(call_insn 11 10 12 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 12 11 13 0 (set (reg:SI 58 [ D.9009 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 13 12 14 0 (set (reg:SI 59 [ D.9008 ])
        (reg:SI 58 [ D.9009 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.9009 ])
        (nil)))

(insn 14 13 17 0 (set (reg:SI 60 [ <result> ])
        (reg:SI 59 [ D.9008 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.9008 ])
        (nil)))

(note 17 14 20 0 NOTE_INSN_FUNCTION_END)

(insn 20 17 26 0 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 60 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ <result> ])
        (nil)))

(insn 26 20 0 0 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 0, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function registerExampleModeType



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
62 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 58 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 58 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ type ])
        (nil)))

(insn 11 10 12 0 (set (reg:SI 59 [ name ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 name+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 11 13 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 59 [ name ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ name ])
        (nil)))

(call_insn 13 12 15 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 15 13 16 0 (set (reg:SI 60 [ loadNextExample ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 loadNextExample+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 60 [ loadNextExample ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ loadNextExample ])
        (nil)))

(insn 17 16 18 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 18 17 19 0 (set (reg:SI 61 [ type ])
        (mem/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 19 18 20 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ type ])
        (nil)))

(call_insn 20 19 21 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("setTypeData") [flags 0x303] <function_decl 0x73d600 setTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 21 20 0 NOTE_INSN_FUNCTION_END)


;; Function nextExample



Pass 0

  Register 58 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref AREG, else GENERAL_REGS
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref GENERAL_REGS or none
  Register 62 pref FLOAT_INT_SSE_REGS or none
63 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg:SI 61 [ type ])
        (mem/i:SI (reg/f:SI 16 argp) [0 type+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 61 [ type ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ type ])
        (nil)))

(call_insn 11 10 12 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getTypeData") [flags 0x303] <function_decl 0x745a00 getTypeData>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 12 11 13 0 (set (reg:SI 58 [ D.9023 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 13 12 14 0 (set (reg:SI 59 [ D.9022 ])
        (reg:SI 58 [ D.9023 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.9023 ])
        (nil)))

(insn 14 13 17 0 (set (reg:SI 60 [ <result> ])
        (reg:SI 59 [ D.9022 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.9022 ])
        (nil)))

(note 17 14 20 0 NOTE_INSN_FUNCTION_END)

(insn 20 17 26 0 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 60 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ <result> ])
        (nil)))

(insn 26 20 0 0 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 0, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function initTypes



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref GENERAL_REGS or none
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
90 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 63 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 64 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 66 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 67 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 68 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 69 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 70 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 71 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 72 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 73 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 74 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 75 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 76 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 77 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 78 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 79 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 82 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 83 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 84 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 85 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 86 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 87 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 88 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 89 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int -2147483648 [0xffffffff80000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (reg/f:SI 58)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC40") [flags 0x2] <string_cst 0x83a9c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 11 10 12 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 58)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 58)
        (nil)))

(call_insn 12 11 14 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 14 12 15 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 15 14 16 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (reg/f:SI 59)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC41") [flags 0x2] <string_cst 0x839360>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 17 16 18 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 59)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 59)
        (nil)))

(call_insn 18 17 20 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 20 18 21 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 22 21 23 0 (set (reg/f:SI 60)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC42") [flags 0x2] <string_cst 0x83ac30>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 23 22 24 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 60)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 60)
        (nil)))

(call_insn 24 23 26 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 26 24 27 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 0 (set (reg/f:SI 61)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC43") [flags 0x2] <string_cst 0x83ad80>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 29 28 30 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 61)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 61)
        (nil)))

(call_insn 30 29 32 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 32 30 33 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 33 32 34 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 34 33 35 0 (set (reg/f:SI 62)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC44") [flags 0x2] <string_cst 0x83aed0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 35 34 36 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 62)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 62)
        (nil)))

(call_insn 36 35 38 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 38 36 39 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 39 38 40 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1048576 [0x100000])) 41 {*movsi_1} (nil)
    (nil))

(insn 40 39 41 0 (set (reg/f:SI 63)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC45") [flags 0x2] <string_cst 0x83c000>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 41 40 42 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 63)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 63)
        (nil)))

(call_insn 42 41 44 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 44 42 45 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 45 44 46 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2097152 [0x200000])) 41 {*movsi_1} (nil)
    (nil))

(insn 46 45 47 0 (set (reg/f:SI 64)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC46") [flags 0x2] <string_cst 0x83c150>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 47 46 48 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 64)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 64)
        (nil)))

(call_insn 48 47 50 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 50 48 51 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 51 50 52 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4194304 [0x400000])) 41 {*movsi_1} (nil)
    (nil))

(insn 52 51 53 0 (set (reg/f:SI 65)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC47") [flags 0x2] <string_cst 0x83c2a0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 53 52 54 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 65)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 65)
        (nil)))

(call_insn 54 53 56 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 56 54 57 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 57 56 58 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8388608 [0x800000])) 41 {*movsi_1} (nil)
    (nil))

(insn 58 57 59 0 (set (reg/f:SI 66)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC48") [flags 0x2] <string_cst 0x83c3f0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 59 58 60 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 66)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 66)
        (nil)))

(call_insn 60 59 62 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 62 60 63 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 63 62 64 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 16777216 [0x1000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 64 63 65 0 (set (reg/f:SI 67)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC49") [flags 0x2] <string_cst 0x83c540>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 65 64 66 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 67)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 67)
        (nil)))

(call_insn 66 65 68 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 68 66 69 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 69 68 70 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 33554432 [0x2000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 70 69 71 0 (set (reg/f:SI 68)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC50") [flags 0x2] <string_cst 0x83c690>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 71 70 72 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 68)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 68)
        (nil)))

(call_insn 72 71 74 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 74 72 75 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 75 74 76 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 67108864 [0x4000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 76 75 77 0 (set (reg/f:SI 69)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC51") [flags 0x2] <string_cst 0x83c7e0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 77 76 78 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 69)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 69)
        (nil)))

(call_insn 78 77 80 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 80 78 81 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 81 80 82 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 134217728 [0x8000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 82 81 83 0 (set (reg/f:SI 70)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC52") [flags 0x2] <string_cst 0x83c930>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 83 82 84 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 70)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 70)
        (nil)))

(call_insn 84 83 86 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 86 84 87 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 87 86 88 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 268435456 [0x10000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 88 87 89 0 (set (reg/f:SI 71)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC53") [flags 0x2] <string_cst 0x83ca80>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 89 88 90 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 71)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 71)
        (nil)))

(call_insn 90 89 92 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 92 90 93 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 93 92 94 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 536870912 [0x20000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 94 93 95 0 (set (reg/f:SI 72)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC54") [flags 0x2] <string_cst 0x83cbd0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 95 94 96 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 72)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 72)
        (nil)))

(call_insn 96 95 98 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 98 96 99 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 99 98 100 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1073741824 [0x40000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 100 99 101 0 (set (reg/f:SI 73)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC55") [flags 0x2] <string_cst 0x83cd20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 101 100 102 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 73)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 73)
        (nil)))

(call_insn 102 101 104 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 104 102 105 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 105 104 106 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int -2147483648 [0xffffffff80000000])) 41 {*movsi_1} (nil)
    (nil))

(insn 106 105 107 0 (set (reg/f:SI 74)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC40") [flags 0x2] <string_cst 0x83a9c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 107 106 108 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 74)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 74)
        (nil)))

(call_insn 108 107 110 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(call_insn 110 108 112 0 (call (mem/u/c:QI (symbol_ref:SI ("&L_registerNetAndGroupTypes$stub") <function_decl 0x716a00 registerNetAndGroupTypes>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(call_insn 112 110 114 0 (call (mem/u/c:QI (symbol_ref:SI ("&L_registerProjectionTypes$stub") <function_decl 0x6faa00 registerProjectionTypes>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(call_insn 114 112 116 0 (call (mem/u/c:QI (symbol_ref:SI ("&L_registerExampleModeTypes$stub") <function_decl 0x6d5400 registerExampleModeTypes>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 116 114 117 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 117 116 118 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 118 117 119 0 (set (reg/f:SI 75)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC56") [flags 0x2] <string_cst 0x83e030>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 119 118 120 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 75)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 75)
        (nil)))

(call_insn 120 119 122 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 122 120 123 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 123 122 124 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 124 123 125 0 (set (reg/f:SI 76)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC57") [flags 0x2] <string_cst 0x83e180>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 125 124 126 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 76)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 76)
        (nil)))

(call_insn 126 125 128 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 128 126 129 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 129 128 130 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 130 129 131 0 (set (reg/f:SI 77)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC58") [flags 0x2] <string_cst 0x83e2d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 131 130 132 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 77)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 77)
        (nil)))

(call_insn 132 131 134 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 134 132 135 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 135 134 136 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 136 135 137 0 (set (reg/f:SI 78)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC59") [flags 0x2] <string_cst 0x83e420>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 137 136 138 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 78)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 78)
        (nil)))

(call_insn 138 137 140 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 140 138 141 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 141 140 142 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 16 [0x10])) 41 {*movsi_1} (nil)
    (nil))

(insn 142 141 143 0 (set (reg/f:SI 79)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC60") [flags 0x2] <string_cst 0x83e570>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 143 142 144 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 79)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79)
        (nil)))

(call_insn 144 143 146 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 146 144 147 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 147 146 148 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 32 [0x20])) 41 {*movsi_1} (nil)
    (nil))

(insn 148 147 149 0 (set (reg/f:SI 80)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC61") [flags 0x2] <string_cst 0x83e6c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 149 148 150 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 80)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 80)
        (nil)))

(call_insn 150 149 152 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 152 150 153 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 10 [0xa])) 41 {*movsi_1} (nil)
    (nil))

(insn 153 152 154 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 64 [0x40])) 41 {*movsi_1} (nil)
    (nil))

(insn 154 153 155 0 (set (reg/f:SI 81)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC62") [flags 0x2] <string_cst 0x83e810>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 155 154 156 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 81)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 81)
        (nil)))

(call_insn 156 155 158 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 158 156 159 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 159 158 160 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 160 159 161 0 (set (reg/f:SI 82)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC63") [flags 0x2] <string_cst 0x83e960>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 161 160 162 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 82)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 82)
        (nil)))

(call_insn 162 161 164 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 164 162 165 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 165 164 166 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 166 165 167 0 (set (reg/f:SI 83)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC64") [flags 0x2] <string_cst 0x83eab0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 167 166 168 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 83)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 83)
        (nil)))

(call_insn 168 167 170 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 170 168 171 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 171 170 172 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 172 171 173 0 (set (reg/f:SI 84)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC65") [flags 0x2] <string_cst 0x83ec00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 173 172 174 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 84)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 84)
        (nil)))

(call_insn 174 173 176 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 176 174 177 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 177 176 178 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(insn 178 177 179 0 (set (reg/f:SI 85)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC66") [flags 0x2] <string_cst 0x83ed50>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 179 178 180 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 85)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 85)
        (nil)))

(call_insn 180 179 182 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 182 180 183 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 183 182 184 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(insn 184 183 185 0 (set (reg/f:SI 86)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC67") [flags 0x2] <string_cst 0x83eea0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 185 184 186 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 86)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 86)
        (nil)))

(call_insn 186 185 188 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 188 186 189 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 189 188 190 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 16 [0x10])) 41 {*movsi_1} (nil)
    (nil))

(insn 190 189 191 0 (set (reg/f:SI 87)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC68") [flags 0x2] <string_cst 0x841000>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 191 190 192 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 87)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 87)
        (nil)))

(call_insn 192 191 194 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 194 192 195 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 195 194 196 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 32 [0x20])) 41 {*movsi_1} (nil)
    (nil))

(insn 196 195 197 0 (set (reg/f:SI 88)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC69") [flags 0x2] <string_cst 0x841150>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 197 196 198 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 88)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 88)
        (nil)))

(call_insn 198 197 200 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 200 198 201 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 11 [0xb])) 41 {*movsi_1} (nil)
    (nil))

(insn 201 200 202 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 64 [0x40])) 41 {*movsi_1} (nil)
    (nil))

(insn 202 201 203 0 (set (reg/f:SI 89)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC70") [flags 0x2] <string_cst 0x8412a0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 203 202 204 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 89)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 89)
        (nil)))

(call_insn 204 203 205 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("registerType") [flags 0x103] <function_decl 0x709900 registerType>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 205 204 0 NOTE_INSN_FUNCTION_END)

