
;; Function printUsage



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
62 registers.

Register 58 used 2 times across 6 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 59 used 4 times across 4 insns in block 0; set 2 times; GENERAL_REGS or none; pointer.

Register 60 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

1 basic blocks, 1 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors: 
Registers live at start: 3 [bx] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 1.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg/f:SI 59)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L___stderrp$non_lazy_ptr") [flags 0x100] <var_decl 0x40bb8080 __stderrp>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg/f:SI 59)
        (mem/u/c:SI (reg/f:SI 59) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (reg:SI 58 [ __stderrp.7 ])
        (mem/i:SI (reg/f:SI 59) [0 __stderrp+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 59)
        (nil)))

(insn 11 10 12 0 (set (reg:SI 60 [ progName ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 progName+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 11 13 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 60 [ progName ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ progName ])
        (nil)))

(insn 13 12 14 0 (set (reg/f:SI 61)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC0") [flags 0x2] <string_cst 0x87eb80>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 14 13 15 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 61)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 61)
        (nil)))

(insn 15 14 16 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 58 [ __stderrp.7 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ __stderrp.7 ])
        (nil)))

(call_insn 16 15 18 0 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_fprintf$stub") <function_decl 0x40b4a100 fprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 18 16 19 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 19 18 20 0 (call (mem/u/c:QI (symbol_ref:SI ("&L_exit$stub") <function_decl 0x40b56c00 exit>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_NORETURN (const_int 0 [0x0])
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 7 [sp] 16 [argp] 20 [frame]

(barrier 20 19 21)

(note 21 20 0 NOTE_INSN_FUNCTION_END)


;; Function Tcl_AppInit



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 64 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 65 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 68 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 76 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 94 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 97 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 102 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 104 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 110 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 111 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 113 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 114 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 115 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 116 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 117 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 118 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 119 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 120 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 121 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 122 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 123 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 124 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 125 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 126 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 127 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 128 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 129 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 131 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 132 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 133 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 134 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 135 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 136 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 137 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 138 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 139 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 140 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 141 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 142 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 143 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 144 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 145 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 146 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 147 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 148 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 149 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 150 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 151 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 152 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 153 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 154 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 155 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 156 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 157 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 158 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 159 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 160 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 161 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 162 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 163 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 164 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 165 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 166 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 167 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 168 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 169 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 170 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 171 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 172 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 173 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 174 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 175 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 176 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 177 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 178 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 179 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 180 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 181 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 182 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 183 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 184 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 185 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 186 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 187 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 188 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 189 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 190 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 191 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 192 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 193 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 194 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 195 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 196 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 197 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 198 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 199 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 200 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 201 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 204 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref AREG, else GENERAL_REGS
  Register 69 pref AREG, else GENERAL_REGS
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref AREG, else GENERAL_REGS
  Register 77 pref AREG, else GENERAL_REGS
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref AREG, else GENERAL_REGS
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref AREG, else GENERAL_REGS
  Register 98 pref GENERAL_REGS or none
  Register 99 pref AREG, else GENERAL_REGS
  Register 100 pref GENERAL_REGS or none
  Register 101 pref GENERAL_REGS or none
  Register 102 pref AREG, else GENERAL_REGS
  Register 103 pref GENERAL_REGS or none
  Register 104 pref AREG, else GENERAL_REGS
  Register 105 pref GENERAL_REGS or none
  Register 106 pref AREG, else GENERAL_REGS
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref GENERAL_REGS or none
  Register 111 pref GENERAL_REGS or none
  Register 112 pref GENERAL_REGS or none
  Register 113 pref AREG, else GENERAL_REGS
  Register 114 pref AREG, else GENERAL_REGS
  Register 115 pref GENERAL_REGS or none
  Register 116 pref AREG, else GENERAL_REGS
  Register 117 pref AREG, else GENERAL_REGS
  Register 118 pref AREG, else GENERAL_REGS
  Register 119 pref GENERAL_REGS or none
  Register 120 pref GENERAL_REGS or none
  Register 121 pref GENERAL_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 124 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref GENERAL_REGS or none
  Register 128 pref GENERAL_REGS or none
  Register 129 pref GENERAL_REGS or none
  Register 130 pref GENERAL_REGS or none
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 134 pref GENERAL_REGS or none
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref GENERAL_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref GENERAL_REGS or none
  Register 140 pref GENERAL_REGS or none
  Register 141 pref GENERAL_REGS or none
  Register 142 pref GENERAL_REGS or none
  Register 143 pref GENERAL_REGS or none
  Register 144 pref GENERAL_REGS or none
  Register 145 pref GENERAL_REGS or none
  Register 146 pref GENERAL_REGS or none
  Register 147 pref GENERAL_REGS or none
  Register 148 pref GENERAL_REGS or none
  Register 149 pref GENERAL_REGS or none
  Register 150 pref GENERAL_REGS or none
  Register 151 pref GENERAL_REGS or none
  Register 152 pref GENERAL_REGS or none
  Register 153 pref GENERAL_REGS or none
  Register 154 pref GENERAL_REGS or none
  Register 155 pref GENERAL_REGS or none
  Register 156 pref GENERAL_REGS or none
  Register 157 pref GENERAL_REGS or none
  Register 158 pref GENERAL_REGS or none
  Register 159 pref GENERAL_REGS or none
  Register 160 pref GENERAL_REGS or none
  Register 161 pref GENERAL_REGS or none
  Register 162 pref GENERAL_REGS or none
  Register 163 pref GENERAL_REGS or none
  Register 164 pref GENERAL_REGS or none
  Register 165 pref GENERAL_REGS or none
  Register 166 pref GENERAL_REGS or none
  Register 167 pref GENERAL_REGS or none
  Register 168 pref GENERAL_REGS or none
  Register 169 pref GENERAL_REGS or none
  Register 170 pref GENERAL_REGS or none
  Register 171 pref GENERAL_REGS or none
  Register 172 pref GENERAL_REGS or none
  Register 173 pref GENERAL_REGS or none
  Register 174 pref GENERAL_REGS or none
  Register 175 pref GENERAL_REGS or none
  Register 176 pref GENERAL_REGS or none
  Register 177 pref GENERAL_REGS or none
  Register 178 pref GENERAL_REGS or none
  Register 179 pref GENERAL_REGS or none
  Register 180 pref GENERAL_REGS or none
  Register 181 pref GENERAL_REGS or none
  Register 182 pref GENERAL_REGS or none
  Register 183 pref GENERAL_REGS or none
  Register 184 pref GENERAL_REGS or none
  Register 185 pref GENERAL_REGS or none
  Register 186 pref GENERAL_REGS or none
  Register 187 pref GENERAL_REGS or none
  Register 188 pref GENERAL_REGS or none
  Register 189 pref GENERAL_REGS or none
  Register 190 pref GENERAL_REGS or none
  Register 191 pref GENERAL_REGS or none
  Register 192 pref GENERAL_REGS or none
  Register 193 pref GENERAL_REGS or none
  Register 194 pref GENERAL_REGS or none
  Register 195 pref GENERAL_REGS or none
  Register 196 pref GENERAL_REGS or none
  Register 197 pref GENERAL_REGS or none
  Register 198 pref GENERAL_REGS or none
  Register 199 pref GENERAL_REGS or none
  Register 200 pref GENERAL_REGS or none
  Register 201 pref GENERAL_REGS or none
  Register 202 pref FLOAT_INT_SSE_REGS or none
  Register 203 pref FLOAT_INT_SSE_REGS or none
  Register 204 pref GENERAL_REGS or none
205 registers.

Register 58 used 2 times across 2 insns in block 29; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 28; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 26; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 2 insns in block 25; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 65 used 2 times across 4 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 66 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 2 insns in block 24; set 1 time; pref AREG, else GENERAL_REGS.

Register 69 used 2 times across 2 insns in block 23; set 1 time; pref AREG, else GENERAL_REGS.

Register 70 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 4 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 22; set 1 time; pref AREG, else GENERAL_REGS.

Register 77 used 2 times across 2 insns in block 21; set 1 time; pref AREG, else GENERAL_REGS.

Register 78 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 79 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 80 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 81 used 2 times across 4 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 82 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 83 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none.

Register 84 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 85 used 2 times across 7 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 86 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 87 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 88 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 89 used 2 times across 4 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 90 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 91 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 4 insns in block 19; set 1 time; GENERAL_REGS or none.

Register 93 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 94 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 95 used 2 times across 4 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 96 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 97 used 2 times across 3 insns in block 13; set 1 time; pref AREG, else GENERAL_REGS.

Register 98 used 2 times across 6 insns in block 13; set 1 time; crosses 1 call; GENERAL_REGS or none.

Register 99 used 2 times across 2 insns in block 12; set 1 time; pref AREG, else GENERAL_REGS.

Register 100 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 101 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 102 used 2 times across 2 insns in block 9; set 1 time; pref AREG, else GENERAL_REGS.

Register 103 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 104 used 2 times across 3 insns in block 6; set 1 time; pref AREG, else GENERAL_REGS.

Register 105 used 2 times across 6 insns in block 6; set 1 time; crosses 1 call; GENERAL_REGS or none.

Register 106 used 2 times across 2 insns in block 5; set 1 time; pref AREG, else GENERAL_REGS.

Register 107 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 108 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 109 used 2 times across 3 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 110 used 2 times across 3 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 111 used 2 times across 3 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 112 used 2 times across 3 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 113 used 2 times across 2 insns in block 4; set 1 time; pref AREG, else GENERAL_REGS.

Register 114 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS.

Register 115 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 116 used 2 times across 2 insns in block 1; set 1 time; pref AREG, else GENERAL_REGS.

Register 117 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 118 used 2 times across 2 insns in block 29; set 1 time; pref AREG, else GENERAL_REGS.

Register 119 used 4 times across 5 insns in block 0; set 2 times; GENERAL_REGS or none; pointer.

Register 120 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 121 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 122 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 123 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 124 used 4 times across 4 insns in block 2; set 2 times; GENERAL_REGS or none; pointer.

Register 125 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 126 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 127 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 128 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 129 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 130 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 131 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 132 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 133 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 134 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 135 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 136 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 137 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 138 used 4 times across 4 insns in block 5; set 2 times; GENERAL_REGS or none; pointer.

Register 139 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 140 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 141 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 142 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 143 used 4 times across 4 insns in block 5; set 2 times; GENERAL_REGS or none; pointer.

Register 144 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 145 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 146 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 147 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 148 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 149 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 150 used 4 times across 4 insns in block 5; set 2 times; GENERAL_REGS or none; pointer.

Register 151 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 152 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 153 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 154 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 155 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 156 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 157 used 4 times across 4 insns in block 6; set 2 times; GENERAL_REGS or none; pointer.

Register 158 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 159 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 160 used 4 times across 4 insns in block 7; set 2 times; GENERAL_REGS or none; pointer.

Register 161 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 162 used 4 times across 4 insns in block 11; set 2 times; GENERAL_REGS or none; pointer.

Register 163 used 4 times across 4 insns in block 12; set 2 times; GENERAL_REGS or none; pointer.

Register 164 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 165 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 166 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 167 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 168 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 169 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none.

Register 170 used 4 times across 4 insns in block 13; set 2 times; GENERAL_REGS or none; pointer.

Register 171 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 172 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 173 used 4 times across 4 insns in block 14; set 2 times; GENERAL_REGS or none; pointer.

Register 174 used 4 times across 4 insns in block 15; set 2 times; GENERAL_REGS or none; pointer.

Register 175 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 176 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 177 used 4 times across 4 insns in block 17; set 2 times; GENERAL_REGS or none; pointer.

Register 178 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 179 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 180 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 181 used 4 times across 4 insns in block 19; set 2 times; GENERAL_REGS or none; pointer.

Register 182 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 183 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 184 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none.

Register 185 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 186 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 187 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 188 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 189 used 4 times across 4 insns in block 20; set 2 times; GENERAL_REGS or none; pointer.

Register 190 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 191 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 192 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none; pointer.

Register 193 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none; pointer.

Register 194 used 2 times across 2 insns in block 21; set 1 time; GENERAL_REGS or none; pointer.

Register 195 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 196 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none; pointer.

Register 197 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none; pointer.

Register 198 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 199 used 2 times across 2 insns in block 25; set 1 time; GENERAL_REGS or none; pointer.

Register 200 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none.

Register 201 used 2 times across 2 insns in block 28; set 1 time; GENERAL_REGS or none; pointer.

Register 204 used 3 times across 2 insns in block 27; set 1 time; GENERAL_REGS or none; pointer.

30 basic blocks, 47 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  2 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  0 1 (fallthru)
Successors:  3 (fallthru) 5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
Successors:  4 (fallthru) 5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  5 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  2 3 4 (fallthru)
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  7 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5 6 (fallthru)
Successors:  8 (fallthru) 9
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  7 (fallthru)
Successors:  9 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 0, count 0, freq 0.
Predecessors:  7 8 (fallthru)
Successors:  10 (fallthru) 11
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  9 (fallthru)
Successors:  11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  9 10 (fallthru)
Successors:  12 (fallthru) 14
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  11 (fallthru)
Successors:  13 (fallthru) 17
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  12 (fallthru)
Successors:  17
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  11
Successors:  15 (fallthru) 17
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 14, next 16, loop_depth 0, count 0, freq 0.
Predecessors:  14 (fallthru)
Successors:  16 (fallthru) 17
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 0, count 0, freq 0.
Predecessors:  15 (fallthru)
Successors:  17 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 17 prev 16, next 18, loop_depth 0, count 0, freq 0.
Predecessors:  13 14 15 16 (fallthru) 12
Successors:  18 (fallthru) 19
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 18 prev 17, next 19, loop_depth 0, count 0, freq 0.
Predecessors:  17 (fallthru)
Successors:  19 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 19 prev 18, next 20, loop_depth 0, count 0, freq 0.
Predecessors:  17 18 (fallthru)
Successors:  28
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 20 prev 19, next 21, loop_depth 1, count 0, freq 0.
Predecessors:  28
Successors:  21 (fallthru) 23
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 21 prev 20, next 22, loop_depth 1, count 0, freq 0.
Predecessors:  20 (fallthru)
Successors:  22 (fallthru) 27
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 22 prev 21, next 23, loop_depth 1, count 0, freq 0.
Predecessors:  21 (fallthru)
Successors:  27
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 23 prev 22, next 24, loop_depth 1, count 0, freq 0.
Predecessors:  20
Successors:  24 (fallthru) 25
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 24 prev 23, next 25, loop_depth 1, count 0, freq 0.
Predecessors:  23 (fallthru)
Successors:  25 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 25 prev 24, next 26, loop_depth 1, count 0, freq 0.
Predecessors:  23 24 (fallthru)
Successors:  26 (fallthru) 27
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 26 prev 25, next 27, loop_depth 1, count 0, freq 0.
Predecessors:  25 (fallthru)
Successors:  27 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 27 prev 26, next 28, loop_depth 1, count 0, freq 0.
Predecessors:  22 25 26 (fallthru) 21
Successors:  28 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 28 prev 27, next 29, loop_depth 1, count 0, freq 0.
Predecessors:  19 27 (fallthru)
Successors:  20 29 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 29 prev 28, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  28 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 1.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 1.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 1.
;; Register 82 in 0.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 1.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 1.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 1.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 1.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 4.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 4.
;; Register 106 in 0.
;; Register 107 in 0.
;; Register 108 in 0.
;; Register 109 in 0.
;; Register 110 in 0.
;; Register 111 in 0.
;; Register 112 in 0.
;; Register 113 in 0.
;; Register 114 in 0.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 0.
;; Register 120 in 1.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 0.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 0.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 0.
;; Register 135 in 0.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 0.
;; Register 140 in 0.
;; Register 141 in 0.
;; Register 142 in 0.
;; Register 143 in 0.
;; Register 144 in 0.
;; Register 145 in 0.
;; Register 146 in 0.
;; Register 147 in 0.
;; Register 148 in 0.
;; Register 149 in 0.
;; Register 150 in 0.
;; Register 151 in 0.
;; Register 152 in 0.
;; Register 153 in 0.
;; Register 154 in 0.
;; Register 155 in 0.
;; Register 156 in 0.
;; Register 157 in 0.
;; Register 158 in 0.
;; Register 159 in 0.
;; Register 160 in 0.
;; Register 161 in 0.
;; Register 162 in 0.
;; Register 163 in 0.
;; Register 164 in 0.
;; Register 165 in 0.
;; Register 166 in 0.
;; Register 167 in 0.
;; Register 168 in 0.
;; Register 169 in 0.
;; Register 170 in 0.
;; Register 171 in 0.
;; Register 172 in 0.
;; Register 173 in 0.
;; Register 174 in 0.
;; Register 175 in 0.
;; Register 176 in 0.
;; Register 177 in 0.
;; Register 178 in 0.
;; Register 179 in 0.
;; Register 180 in 0.
;; Register 181 in 0.
;; Register 182 in 0.
;; Register 183 in 0.
;; Register 184 in 0.
;; Register 185 in 0.
;; Register 186 in 0.
;; Register 187 in 0.
;; Register 188 in 0.
;; Register 189 in 0.
;; Register 190 in 0.
;; Register 191 in 0.
;; Register 192 in 0.
;; Register 193 in 0.
;; Register 194 in 0.
;; Register 195 in 0.
;; Register 196 in 0.
;; Register 197 in 0.
;; Register 198 in 0.
;; Register 199 in 0.
;; Register 200 in 0.
;; Register 201 in 0.
;; Register 204 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg/f:SI 119)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Interp$non_lazy_ptr") [flags 0x100] <var_decl 0x6cee80 Interp>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 9 8 10 0 (set (reg/f:SI 119)
        (mem/u/c:SI (reg/f:SI 119) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 9 11 0 (set (reg:SI 120 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 11 10 13 0 (set (mem/i:SI (reg/f:SI 119) [0 Interp+0 S4 A32])
        (reg:SI 120 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 120 [ interp ])
        (expr_list:REG_DEAD (reg/f:SI 119)
            (nil))))

(insn 13 11 14 0 (set (reg:SI 121 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 14 13 15 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 121 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 121 [ interp ])
        (nil)))

(call_insn 15 14 16 0 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Init$stub") <function_decl 0x607280 Tcl_Init>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 16 15 17 0 (set (reg:SI 117 [ D.14143 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 17 16 18 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 117 [ D.14143 ])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 117 [ D.14143 ])
        (nil)))

(jump_insn 18 17 20 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 20 18 22 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 22 20 23 1 (set (reg:SI 122 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 23 22 24 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 122 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 122 [ interp ])
        (nil)))

(call_insn 24 23 25 1 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 25 24 26 1 (set (reg:SI 116 [ D.14144 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 26 25 27 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 116 [ D.14144 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 116 [ D.14144 ])
        (nil)))

(insn 27 26 28 1 (set (reg/f:SI 123)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC1") [flags 0x2] <string_cst 0x880e00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 28 27 29 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 123)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 123)
        (nil)))

(call_insn 29 28 30 1 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 30 29 31 2 5 "" [1 uses])

(note 31 30 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 33 31 34 2 (set (reg/f:SI 124)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 34 33 35 2 (set (reg/f:SI 124)
        (mem/u/c:SI (reg/f:SI 124) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 35 34 36 2 (set (reg:SI 115 [ Batch.8 ])
        (mem/i:SI (reg/f:SI 124) [0 Batch+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 124)
        (nil)))

(insn 36 35 37 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 115 [ Batch.8 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 115 [ Batch.8 ])
        (nil)))

(jump_insn 37 36 39 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 58)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 39 37 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 41 39 42 3 (set (reg:SI 125 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 42 41 43 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 125 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 125 [ interp ])
        (nil)))

(call_insn 43 42 44 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tk_Init$stub") <function_decl 0x829a00 Tk_Init>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 44 43 45 3 (set (reg:SI 114 [ D.14146 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 45 44 46 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 114 [ D.14146 ])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 114 [ D.14146 ])
        (nil)))

(jump_insn 46 45 48 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 58)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 48 46 50 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 50 48 51 4 (set (reg:SI 126 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 51 50 52 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 126 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 126 [ interp ])
        (nil)))

(call_insn 52 51 53 4 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 53 52 54 4 (set (reg:SI 113 [ D.14147 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 54 53 55 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 113 [ D.14147 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 113 [ D.14147 ])
        (nil)))

(insn 55 54 56 4 (set (reg/f:SI 127)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC2") [flags 0x2] <string_cst 0x8998d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 56 55 57 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 127)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))

(call_insn 57 56 58 4 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 58 57 59 5 7 "" [2 uses])

(note 59 58 61 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 61 59 62 5 (set (reg/f:SI 128)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Gui$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2000 Gui>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 62 61 63 5 (set (reg/f:SI 112 [ Gui.9 ])
        (mem/u/c:SI (reg/f:SI 128) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 128)
        (expr_list:REG_EQUAL (symbol_ref:SI ("Gui") [flags 0xc0] <var_decl 0x6d2000 Gui>)
            (nil))))

(insn 63 62 64 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 64 63 65 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 112 [ Gui.9 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 112 [ Gui.9 ])
        (nil)))

(insn 65 64 66 5 (set (reg/f:SI 129)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC3") [flags 0x2] <string_cst 0x89a1e0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 66 65 67 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 129)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))

(insn 67 66 68 5 (set (reg:SI 130 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 68 67 69 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 130 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 130 [ interp ])
        (nil)))

(call_insn 69 68 71 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_LinkVar$stub") <function_decl 0x60a000 Tcl_LinkVar>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 71 69 72 5 (set (reg/f:SI 131)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 72 71 73 5 (set (reg/f:SI 111 [ Batch.10 ])
        (mem/u/c:SI (reg/f:SI 131) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 131)
        (expr_list:REG_EQUAL (symbol_ref:SI ("Batch") [flags 0xc0] <var_decl 0x6d2080 Batch>)
            (nil))))

(insn 73 72 74 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 74 73 75 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 111 [ Batch.10 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 111 [ Batch.10 ])
        (nil)))

(insn 75 74 76 5 (set (reg/f:SI 132)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC4") [flags 0x2] <string_cst 0x899c60>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 76 75 77 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 132)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 132)
        (nil)))

(insn 77 76 78 5 (set (reg:SI 133 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 78 77 79 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 133 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 133 [ interp ])
        (nil)))

(call_insn 79 78 81 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_LinkVar$stub") <function_decl 0x60a000 Tcl_LinkVar>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 81 79 82 5 (set (reg/f:SI 134)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Console$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2100 Console>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 82 81 83 5 (set (reg/f:SI 110 [ Console.11 ])
        (mem/u/c:SI (reg/f:SI 134) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 134)
        (expr_list:REG_EQUAL (symbol_ref:SI ("Console") [flags 0xc0] <var_decl 0x6d2100 Console>)
            (nil))))

(insn 83 82 84 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 84 83 85 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 110 [ Console.11 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 110 [ Console.11 ])
        (nil)))

(insn 85 84 86 5 (set (reg/f:SI 135)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC5") [flags 0x2] <string_cst 0x899e70>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 86 85 87 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 135)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 135)
        (nil)))

(insn 87 86 88 5 (set (reg:SI 136 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 88 87 89 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 136 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 136 [ interp ])
        (nil)))

(call_insn 89 88 91 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_LinkVar$stub") <function_decl 0x60a000 Tcl_LinkVar>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 91 89 92 5 (set (reg/f:SI 137)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC6") [flags 0x2] <string_cst 0x899fc0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 92 91 93 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 137)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))

(call_insn 93 92 95 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_eval$stub") <function_decl 0x6bf700 eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 95 93 96 5 (set (reg/f:SI 138)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 96 95 97 5 (set (reg/f:SI 138)
        (mem/u/c:SI (reg/f:SI 138) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 97 96 98 5 (set (reg:SI 109 [ RootDir.12 ])
        (mem/i:SI (reg/f:SI 138) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 138)
        (nil)))

(insn 98 97 99 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 99 98 100 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 109 [ RootDir.12 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 109 [ RootDir.12 ])
        (nil)))

(insn 100 99 101 5 (set (reg/f:SI 139)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC7") [flags 0x2] <string_cst 0x89d180>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 101 100 102 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 139)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))

(insn 102 101 103 5 (set (reg:SI 140 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 103 102 104 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 140 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 140 [ interp ])
        (nil)))

(call_insn 104 103 106 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_SetVar$stub") <function_decl 0x612c00 Tcl_SetVar>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 106 104 107 5 (set (reg/f:SI 141)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC8") [flags 0x2] <string_cst 0x89d2d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 107 106 108 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 141)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 141)
        (nil)))

(insn 108 107 109 5 (set (reg:SI 142 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 109 108 110 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 142 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 142 [ interp ])
        (nil)))

(call_insn 110 109 112 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Eval$stub") <function_decl 0x5fe580 Tcl_Eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 112 110 113 5 (set (reg/f:SI 143)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_VersionExt$non_lazy_ptr") [flags 0x100] <var_decl 0x6e1e00 VersionExt>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 113 112 114 5 (set (reg/f:SI 143)
        (mem/u/c:SI (reg/f:SI 143) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 114 113 115 5 (set (reg:SI 108 [ VersionExt.13 ])
        (mem/i:SI (reg/f:SI 143) [0 VersionExt+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 143)
        (nil)))

(insn 115 114 116 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 108 [ VersionExt.13 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 108 [ VersionExt.13 ])
        (nil)))

(insn 116 115 117 5 (set (reg/f:SI 144)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC9") [flags 0x2] <string_cst 0x89a300>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 117 116 118 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 144)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 144)
        (nil)))

(insn 118 117 119 5 (set (reg/f:SI 145)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC10") [flags 0x2] <string_cst 0x89d570>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 119 118 120 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 145)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 145)
        (nil)))

(insn 120 119 121 5 (set (reg/f:SI 146)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Version") [flags 0x182] <var_decl 0x87ce00 Version>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 121 120 122 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 146)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 146)
        (nil)))

(call_insn 122 121 124 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 124 122 125 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 125 124 126 5 (set (reg/f:SI 147)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Version") [flags 0x182] <var_decl 0x87ce00 Version>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 126 125 127 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 147)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 147)
        (nil)))

(insn 127 126 128 5 (set (reg/f:SI 148)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC11") [flags 0x2] <string_cst 0x89d750>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 128 127 129 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 148)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))

(insn 129 128 130 5 (set (reg:SI 149 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 130 129 131 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 149 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 149 [ interp ])
        (nil)))

(call_insn 131 130 133 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_SetVar$stub") <function_decl 0x612c00 Tcl_SetVar>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 133 131 134 5 (set (reg/f:SI 150)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 134 133 135 5 (set (reg/f:SI 150)
        (mem/u/c:SI (reg/f:SI 150) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 135 134 136 5 (set (reg:SI 107 [ RootDir.14 ])
        (mem/i:SI (reg/f:SI 150) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 150)
        (nil)))

(insn 136 135 137 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 107 [ RootDir.14 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 107 [ RootDir.14 ])
        (nil)))

(insn 137 136 138 5 (set (reg/f:SI 151)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC12") [flags 0x2] <string_cst 0x89d960>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 138 137 139 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 151)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 151)
        (nil)))

(insn 139 138 140 5 (set (reg/f:SI 153)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 140 139 141 5 (set (reg:SI 152)
        (mem/u/c:SI (reg/f:SI 153) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 153)
        (nil)))

(insn 141 140 142 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 152)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 152)
        (nil)))

(call_insn 142 141 144 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 144 142 145 5 (set (reg/f:SI 155)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 145 144 146 5 (set (reg:SI 154)
        (mem/u/c:SI (reg/f:SI 155) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 155)
        (nil)))

(insn 146 145 147 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 154)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 154)
        (nil)))

(insn 147 146 148 5 (set (reg:SI 156 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 148 147 149 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 156 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 156 [ interp ])
        (nil)))

(call_insn 149 148 150 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_EvalFile$stub") <function_decl 0x5fe780 Tcl_EvalFile>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 150 149 151 5 (set (reg:SI 106 [ D.14154 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 151 150 152 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 106 [ D.14154 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 106 [ D.14154 ])
        (nil)))

(jump_insn 152 151 154 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 168)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 154 152 156 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 156 154 157 6 (set (reg/f:SI 157)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 157 156 158 6 (set (reg/f:SI 157)
        (mem/u/c:SI (reg/f:SI 157) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 158 157 159 6 (set (reg:SI 105 [ RootDir.15 ])
        (mem/i:SI (reg/f:SI 157) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 157)
        (nil)))

(insn 159 158 160 6 (set (reg:SI 158 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 160 159 161 6 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 158 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 158 [ interp ])
        (nil)))

(call_insn 161 160 162 6 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 162 161 163 6 (set (reg:SI 104 [ D.14156 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 163 162 164 6 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 105 [ RootDir.15 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 105 [ RootDir.15 ])
        (nil)))

(insn 164 163 165 6 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 104 [ D.14156 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 104 [ D.14156 ])
        (nil)))

(insn 165 164 166 6 (set (reg/f:SI 159)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC13") [flags 0x2] <string_cst 0x891080>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 166 165 167 6 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 159)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 159)
        (nil)))

(call_insn 167 166 168 6 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 168 167 169 7 10 "" [1 uses])

(note 169 168 171 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(call_insn 171 169 173 7 (call (mem/u/c:QI (symbol_ref:SI ("&L_registerCommands$stub") <function_decl 0x72d980 registerCommands>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(call_insn 173 171 175 7 (call (mem/u/c:QI (symbol_ref:SI ("&L_registerAlgorithms$stub") <function_decl 0x738180 registerAlgorithms>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(call_insn 175 173 177 7 (call (mem/u/c:QI (symbol_ref:SI ("&L_createObjects$stub") <function_decl 0x6ddb00 createObjects>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 177 175 178 7 (set (reg/f:SI 160)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 178 177 179 7 (set (reg/f:SI 160)
        (mem/u/c:SI (reg/f:SI 160) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 179 178 180 7 (set (reg:SI 103 [ Batch.16 ])
        (mem/i:SI (reg/f:SI 160) [0 Batch+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 160)
        (nil)))

(insn 180 179 181 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 103 [ Batch.16 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 103 [ Batch.16 ])
        (nil)))

(jump_insn 181 180 183 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 185)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 183 181 184 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(call_insn 184 183 185 8 (call (mem/u/c:QI (symbol_ref:SI ("&L_createCanvRectType$stub") <function_decl 0x737500 createCanvRectType>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 185 184 186 9 12 "" [1 uses])

(note 186 185 188 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(call_insn 188 186 189 9 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_userInit$stub") <function_decl 0x6e4100 userInit>) [0 S1 A8])
            (const_int 0 [0x0]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 189 188 190 9 (set (reg:SI 102 [ D.14158 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 190 189 191 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 102 [ D.14158 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 102 [ D.14158 ])
        (nil)))

(jump_insn 191 190 193 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 197)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 193 191 194 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 10 (set (reg/f:SI 161)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC14") [flags 0x2] <string_cst 0x8910c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 195 194 196 10 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 161)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 161)
        (nil)))

(call_insn 196 195 197 10 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 197 196 198 11 14 "" [1 uses])

(note 198 197 200 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(call_insn 200 198 202 11 (call (mem/u/c:QI (symbol_ref:SI ("&L_initObjects$stub") <function_decl 0x6ddc80 initObjects>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 202 200 203 11 (set (reg/f:SI 162)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Gui$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2000 Gui>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 203 202 204 11 (set (reg/f:SI 162)
        (mem/u/c:SI (reg/f:SI 162) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 204 203 205 11 (set (reg:SI 101 [ Gui.17 ])
        (mem/i:SI (reg/f:SI 162) [0 Gui+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 162)
        (nil)))

(insn 205 204 206 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 101 [ Gui.17 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 101 [ Gui.17 ])
        (nil)))

(jump_insn 206 205 208 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 247)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 208 206 210 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 210 208 211 12 (set (reg/f:SI 163)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 211 210 212 12 (set (reg/f:SI 163)
        (mem/u/c:SI (reg/f:SI 163) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 212 211 213 12 (set (reg:SI 100 [ RootDir.18 ])
        (mem/i:SI (reg/f:SI 163) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 163)
        (nil)))

(insn 213 212 214 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 100 [ RootDir.18 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 100 [ RootDir.18 ])
        (nil)))

(insn 214 213 215 12 (set (reg/f:SI 164)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC15") [flags 0x2] <string_cst 0x89f5a0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 215 214 216 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 164)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 164)
        (nil)))

(insn 216 215 217 12 (set (reg/f:SI 166)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 217 216 218 12 (set (reg:SI 165)
        (mem/u/c:SI (reg/f:SI 166) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 166)
        (nil)))

(insn 218 217 219 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 165)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 165)
        (nil)))

(call_insn 219 218 221 12 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 221 219 222 12 (set (reg/f:SI 168)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 222 221 223 12 (set (reg:SI 167)
        (mem/u/c:SI (reg/f:SI 168) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 168)
        (nil)))

(insn 223 222 224 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 167)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 167)
        (nil)))

(insn 224 223 225 12 (set (reg:SI 169 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 225 224 226 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 169 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 169 [ interp ])
        (nil)))

(call_insn 226 225 227 12 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_EvalFile$stub") <function_decl 0x5fe780 Tcl_EvalFile>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 227 226 228 12 (set (reg:SI 99 [ D.14161 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 228 227 229 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 99 [ D.14161 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 99 [ D.14161 ])
        (nil)))

(jump_insn 229 228 231 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 274)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 231 229 233 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 233 231 234 13 (set (reg/f:SI 170)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 234 233 235 13 (set (reg/f:SI 170)
        (mem/u/c:SI (reg/f:SI 170) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 235 234 236 13 (set (reg:SI 98 [ RootDir.19 ])
        (mem/i:SI (reg/f:SI 170) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 170)
        (nil)))

(insn 236 235 237 13 (set (reg:SI 171 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 237 236 238 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 171 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 171 [ interp ])
        (nil)))

(call_insn 238 237 239 13 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 239 238 240 13 (set (reg:SI 97 [ D.14163 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 240 239 241 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 98 [ RootDir.19 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 98 [ RootDir.19 ])
        (nil)))

(insn 241 240 242 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 97 [ D.14163 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 97 [ D.14163 ])
        (nil)))

(insn 242 241 243 13 (set (reg/f:SI 172)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC16") [flags 0x2] <string_cst 0x898300>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 243 242 244 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 172)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 172)
        (nil)))

(call_insn 244 243 245 13 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 245 244 246 13 (set (pc)
        (label_ref 274)) 517 {jump} (nil)
    (nil))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 246 245 247)

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 247 246 248 14 16 "" [1 uses])

(note 248 247 250 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 250 248 251 14 (set (reg/f:SI 173)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 251 250 252 14 (set (reg/f:SI 173)
        (mem/u/c:SI (reg/f:SI 173) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 252 251 253 14 (set (reg:SI 96 [ Batch.20 ])
        (mem/i:SI (reg/f:SI 173) [0 Batch+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 173)
        (nil)))

(insn 253 252 254 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ Batch.20 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 96 [ Batch.20 ])
        (nil)))

(jump_insn 254 253 256 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 274)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 256 254 258 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 258 256 259 15 (set (reg/f:SI 174)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Interp$non_lazy_ptr") [flags 0x100] <var_decl 0x6cee80 Interp>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 259 258 260 15 (set (reg/f:SI 174)
        (mem/u/c:SI (reg/f:SI 174) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 260 259 261 15 (set (reg:SI 95 [ Interp.21 ])
        (mem/i:SI (reg/f:SI 174) [0 Interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 174)
        (nil)))

(insn 261 260 262 15 (set (reg/f:SI 175)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC17") [flags 0x2] <string_cst 0x89fdb0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 262 261 263 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 175)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 175)
        (nil)))

(insn 263 262 264 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 95 [ Interp.21 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 95 [ Interp.21 ])
        (nil)))

(call_insn 264 263 265 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Eval$stub") <function_decl 0x5fe580 Tcl_Eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 265 264 266 15 (set (reg:SI 94 [ D.14166 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 266 265 267 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 94 [ D.14166 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 94 [ D.14166 ])
        (nil)))

(jump_insn 267 266 269 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 274)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 269 267 271 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 271 269 272 16 (set (reg/f:SI 176)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC18") [flags 0x2] <string_cst 0x891100>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 272 271 273 16 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 176)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 176)
        (nil)))

(call_insn 273 272 274 16 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 274 273 275 17 18 "" [4 uses])

(note 275 274 277 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 277 275 278 17 (set (reg/f:SI 177)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Console$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2100 Console>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 278 277 279 17 (set (reg/f:SI 177)
        (mem/u/c:SI (reg/f:SI 177) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 279 278 280 17 (set (reg:SI 93 [ Console.22 ])
        (mem/i:SI (reg/f:SI 177) [0 Console+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 177)
        (nil)))

(insn 280 279 281 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 93 [ Console.22 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 93 [ Console.22 ])
        (nil)))

(jump_insn 281 280 283 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 286)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 283 281 284 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 284 283 285 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 285 284 286 18 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_createConsole$stub") <function_decl 0x72e880 createConsole>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 19, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 286 285 287 19 22 "" [1 uses])

(note 287 286 289 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 289 287 290 19 (set (reg/f:SI 178)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Version") [flags 0x182] <var_decl 0x87ce00 Version>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 290 289 291 19 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 178)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 178)
        (nil)))

(insn 291 290 292 19 (set (reg/f:SI 179)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC19") [flags 0x2] <string_cst 0x88a800>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 292 291 293 19 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 179)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 179)
        (nil)))

(insn 293 292 294 19 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 294 293 296 19 (call (mem/u/c:QI (symbol_ref:SI ("&L_print$stub") <function_decl 0x6bec80 print>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 296 294 297 19 (set (reg/f:SI 180)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC20") [flags 0x2] <string_cst 0x898380>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 297 296 298 19 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 180)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 180)
        (nil)))

(call_insn 298 297 300 19 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_eval$stub") <function_decl 0x6bf700 eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 300 298 301 19 (set (reg/f:SI 181)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Interp$non_lazy_ptr") [flags 0x100] <var_decl 0x6cee80 Interp>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 301 300 302 19 (set (reg/f:SI 181)
        (mem/u/c:SI (reg/f:SI 181) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 302 301 303 19 (set (reg:SI 92 [ Interp.23 ])
        (mem/i:SI (reg/f:SI 181) [0 Interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 181)
        (nil)))

(insn 303 302 304 19 (set (reg/f:SI 182)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC21") [flags 0x2] <string_cst 0x8a34b0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 304 303 305 19 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 182)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 182)
        (nil)))

(insn 305 304 306 19 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 92 [ Interp.23 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 92 [ Interp.23 ])
        (nil)))

(call_insn 306 305 308 19 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Eval$stub") <function_decl 0x5fe580 Tcl_Eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 308 306 309 19 (set (reg/f:SI 183)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("FirstCommand") [flags 0x182] <var_decl 0x87cb80 FirstCommand>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 309 308 310 19 (set (reg:SI 184 [ FirstCommand ])
        (mem/i:SI (reg/f:SI 183) [0 FirstCommand+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 183)
        (nil)))

(insn 310 309 452 19 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])
        (reg:SI 184 [ FirstCommand ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 184 [ FirstCommand ])
        (nil)))

(note 452 310 311 19 NOTE_INSN_LOOP_BEG)

(jump_insn 311 452 312 19 (set (pc)
        (label_ref 425)) 517 {jump} (nil)
    (nil))
;; End of basic block 19, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 312 311 313)

;; Start of basic block 20, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 313 312 314 20 25 "" [1 uses])

(note 314 313 316 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 316 314 317 20 (set (reg:SI 91 [ arg.24 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 317 316 318 20 (parallel [
            (set (reg:SI 90 [ D.14170 ])
                (ashift:SI (reg:SI 91 [ arg.24 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 91 [ arg.24 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 318 317 319 20 (set (reg:SI 89 [ D.14171 ])
        (reg:SI 90 [ D.14170 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 90 [ D.14170 ])
        (nil)))

(insn 319 318 320 20 (set (reg/f:SI 185)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argv") [flags 0x182] <var_decl 0x87cc80 Argv>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 320 319 321 20 (set (reg:SI 88 [ Argv.25 ])
        (mem/i:SI (reg/f:SI 185) [0 Argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 185)
        (nil)))

(insn 321 320 322 20 (parallel [
            (set (reg:SI 87 [ D.14173 ])
                (plus:SI (reg:SI 89 [ D.14171 ])
                    (reg:SI 88 [ Argv.25 ])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 89 [ D.14171 ])
            (expr_list:REG_DEAD (reg:SI 88 [ Argv.25 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 322 321 323 20 (set (reg:SI 86 [ D.14174 ])
        (mem/f:SI (reg:SI 87 [ D.14173 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 87 [ D.14173 ])
        (nil)))

(insn 323 322 324 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 86 [ D.14174 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 86 [ D.14174 ])
        (nil)))

(insn 324 323 325 20 (set (reg/f:SI 186)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC22") [flags 0x2] <string_cst 0x8a38a0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 325 324 326 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 186)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 186)
        (nil)))

(insn 326 325 327 20 (set (reg/f:SI 188)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 327 326 328 20 (set (reg:SI 187)
        (mem/u/c:SI (reg/f:SI 188) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 188)
        (nil)))

(insn 328 327 329 20 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 187)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 187)
        (nil)))

(call_insn 329 328 331 20 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 331 329 332 20 (set (reg/f:SI 189)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Interp$non_lazy_ptr") [flags 0x100] <var_decl 0x6cee80 Interp>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 332 331 333 20 (set (reg/f:SI 189)
        (mem/u/c:SI (reg/f:SI 189) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 333 332 334 20 (set (reg:SI 85 [ Interp.26 ])
        (mem/i:SI (reg/f:SI 189) [0 Interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 189)
        (nil)))

(insn 334 333 335 20 (parallel [
            (set (reg/f:SI 190)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 335 334 336 20 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 190)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 190)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))

(insn 336 335 337 20 (set (reg/f:SI 192)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 337 336 338 20 (set (reg:SI 191)
        (mem/u/c:SI (reg/f:SI 192) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 192)
        (nil)))

(insn 338 337 339 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 191)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 191)
        (nil)))

(insn 339 338 340 20 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 85 [ Interp.26 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 85 [ Interp.26 ])
        (nil)))

(call_insn 340 339 342 20 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_ExprBoolean$stub") <function_decl 0x5ff200 Tcl_ExprBoolean>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 342 340 343 20 (set (reg:SI 84 [ isScript.27 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 isScript+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 343 342 344 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ isScript.27 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ isScript.27 ])
        (nil)))

(jump_insn 344 343 346 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 372)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 20, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 21, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 346 344 348 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 348 346 349 21 (set (reg:SI 83 [ arg.28 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 349 348 350 21 (parallel [
            (set (reg:SI 82 [ D.14178 ])
                (ashift:SI (reg:SI 83 [ arg.28 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 83 [ arg.28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 350 349 351 21 (set (reg:SI 81 [ D.14179 ])
        (reg:SI 82 [ D.14178 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 82 [ D.14178 ])
        (nil)))

(insn 351 350 352 21 (set (reg/f:SI 193)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argv") [flags 0x182] <var_decl 0x87cc80 Argv>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 352 351 353 21 (set (reg:SI 80 [ Argv.29 ])
        (mem/i:SI (reg/f:SI 193) [0 Argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 193)
        (nil)))

(insn 353 352 354 21 (parallel [
            (set (reg:SI 79 [ D.14181 ])
                (plus:SI (reg:SI 81 [ D.14179 ])
                    (reg:SI 80 [ Argv.29 ])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 81 [ D.14179 ])
            (expr_list:REG_DEAD (reg:SI 80 [ Argv.29 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 354 353 355 21 (set (reg:SI 78 [ D.14182 ])
        (mem/f:SI (reg:SI 79 [ D.14181 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 79 [ D.14181 ])
        (nil)))

(insn 355 354 356 21 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 78 [ D.14182 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78 [ D.14182 ])
        (nil)))

(insn 356 355 357 21 (set (reg/f:SI 194)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC23") [flags 0x2] <string_cst 0x8a3e70>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 357 356 358 21 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 194)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 194)
        (nil)))

(call_insn 358 357 359 21 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_eval$stub") <function_decl 0x6bf700 eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 359 358 360 21 (set (reg:SI 77 [ D.14183 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 360 359 361 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 77 [ D.14183 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ D.14183 ])
        (nil)))

(jump_insn 361 360 363 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 421)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 21, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 22, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 363 361 364 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 364 363 365 22 (set (reg:SI 195 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 365 364 366 22 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 195 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 195 [ interp ])
        (nil)))

(call_insn 366 365 367 22 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 367 366 368 22 (set (reg:SI 76 [ D.14184 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 368 367 369 22 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 76 [ D.14184 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ D.14184 ])
        (nil)))

(call_insn 369 368 370 22 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_error$stub") <function_decl 0x6bf400 error>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(jump_insn 370 369 371 22 (set (pc)
        (label_ref 421)) 517 {jump} (nil)
    (nil))
;; End of basic block 22, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 371 370 372)

;; Start of basic block 23, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 372 371 373 23 26 "" [1 uses])

(note 373 372 375 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 375 373 376 23 (set (reg:SI 75 [ arg.30 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 376 375 377 23 (parallel [
            (set (reg:SI 74 [ D.14186 ])
                (ashift:SI (reg:SI 75 [ arg.30 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 75 [ arg.30 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 377 376 378 23 (set (reg:SI 73 [ D.14187 ])
        (reg:SI 74 [ D.14186 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.14186 ])
        (nil)))

(insn 378 377 379 23 (set (reg/f:SI 196)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argv") [flags 0x182] <var_decl 0x87cc80 Argv>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 379 378 380 23 (set (reg:SI 72 [ Argv.31 ])
        (mem/i:SI (reg/f:SI 196) [0 Argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 196)
        (nil)))

(insn 380 379 381 23 (parallel [
            (set (reg:SI 71 [ D.14189 ])
                (plus:SI (reg:SI 73 [ D.14187 ])
                    (reg:SI 72 [ Argv.31 ])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 73 [ D.14187 ])
            (expr_list:REG_DEAD (reg:SI 72 [ Argv.31 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 381 380 382 23 (set (reg:SI 70 [ D.14190 ])
        (mem/f:SI (reg:SI 71 [ D.14189 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ D.14189 ])
        (nil)))

(insn 382 381 383 23 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 70 [ D.14190 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.14190 ])
        (nil)))

(insn 383 382 384 23 (set (reg/f:SI 197)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC24") [flags 0x2] <string_cst 0x8a6360>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 384 383 385 23 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 197)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 197)
        (nil)))

(call_insn 385 384 386 23 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_eval$stub") <function_decl 0x6bf700 eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 386 385 387 23 (set (reg:SI 69 [ D.14191 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 387 386 388 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 69 [ D.14191 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ D.14191 ])
        (nil)))

(jump_insn 388 387 390 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 398)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 23, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 24, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 390 388 392 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 392 390 393 24 (set (reg:SI 198 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 393 392 394 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 198 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 198 [ interp ])
        (nil)))

(call_insn 394 393 395 24 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 395 394 396 24 (set (reg:SI 68 [ D.14192 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 396 395 397 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 68 [ D.14192 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.14192 ])
        (nil)))

(call_insn 397 396 398 24 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_error$stub") <function_decl 0x6bf400 error>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 24, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 25, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 398 397 399 25 30 "" [1 uses])

(note 399 398 401 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 401 399 402 25 (set (reg:SI 67 [ arg.32 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 402 401 403 25 (parallel [
            (set (reg:SI 66 [ D.14194 ])
                (ashift:SI (reg:SI 67 [ arg.32 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 67 [ arg.32 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 403 402 404 25 (set (reg:SI 65 [ D.14195 ])
        (reg:SI 66 [ D.14194 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.14194 ])
        (nil)))

(insn 404 403 405 25 (set (reg/f:SI 199)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argv") [flags 0x182] <var_decl 0x87cc80 Argv>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 405 404 406 25 (set (reg:SI 64 [ Argv.33 ])
        (mem/i:SI (reg/f:SI 199) [0 Argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 199)
        (nil)))

(insn 406 405 407 25 (parallel [
            (set (reg:SI 63 [ D.14197 ])
                (plus:SI (reg:SI 65 [ D.14195 ])
                    (reg:SI 64 [ Argv.33 ])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 65 [ D.14195 ])
            (expr_list:REG_DEAD (reg:SI 64 [ Argv.33 ])
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))

(insn 407 406 408 25 (set (reg:SI 62 [ D.14198 ])
        (mem/f:SI (reg:SI 63 [ D.14197 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.14197 ])
        (nil)))

(insn 408 407 409 25 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 62 [ D.14198 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.14198 ])
        (nil)))

(call_insn 409 408 410 25 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_eval$stub") <function_decl 0x6bf700 eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 410 409 411 25 (set (reg:SI 61 [ D.14199 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 411 410 412 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 61 [ D.14199 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.14199 ])
        (nil)))

(jump_insn 412 411 414 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 421)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 25, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 26, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 414 412 415 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 415 414 416 26 (set (reg:SI 200 [ interp ])
        (mem/f/i:SI (reg/f:SI 16 argp) [0 interp+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 416 415 417 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 200 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 200 [ interp ])
        (nil)))

(call_insn 417 416 418 26 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringResult$stub") <function_decl 0x606500 Tcl_GetStringResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 418 417 419 26 (set (reg:SI 60 [ D.14200 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 419 418 420 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 60 [ D.14200 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ D.14200 ])
        (nil)))

(call_insn 420 419 421 26 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_error$stub") <function_decl 0x6bf400 error>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 26, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 27, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 421 420 422 27 28 "" [3 uses])

(note 422 421 451 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 451 422 424 27 (parallel [
            (set (reg/f:SI 204)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 424 451 425 27 (parallel [
            (set (mem/i:SI (reg/f:SI 204) [0 arg+0 S4 A32])
                (plus:SI (mem/i:SI (reg/f:SI 204) [0 arg+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg/f:SI 204)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
;; End of basic block 27, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 28, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 425 424 426 28 24 "" [1 uses])

(note 426 425 427 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 427 426 428 28 (set (reg/f:SI 201)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argc") [flags 0x182] <var_decl 0x87cc00 Argc>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 428 427 429 28 (set (reg:SI 59 [ Argc.34 ])
        (mem/i:SI (reg/f:SI 201) [0 Argc+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 201)
        (nil)))

(insn 429 428 430 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])
            (reg:SI 59 [ Argc.34 ]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ Argc.34 ])
        (nil)))

(jump_insn 430 429 453 28 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 313)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
;; End of basic block 28, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 453 430 432 28 NOTE_INSN_LOOP_END)

;; Start of basic block 29, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 432 453 434 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 434 432 435 29 (set (reg:SI 58 [ D.14202 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 435 434 438 29 (set (reg:SI 118 [ <result> ])
        (reg:SI 58 [ D.14202 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.14202 ])
        (nil)))

(note 438 435 441 29 NOTE_INSN_FUNCTION_END)

(insn 441 438 447 29 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 118 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 118 [ <result> ])
        (nil)))

(insn 447 441 0 29 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 29, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Tcl_Main2



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000
  Register 80 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 84 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 87 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 88 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000
  Register 89 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 94 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 110 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 111 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 113 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 114 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 115 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 116 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 117 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 118 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 119 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 120 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 121 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 122 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 123 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 124 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 125 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 126 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 127 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 128 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 129 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 131 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 132 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 133 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 134 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 135 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 136 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 137 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 138 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 139 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 140 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 141 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 142 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 143 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 144 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 145 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 146 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 147 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref AREG, else GENERAL_REGS
  Register 63 pref AREG, else GENERAL_REGS
  Register 64 pref AREG, else GENERAL_REGS
  Register 65 pref AREG, else GENERAL_REGS
  Register 66 pref AREG, else GENERAL_REGS
  Register 67 pref AREG, else GENERAL_REGS
  Register 68 pref AREG, else GENERAL_REGS
  Register 69 pref AREG, else GENERAL_REGS
  Register 70 pref GENERAL_REGS or none
  Register 71 pref GENERAL_REGS or none
  Register 72 pref AREG, else GENERAL_REGS
  Register 73 pref AREG, else GENERAL_REGS
  Register 74 pref AREG, else GENERAL_REGS
  Register 75 pref AREG, else GENERAL_REGS
  Register 76 pref AREG, else GENERAL_REGS
  Register 77 pref AREG, else GENERAL_REGS
  Register 78 pref AREG, else GENERAL_REGS
  Register 79 pref GENERAL_REGS or none
  Register 80 pref AREG, else GENERAL_REGS
  Register 81 pref AREG, else GENERAL_REGS
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref AREG, else GENERAL_REGS
  Register 85 pref AREG, else GENERAL_REGS
  Register 86 pref AREG, else GENERAL_REGS
  Register 87 pref AREG, else GENERAL_REGS
  Register 88 pref GENERAL_REGS or none
  Register 89 pref AREG, else GENERAL_REGS
  Register 90 pref AREG, else GENERAL_REGS
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref GENERAL_REGS or none
  Register 98 pref GENERAL_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref GENERAL_REGS or none
  Register 101 pref GENERAL_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref GENERAL_REGS or none
  Register 111 pref GENERAL_REGS or none
  Register 112 pref GENERAL_REGS or none
  Register 113 pref GENERAL_REGS or none
  Register 114 pref GENERAL_REGS or none
  Register 115 pref GENERAL_REGS or none
  Register 116 pref GENERAL_REGS or none
  Register 117 pref GENERAL_REGS or none
  Register 118 pref GENERAL_REGS or none
  Register 119 pref GENERAL_REGS or none
  Register 120 pref GENERAL_REGS or none
  Register 121 pref GENERAL_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 124 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref GENERAL_REGS or none
  Register 128 pref GENERAL_REGS or none
  Register 129 pref GENERAL_REGS or none
  Register 130 pref GENERAL_REGS or none
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 134 pref GENERAL_REGS or none
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref GENERAL_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref GENERAL_REGS or none
  Register 140 pref GENERAL_REGS or none
  Register 141 pref GENERAL_REGS or none
  Register 142 pref GENERAL_REGS or none
  Register 143 pref GENERAL_REGS or none
  Register 144 pref GENERAL_REGS or none
  Register 145 pref GENERAL_REGS or none
  Register 146 pref GENERAL_REGS or none
  Register 147 pref GENERAL_REGS or none
148 registers.

Register 58 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 3 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 32; set 1 time; pref AREG, else GENERAL_REGS.

Register 63 used 2 times across 2 insns in block 30; set 1 time; pref AREG, else GENERAL_REGS.

Register 64 used 2 times across 2 insns in block 28; set 1 time; pref AREG, else GENERAL_REGS.

Register 65 used 2 times across 2 insns in block 28; set 1 time; pref AREG, else GENERAL_REGS.

Register 66 used 2 times across 2 insns in block 28; set 1 time; pref AREG, else GENERAL_REGS.

Register 67 used 2 times across 2 insns in block 28; set 1 time; pref AREG, else GENERAL_REGS.

Register 68 used 2 times across 2 insns in block 26; set 1 time; pref AREG, else GENERAL_REGS.

Register 69 used 2 times across 2 insns in block 24; set 1 time; pref AREG, else GENERAL_REGS.

Register 70 used 2 times across 2 insns in block 23; set 1 time; GENERAL_REGS or none.

Register 71 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 22; set 1 time; pref AREG, else GENERAL_REGS.

Register 73 used 2 times across 2 insns in block 17; set 1 time; pref AREG, else GENERAL_REGS.

Register 74 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 75 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 76 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 77 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 78 used 2 times across 2 insns in block 11; set 1 time; pref AREG, else GENERAL_REGS.

Register 79 used 3 times across 6 insns; set 2 times; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 2 insns in block 6; set 1 time; pref AREG, else GENERAL_REGS.

Register 81 used 2 times across 2 insns in block 6; set 1 time; pref AREG, else GENERAL_REGS.

Register 82 used 2 times across 3 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 83 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 84 used 2 times across 2 insns in block 6; set 1 time; pref AREG, else GENERAL_REGS.

Register 85 used 2 times across 2 insns in block 5; set 1 time; pref AREG, else GENERAL_REGS.

Register 86 used 2 times across 2 insns in block 4; set 1 time; pref AREG, else GENERAL_REGS.

Register 87 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS.

Register 88 used 3 times across 5 insns; set 2 times; GENERAL_REGS or none; pointer.

Register 89 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 90 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 91 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none; pointer.

Register 93 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 94 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 95 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 96 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 97 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 98 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 99 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 100 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 101 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 102 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 104 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 105 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 106 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 107 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 108 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 109 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 110 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 111 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 112 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 113 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 114 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 115 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 116 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 117 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 118 used 2 times across 2 insns in block 22; set 1 time; GENERAL_REGS or none.

Register 119 used 2 times across 2 insns in block 24; set 1 time; GENERAL_REGS or none.

Register 120 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none; pointer.

Register 121 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none.

Register 122 used 2 times across 2 insns in block 26; set 1 time; GENERAL_REGS or none.

Register 123 used 2 times across 2 insns in block 28; set 1 time; GENERAL_REGS or none.

Register 124 used 2 times across 2 insns in block 28; set 1 time; GENERAL_REGS or none.

Register 125 used 2 times across 2 insns in block 28; set 1 time; GENERAL_REGS or none.

Register 126 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none.

Register 127 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none.

Register 128 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none; pointer.

Register 129 used 2 times across 2 insns in block 30; set 1 time; GENERAL_REGS or none.

Register 130 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 131 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none; pointer.

Register 132 used 2 times across 2 insns in block 32; set 1 time; GENERAL_REGS or none.

Register 133 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none.

Register 134 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none.

Register 135 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none; pointer.

Register 136 used 2 times across 2 insns in block 34; set 1 time; GENERAL_REGS or none.

Register 137 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none; pointer.

Register 138 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none; pointer.

Register 139 used 2 times across 2 insns in block 36; set 1 time; GENERAL_REGS or none; pointer.

Register 140 used 2 times across 2 insns in block 37; set 1 time; GENERAL_REGS or none.

Register 141 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 142 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none; pointer.

Register 143 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 144 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none; pointer.

Register 145 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

Register 146 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none; pointer.

Register 147 used 2 times across 2 insns in block 38; set 1 time; GENERAL_REGS or none.

41 basic blocks, 66 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru) 2
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  3
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

Basic block 2 prev 1, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  0
Successors:  3 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

Basic block 3 prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  1 2 (fallthru)
Successors:  4 (fallthru) 6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  5 (fallthru) 6
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  4 (fallthru)
Successors:  6 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  3 4 5 (fallthru)
Successors:  40
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 40, loop_depth 1, count 0, freq 0.
Predecessors:  29 27 22 34 33 32 31 30
Successors:  40 [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 40 prev 7, next 8, loop_depth 1, count 0, freq 0.
Predecessors:  7 [100.0%]  (fallthru) 6
Successors:  8 (fallthru) 21
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 40, next 9, loop_depth 1, count 0, freq 0.
Predecessors:  40 (fallthru)
Successors:  9 (fallthru) 10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  8 (fallthru)
Successors:  11
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79

Basic block 10 prev 9, next 11, loop_depth 1, count 0, freq 0.
Predecessors:  8
Successors:  11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79

Basic block 11 prev 10, next 12, loop_depth 1, count 0, freq 0.
Predecessors:  9 10 (fallthru)
Successors:  12 (fallthru) 15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 1, count 0, freq 0.
Predecessors:  11 (fallthru) 18
Successors:  13 (fallthru) 19
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 1, count 0, freq 0.
Predecessors:  12 (fallthru)
Successors:  14 (fallthru) 19
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 19, loop_depth 1, count 0, freq 0.
Predecessors:  13 (fallthru)
Successors:  19 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 19 prev 14, next 39, loop_depth 1, count 0, freq 0.
Predecessors:  13 15 12 14 (fallthru)
Successors:  39 (fallthru) 21
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 39 prev 19, next 15, loop_depth 1, count 0, freq 0.
Predecessors:  19 (fallthru)
Successors:  20 [100.0%] 
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 39, next 16, loop_depth 1, count 0, freq 0.
Predecessors:  11
Successors:  16 (fallthru) 19
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 1, count 0, freq 0.
Predecessors:  15 (fallthru)
Successors:  17 (fallthru) 18
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 17 prev 16, next 18, loop_depth 1, count 0, freq 0.
Predecessors:  16 (fallthru)
Successors:  18 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 18 prev 17, next 20, loop_depth 1, count 0, freq 0.
Predecessors:  16 17 (fallthru)
Successors:  12
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 20 prev 18, next 21, loop_depth 1, count 0, freq 0.
Predecessors:  39 [100.0%] 
Successors:  21 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 21 prev 20, next 22, loop_depth 1, count 0, freq 0.
Predecessors:  40 19 20 (fallthru)
Successors:  35 22 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 22 prev 21, next 23, loop_depth 1, count 0, freq 0.
Predecessors:  21 (fallthru)
Successors:  7 23 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 23 prev 22, next 24, loop_depth 1, count 0, freq 0.
Predecessors:  22 (fallthru)
Successors:  24 (fallthru) 26
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 24 prev 23, next 25, loop_depth 1, count 0, freq 0.
Predecessors:  23 (fallthru)
Successors:  25 (fallthru) 26
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 25 prev 24, next 26, loop_depth 1, count 0, freq 0.
Predecessors:  24 (fallthru)
Successors:  35 26 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 26 prev 25, next 27, loop_depth 1, count 0, freq 0.
Predecessors:  23 24 25 (fallthru)
Successors:  27 (fallthru) 28
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 27 prev 26, next 28, loop_depth 1, count 0, freq 0.
Predecessors:  26 (fallthru)
Successors:  7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 28 prev 27, next 29, loop_depth 1, count 0, freq 0.
Predecessors:  26
Successors:  29 (fallthru) 31
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 29 prev 28, next 30, loop_depth 1, count 0, freq 0.
Predecessors:  28 (fallthru)
Successors:  30 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 30 prev 29, next 31, loop_depth 1, count 0, freq 0.
Predecessors:  29 (fallthru)
Successors:  7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 31 prev 30, next 32, loop_depth 1, count 0, freq 0.
Predecessors:  28
Successors:  32 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 32 prev 31, next 33, loop_depth 1, count 0, freq 0.
Predecessors:  31 (fallthru)
Successors:  33 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 33 prev 32, next 34, loop_depth 1, count 0, freq 0.
Predecessors:  32 (fallthru)
Successors:  34 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 34 prev 33, next 35, loop_depth 1, count 0, freq 0.
Predecessors:  33 (fallthru)
Successors:  7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 35 prev 34, next 36, loop_depth 0, count 0, freq 0.
Predecessors:  21 25
Successors:  36 (fallthru) 38
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 36 prev 35, next 37, loop_depth 0, count 0, freq 0.
Predecessors:  35 (fallthru)
Successors:  37 (fallthru) 38
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 37 prev 36, next 38, loop_depth 0, count 0, freq 0.
Predecessors:  36 (fallthru)
Successors:  38 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 38 prev 37, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  35 36 37 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 1.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 0.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 1.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 89 in 0.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 0.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 0.
;; Register 107 in 0.
;; Register 108 in 0.
;; Register 109 in 0.
;; Register 110 in 0.
;; Register 111 in 0.
;; Register 112 in 0.
;; Register 113 in 0.
;; Register 114 in 0.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 0.
;; Register 120 in 0.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 0.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 0.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 0.
;; Register 135 in 0.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 0.
;; Register 140 in 0.
;; Register 141 in 0.
;; Register 142 in 0.
;; Register 143 in 0.
;; Register 144 in 0.
;; Register 145 in 0.
;; Register 146 in 0.
;; Register 147 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 10 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 10 8 12 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 exitCode+0 S4 A64])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 12 10 13 0 (set (reg/f:SI 92 [ argv ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 13 12 14 0 (set (reg:SI 91 [ D.14259 ])
        (mem/f:SI (reg/f:SI 92 [ argv ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 92 [ argv ])
        (nil)))

(insn 14 13 15 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 91 [ D.14259 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 91 [ D.14259 ])
        (nil)))

(call_insn 15 14 17 0 (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_FindExecutable$stub") <function_decl 0x601600 Tcl_FindExecutable>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(call_insn 17 15 18 0 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_CreateInterp$stub") <function_decl 0x5f6a80 Tcl_CreateInterp>) [0 S1 A8])
            (const_int 0 [0x0]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 18 17 19 0 (set (reg:SI 90 [ D.14260 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 19 18 21 0 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])
        (reg:SI 90 [ D.14260 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 90 [ D.14260 ])
        (nil)))

(insn 21 19 22 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 22 21 23 0 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_isatty$stub") <function_decl 0x54ee00 isatty>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 23 22 24 0 (set (reg:SI 89 [ D.14261 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 24 23 26 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 tty+0 S4 A32])
        (reg:SI 89 [ D.14261 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 89 [ D.14261 ])
        (nil)))

(insn 26 24 27 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 tty+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 27 26 29 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 29 27 30 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 1 (set (reg/f:SI 88 [ iftmp.35 ])
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC25") [flags 0x2] <string_cst 0x8bee40>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (expr_list:REG_EQUAL (symbol_ref/f:SI ("*LC25") [flags 0x2] <string_cst 0x8bee40>)
        (nil)))

(jump_insn 31 30 32 1 (set (pc)
        (label_ref 36)) 517 {jump} (nil)
    (nil))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 32 31 33)

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 33 32 34 2 37 "" [1 uses])

(note 34 33 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 36 2 (set (reg/f:SI 88 [ iftmp.35 ])
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC26") [flags 0x2] <string_cst 0x8bee80>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (expr_list:REG_EQUAL (symbol_ref/f:SI ("*LC26") [flags 0x2] <string_cst 0x8bee80>)
        (nil)))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
(code_label 36 35 37 3 39 "" [1 uses])

(note 37 36 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 39 38 40 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 88 [ iftmp.35 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 88 [ iftmp.35 ])
        (nil)))

(insn 40 39 41 3 (set (reg/f:SI 93)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC27") [flags 0x2] <string_cst 0x8c1ed0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 41 40 42 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 93)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 93)
        (nil)))

(insn 42 41 43 3 (set (reg:SI 94 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 43 42 44 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 94 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 94 [ interp ])
        (nil)))

(call_insn 44 43 46 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_SetVar$stub") <function_decl 0x612c00 Tcl_SetVar>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 46 44 47 3 (set (reg:SI 95 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 47 46 48 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 95 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 95 [ interp ])
        (nil)))

(insn 48 47 49 3 (set (reg/f:SI 96 [ appInitProc ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [0 appInitProc+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 49 48 50 3 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 96 [ appInitProc ]) [0 S1 A8])
            (const_int 16 [0x10]))) 694 {*call_value_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 96 [ appInitProc ])
        (nil))
    (nil))

(insn 50 49 51 3 (set (reg:SI 87 [ D.14263 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 51 50 52 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ D.14263 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 87 [ D.14263 ])
        (nil)))

(jump_insn 52 51 54 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 54 52 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 56 54 57 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 57 56 58 4 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 58 57 59 4 (set (reg:SI 86 [ D.14264 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 59 58 61 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])
        (reg:SI 86 [ D.14264 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 86 [ D.14264 ])
        (nil)))

(insn 61 59 62 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 62 61 64 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 64 62 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 66 64 67 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) 41 {*movsi_1} (nil)
    (nil))

(insn 67 66 68 5 (set (reg/f:SI 97)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC28") [flags 0x2] <string_cst 0x8c0200>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 68 67 69 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 97)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 97)
        (nil)))

(insn 69 68 70 5 (set (reg:SI 98 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 70 69 71 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 98 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 98 [ errChannel ])
        (nil)))

(call_insn 71 70 73 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteChars$stub") <function_decl 0x626d80 Tcl_WriteChars>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 73 71 74 5 (set (reg:SI 99 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 74 73 75 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 99 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 99 [ interp ])
        (nil)))

(call_insn 75 74 76 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetObjResult$stub") <function_decl 0x605580 Tcl_GetObjResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 76 75 77 5 (set (reg:SI 85 [ D.14265 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 77 76 78 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 85 [ D.14265 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 85 [ D.14265 ])
        (nil)))

(insn 78 77 79 5 (set (reg:SI 100 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 79 78 80 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 100 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 100 [ errChannel ])
        (nil)))

(call_insn 80 79 82 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteObj$stub") <function_decl 0x626f80 Tcl_WriteObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 82 80 83 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 83 82 84 5 (set (reg/f:SI 101)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC29") [flags 0x2] <string_cst 0x8bef20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 84 83 85 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 101)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 101)
        (nil)))

(insn 85 84 86 5 (set (reg:SI 102 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 86 85 87 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 102 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 102 [ errChannel ])
        (nil)))

(call_insn 87 86 88 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteChars$stub") <function_decl 0x626d80 Tcl_WriteChars>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 88 87 89 6 40 "" [2 uses])

(note 89 88 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(call_insn 91 89 92 6 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_NewObj$stub") <function_decl 0x5eee00 Tcl_NewObj>) [0 S1 A8])
            (const_int 0 [0x0]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 92 91 93 6 (set (reg:SI 84 [ D.14266 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 93 92 95 6 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])
        (reg:SI 84 [ D.14266 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ D.14266 ])
        (nil)))

(insn 95 93 96 6 (set (reg/f:SI 103 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 96 95 97 6 (set (reg:SI 83 [ D.14267 ])
        (mem/s/j:SI (reg/f:SI 103 [ commandPtr ]) [0 <variable>.refCount+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 103 [ commandPtr ])
        (nil)))

(insn 97 96 98 6 (parallel [
            (set (reg:SI 82 [ D.14268 ])
                (plus:SI (reg:SI 83 [ D.14267 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 83 [ D.14267 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 98 97 99 6 (set (reg/f:SI 104 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 99 98 101 6 (set (mem/s/j:SI (reg/f:SI 104 [ commandPtr ]) [0 <variable>.refCount+0 S4 A32])
        (reg:SI 82 [ D.14268 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 82 [ D.14268 ])
        (expr_list:REG_DEAD (reg/f:SI 104 [ commandPtr ])
            (nil))))

(insn 101 99 102 6 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 102 101 103 6 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 103 102 104 6 (set (reg:SI 81 [ D.14269 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 104 103 106 6 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 inChannel+0 S4 A32])
        (reg:SI 81 [ D.14269 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 81 [ D.14269 ])
        (nil)))

(insn 106 104 107 6 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 107 106 108 6 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 108 107 109 6 (set (reg:SI 80 [ D.14270 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 109 108 111 6 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])
        (reg:SI 80 [ D.14270 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 80 [ D.14270 ])
        (nil)))

(insn 111 109 462 6 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 gotPartial+0 S4 A128])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(note 462 111 460 6 NOTE_INSN_LOOP_BEG)

(jump_insn 460 462 461 6 (set (pc)
        (label_ref 459)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 461 460 112)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 112 461 113 7 43 "" [8 uses])

(note 113 112 459 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 40, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 459 113 458 40 77 "" [1 uses])

(note 458 459 115 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 115 458 116 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 tty+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 116 115 118 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 238)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 40, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 118 116 120 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 120 118 121 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 gotPartial+0 S4 A128])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 121 120 123 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 123 121 124 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 124 123 125 9 (set (reg/f:SI 79 [ iftmp.36 ])
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC30") [flags 0x2] <string_cst 0x8c4c00>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (expr_list:REG_EQUAL (symbol_ref/f:SI ("*LC30") [flags 0x2] <string_cst 0x8c4c00>)
        (nil)))

(jump_insn 125 124 126 9 (set (pc)
        (label_ref 130)) 517 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79

(barrier 126 125 127)

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 127 126 128 10 46 "" [1 uses])

(note 128 127 129 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 129 128 130 10 (set (reg/f:SI 79 [ iftmp.36 ])
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC31") [flags 0x2] <string_cst 0x8c4d20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (expr_list:REG_EQUAL (symbol_ref/f:SI ("*LC31") [flags 0x2] <string_cst 0x8c4d20>)
        (nil)))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79
(code_label 130 129 131 11 48 "" [1 uses])

(note 131 130 132 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 133 132 134 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 134 133 135 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 79 [ iftmp.36 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 79 [ iftmp.36 ])
        (nil)))

(insn 135 134 136 11 (set (reg:SI 105 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 136 135 137 11 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 105 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 105 [ interp ])
        (nil)))

(call_insn 137 136 138 11 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetVar2Ex$stub") <function_decl 0x621800 Tcl_GetVar2Ex>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 138 137 139 11 (set (reg:SI 78 [ D.14272 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 139 138 141 11 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 promptCmdPtr+0 S4 A32])
        (reg:SI 78 [ D.14272 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78 [ D.14272 ])
        (nil)))

(insn 141 139 142 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 promptCmdPtr+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 142 141 144 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 164)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 144 142 145 12 50 ("defaultPrompt") [1 uses])

(note 145 144 147 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 147 145 148 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 gotPartial+0 S4 A128])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 148 147 150 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 227)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 150 148 151 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 151 150 152 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 152 151 154 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 227)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 154 152 156 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 156 154 157 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 157 156 158 14 (set (reg/f:SI 106)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC32") [flags 0x2] <string_cst 0x8c6080>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 158 157 159 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 106)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 106)
        (nil)))

(insn 159 158 160 14 (set (reg:SI 107 [ outChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 160 159 161 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 107 [ outChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 107 [ outChannel ])
        (nil)))

(call_insn 161 160 227 14 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteChars$stub") <function_decl 0x626d80 Tcl_WriteChars>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 19, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 227 161 228 19 51 "" [3 uses])

(note 228 227 230 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 230 228 231 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 231 230 454 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 238)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 19, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 39, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 454 231 456 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(jump_insn 456 454 457 39 (set (pc)
        (label_ref 455)) 517 {jump} (nil)
    (nil))
;; End of basic block 39, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 457 456 164)

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 164 457 165 15 49 "" [1 uses])

(note 165 164 167 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 167 165 168 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 168 167 169 15 (set (reg:SI 108 [ promptCmdPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 promptCmdPtr+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 169 168 170 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 108 [ promptCmdPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 108 [ promptCmdPtr ])
        (nil)))

(insn 170 169 171 15 (set (reg:SI 109 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 171 170 172 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 109 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 109 [ interp ])
        (nil)))

(call_insn 172 171 173 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_EvalObjEx$stub") <function_decl 0x61e800 Tcl_EvalObjEx>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 173 172 174 15 (set (reg:SI 77 [ D.14273 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 174 173 176 15 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 code+0 S4 A32])
        (reg:SI 77 [ D.14273 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ D.14273 ])
        (nil)))

(insn 176 174 177 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 177 176 178 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 178 177 179 15 (set (reg:SI 76 [ D.14274 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 179 178 181 15 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 inChannel+0 S4 A32])
        (reg:SI 76 [ D.14274 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ D.14274 ])
        (nil)))

(insn 181 179 182 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 182 181 183 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 183 182 184 15 (set (reg:SI 75 [ D.14275 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 184 183 186 15 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])
        (reg:SI 75 [ D.14275 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 75 [ D.14275 ])
        (nil)))

(insn 186 184 187 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 187 186 188 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 188 187 189 15 (set (reg:SI 74 [ D.14276 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 189 188 191 15 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])
        (reg:SI 74 [ D.14276 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.14276 ])
        (nil)))

(insn 191 189 192 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 code+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 192 191 194 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 227)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 194 192 196 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 196 194 197 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 197 196 199 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 216)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 199 197 201 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 201 199 202 17 (set (reg:SI 110 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 202 201 203 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 110 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 110 [ interp ])
        (nil)))

(call_insn 203 202 204 17 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetObjResult$stub") <function_decl 0x605580 Tcl_GetObjResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 204 203 205 17 (set (reg:SI 73 [ D.14277 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 205 204 206 17 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 73 [ D.14277 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ D.14277 ])
        (nil)))

(insn 206 205 207 17 (set (reg:SI 111 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 207 206 208 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 111 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 111 [ errChannel ])
        (nil)))

(call_insn 208 207 210 17 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteObj$stub") <function_decl 0x626f80 Tcl_WriteObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 210 208 211 17 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 211 210 212 17 (set (reg/f:SI 112)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC29") [flags 0x2] <string_cst 0x8bef20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 212 211 213 17 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 112)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 112)
        (nil)))

(insn 213 212 214 17 (set (reg:SI 113 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 214 213 215 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 113 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 113 [ errChannel ])
        (nil)))

(call_insn 215 214 216 17 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteChars$stub") <function_decl 0x626d80 Tcl_WriteChars>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 216 215 217 18 55 "" [1 uses])

(note 217 216 219 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 219 217 220 18 (set (reg/f:SI 114)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC33") [flags 0x2] <string_cst 0x8977c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 220 219 221 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 114)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 114)
        (nil)))

(insn 221 220 222 18 (set (reg:SI 115 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 222 221 223 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 115 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 115 [ interp ])
        (nil)))

(call_insn 223 222 225 18 (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_AddErrorInfo$stub") <function_decl 0x5f0600 Tcl_AddErrorInfo>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(jump_insn 225 223 226 18 (set (pc)
        (label_ref 144)) 517 {jump} (nil)
    (nil))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 226 225 455)

;; Start of basic block 20, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 455 226 233 20 76 "" [1 uses])

(note 233 455 235 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 235 233 236 20 (set (reg:SI 116 [ outChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 236 235 237 20 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 116 [ outChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 116 [ outChannel ])
        (nil)))

(call_insn 237 236 238 20 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Flush$stub") <function_decl 0x601a00 Tcl_Flush>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 20, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 21, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 238 237 239 21 44 "" [2 uses])

(note 239 238 241 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 241 239 242 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 inChannel+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 242 241 244 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 405)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 21, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 22, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 244 242 246 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 246 244 247 22 (set (reg:SI 117 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 247 246 248 22 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 117 [ commandPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 117 [ commandPtr ])
        (nil)))

(insn 248 247 249 22 (set (reg:SI 118 [ inChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 inChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 249 248 250 22 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 118 [ inChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 118 [ inChannel ])
        (nil)))

(call_insn 250 249 251 22 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetsObj$stub") <function_decl 0x605e80 Tcl_GetsObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 251 250 252 22 (set (reg:SI 72 [ D.14278 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 252 251 254 22 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 length+0 S4 A128])
        (reg:SI 72 [ D.14278 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ D.14278 ])
        (nil)))

(insn 254 252 255 22 (set (reg:SI 71 [ length.37 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 length+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 255 254 256 22 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 71 [ length.37 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ length.37 ])
        (nil)))

(jump_insn 256 255 258 22 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil)))
;; End of basic block 22, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 23, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 258 256 260 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 260 258 261 23 (set (reg:SI 70 [ length.38 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 length+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 261 260 262 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ length.38 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ length.38 ])
        (nil)))

(jump_insn 262 261 264 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 276)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 23, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 24, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 264 262 265 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 265 264 266 24 (set (reg:SI 119 [ inChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 inChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 266 265 267 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 119 [ inChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 119 [ inChannel ])
        (nil)))

(call_insn 267 266 268 24 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Eof$stub") <function_decl 0x5fe080 Tcl_Eof>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 268 267 269 24 (set (reg:SI 69 [ D.14281 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 269 268 270 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 69 [ D.14281 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ D.14281 ])
        (nil)))

(jump_insn 270 269 272 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 276)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 24, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 25, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 272 270 273 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 273 272 274 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 gotPartial+0 S4 A128])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 274 273 276 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 405)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 25, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 26, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 276 274 277 26 61 "" [2 uses])

(note 277 276 279 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 279 277 280 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 280 279 281 26 (set (reg/f:SI 120)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC29") [flags 0x2] <string_cst 0x8bef20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 281 280 282 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 120)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 120)
        (nil)))

(insn 282 281 283 26 (set (reg:SI 121 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 283 282 284 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 121 [ commandPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 121 [ commandPtr ])
        (nil)))

(call_insn 284 283 286 26 (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_AppendToObj$stub") <function_decl 0x5e5f00 Tcl_AppendToObj>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 286 284 287 26 (set (reg:SI 122 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 287 286 288 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 122 [ commandPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 122 [ commandPtr ])
        (nil)))

(call_insn 288 287 289 26 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_TclObjCommandComplete$stub") <function_decl 0x898700 TclObjCommandComplete>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 289 288 290 26 (set (reg:SI 68 [ D.14282 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 290 289 291 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 68 [ D.14282 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.14282 ])
        (nil)))

(jump_insn 291 290 293 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 26, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 27, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 293 291 295 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 295 293 297 27 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 gotPartial+0 S4 A128])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(jump_insn 297 295 298 27 (set (pc)
        (label_ref 112)) 517 {jump} (nil)
    (nil))
;; End of basic block 27, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 298 297 299)

;; Start of basic block 28, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 299 298 300 28 64 "" [1 uses])

(note 300 299 302 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 302 300 304 28 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 gotPartial+0 S4 A128])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 304 302 305 28 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 305 304 306 28 (set (reg:SI 123 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 306 305 307 28 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 123 [ commandPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 123 [ commandPtr ])
        (nil)))

(insn 307 306 308 28 (set (reg:SI 124 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 308 307 309 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 124 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 124 [ interp ])
        (nil)))

(call_insn 309 308 310 28 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_RecordAndEvalObj$stub") <function_decl 0x60d100 Tcl_RecordAndEvalObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 310 309 311 28 (set (reg:SI 67 [ D.14283 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 311 310 313 28 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [0 code+0 S4 A32])
        (reg:SI 67 [ D.14283 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ D.14283 ])
        (nil)))

(insn 313 311 314 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 314 313 315 28 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 315 314 316 28 (set (reg:SI 66 [ D.14284 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 316 315 318 28 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 inChannel+0 S4 A32])
        (reg:SI 66 [ D.14284 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ D.14284 ])
        (nil)))

(insn 318 316 319 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 4 [0x4])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 319 318 320 28 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 320 319 321 28 (set (reg:SI 65 [ D.14285 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 321 320 323 28 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])
        (reg:SI 65 [ D.14285 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.14285 ])
        (nil)))

(insn 323 321 324 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 8 [0x8])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 324 323 325 28 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStdChannel$stub") <function_decl 0x606380 Tcl_GetStdChannel>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 325 324 326 28 (set (reg:SI 64 [ D.14286 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 326 325 328 28 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])
        (reg:SI 64 [ D.14286 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.14286 ])
        (nil)))

(insn 328 326 329 28 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 329 328 330 28 (set (reg:SI 125 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 330 329 331 28 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 125 [ commandPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 125 [ commandPtr ])
        (nil)))

(call_insn 331 330 333 28 (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_SetObjLength$stub") <function_decl 0x5f0180 Tcl_SetObjLength>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 333 331 334 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 code+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 334 333 336 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 360)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 28, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 29, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 336 334 338 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 338 336 339 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 339 338 341 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 29, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 30, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 341 339 343 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 343 341 344 30 (set (reg:SI 126 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 344 343 345 30 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 126 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 126 [ interp ])
        (nil)))

(call_insn 345 344 346 30 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetObjResult$stub") <function_decl 0x605580 Tcl_GetObjResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 346 345 347 30 (set (reg:SI 63 [ D.14287 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 347 346 348 30 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 63 [ D.14287 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ D.14287 ])
        (nil)))

(insn 348 347 349 30 (set (reg:SI 127 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 349 348 350 30 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 127 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 127 [ errChannel ])
        (nil)))

(call_insn 350 349 352 30 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteObj$stub") <function_decl 0x626f80 Tcl_WriteObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 352 350 353 30 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 353 352 354 30 (set (reg/f:SI 128)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC29") [flags 0x2] <string_cst 0x8bef20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 354 353 355 30 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 128)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 128)
        (nil)))

(insn 355 354 356 30 (set (reg:SI 129 [ errChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 errChannel+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 356 355 357 30 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 129 [ errChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 129 [ errChannel ])
        (nil)))

(call_insn 357 356 358 30 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteChars$stub") <function_decl 0x626d80 Tcl_WriteChars>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(jump_insn 358 357 359 30 (set (pc)
        (label_ref 112)) 517 {jump} (nil)
    (nil))
;; End of basic block 30, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 359 358 360)

;; Start of basic block 31, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 360 359 361 31 66 "" [1 uses])

(note 361 360 363 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 363 361 364 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 tty+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 364 363 366 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 31, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 32, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 366 364 368 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 368 366 369 32 (set (reg:SI 130 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 369 368 370 32 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 130 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 130 [ interp ])
        (nil)))

(call_insn 370 369 371 32 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetObjResult$stub") <function_decl 0x605580 Tcl_GetObjResult>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 371 370 372 32 (set (reg:SI 62 [ D.14288 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 372 371 374 32 (set (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 resultPtr+0 S4 A32])
        (reg:SI 62 [ D.14288 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.14288 ])
        (nil)))

(insn 374 372 375 32 (parallel [
            (set (reg/f:SI 131)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 375 374 376 32 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 131)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 131)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 376 375 377 32 (set (reg:SI 132 [ resultPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 resultPtr+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 377 376 378 32 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 132 [ resultPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 132 [ resultPtr ])
        (nil)))

(call_insn 378 377 380 32 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_GetStringFromObj$stub") <function_decl 0x5ebe00 Tcl_GetStringFromObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 380 378 381 32 (set (reg:SI 61 [ length.39 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 length+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 381 380 382 32 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 61 [ length.39 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ length.39 ])
        (nil)))

(jump_insn 382 381 384 32 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil)))
;; End of basic block 32, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 33, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 384 382 385 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 385 384 386 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 386 385 388 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 33, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 34, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 388 386 390 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 390 388 391 34 (set (reg:SI 133 [ resultPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 resultPtr+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 391 390 392 34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 133 [ resultPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 133 [ resultPtr ])
        (nil)))

(insn 392 391 393 34 (set (reg:SI 134 [ outChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 393 392 394 34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 134 [ outChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 134 [ outChannel ])
        (nil)))

(call_insn 394 393 396 34 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteObj$stub") <function_decl 0x626f80 Tcl_WriteObj>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 396 394 397 34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(insn 397 396 398 34 (set (reg/f:SI 135)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC29") [flags 0x2] <string_cst 0x8bef20>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 398 397 399 34 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 135)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 135)
        (nil)))

(insn 399 398 400 34 (set (reg:SI 136 [ outChannel ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 outChannel+0 S4 A128])) 41 {*movsi_1} (nil)
    (nil))

(insn 400 399 401 34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 136 [ outChannel ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 136 [ outChannel ])
        (nil)))

(call_insn 401 400 402 34 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_WriteChars$stub") <function_decl 0x626d80 Tcl_WriteChars>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(jump_insn 402 401 403 34 (set (pc)
        (label_ref 112)) 517 {jump} (nil)
    (nil))
;; End of basic block 34, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 403 402 463)

(note 463 403 405 NOTE_INSN_LOOP_END)

;; Start of basic block 35, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 405 463 406 35 58 ("done") [2 uses])

(note 406 405 408 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 408 406 409 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 409 408 411 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 427)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 35, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 36, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 411 409 413 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 413 411 414 36 (set (reg/f:SI 137 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 414 413 415 36 (set (reg:SI 60 [ D.14290 ])
        (mem/s/j:SI (reg/f:SI 137 [ commandPtr ]) [0 <variable>.refCount+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 137 [ commandPtr ])
        (nil)))

(insn 415 414 416 36 (parallel [
            (set (reg:SI 59 [ D.14291 ])
                (plus:SI (reg:SI 60 [ D.14290 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 60 [ D.14290 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 416 415 417 36 (set (reg/f:SI 138 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 417 416 418 36 (set (mem/s/j:SI (reg/f:SI 138 [ commandPtr ]) [0 <variable>.refCount+0 S4 A32])
        (reg:SI 59 [ D.14291 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.14291 ])
        (expr_list:REG_DEAD (reg/f:SI 138 [ commandPtr ])
            (nil))))

(insn 418 417 419 36 (set (reg/f:SI 139 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 419 418 420 36 (set (reg:SI 58 [ D.14292 ])
        (mem/s/j:SI (reg/f:SI 139 [ commandPtr ]) [0 <variable>.refCount+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 139 [ commandPtr ])
        (nil)))

(insn 420 419 421 36 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 58 [ D.14292 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.14292 ])
        (nil)))

(jump_insn 421 420 423 36 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 427)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil)))
;; End of basic block 36, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 37, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 423 421 424 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 424 423 425 37 (set (reg:SI 140 [ commandPtr ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 commandPtr+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 425 424 426 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 140 [ commandPtr ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 140 [ commandPtr ])
        (nil)))

(call_insn 426 425 427 37 (call (mem/u/c:QI (symbol_ref:SI ("&L_TclFreeObj$stub") <function_decl 0x5e9300 TclFreeObj>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 37, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 38, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 427 426 428 38 72 "" [2 uses])

(note 428 427 430 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 430 428 431 38 (set (reg:SI 141 [ exitCode ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 exitCode+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 431 430 432 38 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 141 [ exitCode ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 141 [ exitCode ])
        (nil)))

(insn 432 431 433 38 (set (reg/f:SI 142)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC34") [flags 0x2] <string_cst 0x8ccab0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 433 432 434 38 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 142)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))

(insn 434 433 435 38 (set (reg/f:SI 144)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 435 434 436 38 (set (reg:SI 143)
        (mem/u/c:SI (reg/f:SI 144) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 144)
        (nil)))

(insn 436 435 437 38 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 143)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 143)
        (nil)))

(call_insn 437 436 439 38 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 439 437 440 38 (set (reg/f:SI 146)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 440 439 441 38 (set (reg:SI 145)
        (mem/u/c:SI (reg/f:SI 146) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 146)
        (nil)))

(insn 441 440 442 38 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 145)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 145)
        (nil)))

(insn 442 441 443 38 (set (reg:SI 147 [ interp ])
        (mem/f/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 interp+0 S4 A64])) 41 {*movsi_1} (nil)
    (nil))

(insn 443 442 444 38 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 147 [ interp ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 147 [ interp ])
        (nil)))

(call_insn 444 443 445 38 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_Eval$stub") <function_decl 0x5fe580 Tcl_Eval>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 38, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 445 444 0 NOTE_INSN_FUNCTION_END)


;; Function main



Pass 0

  Register 58 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 62 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 67 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 68 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 69 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 72 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 73 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 75 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 76 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 81 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 82 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 87 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 88 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 89 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 92 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 93 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 94 costs: AREG:-1000 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 95 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 97 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 98 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 100 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 101 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 102 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 103 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 104 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 105 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 109 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 110 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 111 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 112 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 113 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 114 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 115 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 116 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 117 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 118 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 119 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 120 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 121 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 122 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 123 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 124 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 125 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 126 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 127 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 128 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 129 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 131 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 132 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 133 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 134 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 135 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 136 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 137 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 138 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:52000 MMX_REGS:52000 FP_TOP_SSE_REGS:52000 FP_SECOND_SSE_REGS:52000 FLOAT_SSE_REGS:52000 FLOAT_INT_REGS:36000 INT_SSE_REGS:52000 FLOAT_INT_SSE_REGS:52000 ALL_REGS:52000 MEM:16000
  Register 139 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 140 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 141 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 142 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 145 costs: AREG:0 DREG:0 CREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_REGS:39000 MMX_REGS:39000 FP_TOP_SSE_REGS:39000 FP_SECOND_SSE_REGS:39000 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:27000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 ALL_REGS:39000 MEM:12000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref GENERAL_REGS or none
  Register 59 pref AREG, else GENERAL_REGS
  Register 60 pref GENERAL_REGS or none
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref AREG, else GENERAL_REGS
  Register 63 pref GENERAL_REGS or none
  Register 64 pref AREG, else GENERAL_REGS
  Register 65 pref AREG, else GENERAL_REGS
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref AREG, else GENERAL_REGS
  Register 69 pref GENERAL_REGS or none
  Register 70 pref AREG, else GENERAL_REGS
  Register 71 pref GENERAL_REGS or none
  Register 72 pref GENERAL_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref AREG, else GENERAL_REGS
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref AREG, else GENERAL_REGS
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref GENERAL_REGS or none
  Register 87 pref GENERAL_REGS or none
  Register 88 pref AREG, else GENERAL_REGS
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref GENERAL_REGS or none
  Register 94 pref AREG, else GENERAL_REGS
  Register 95 pref GENERAL_REGS or none
  Register 96 pref GENERAL_REGS or none
  Register 97 pref GENERAL_REGS or none
  Register 98 pref GENERAL_REGS or none
  Register 99 pref GENERAL_REGS or none
  Register 100 pref GENERAL_REGS or none
  Register 101 pref GENERAL_REGS or none
  Register 102 pref GENERAL_REGS or none
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref GENERAL_REGS or none
  Register 110 pref GENERAL_REGS or none
  Register 111 pref GENERAL_REGS or none
  Register 112 pref GENERAL_REGS or none
  Register 113 pref GENERAL_REGS or none
  Register 114 pref GENERAL_REGS or none
  Register 115 pref GENERAL_REGS or none
  Register 116 pref GENERAL_REGS or none
  Register 117 pref GENERAL_REGS or none
  Register 118 pref GENERAL_REGS or none
  Register 119 pref GENERAL_REGS or none
  Register 120 pref GENERAL_REGS or none
  Register 121 pref GENERAL_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 124 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref GENERAL_REGS or none
  Register 128 pref GENERAL_REGS or none
  Register 129 pref GENERAL_REGS or none
  Register 130 pref GENERAL_REGS or none
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 134 pref GENERAL_REGS or none
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref GENERAL_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref GENERAL_REGS or none
  Register 140 pref GENERAL_REGS or none
  Register 141 pref GENERAL_REGS or none
  Register 142 pref GENERAL_REGS or none
  Register 143 pref FLOAT_INT_SSE_REGS or none
  Register 144 pref FLOAT_INT_SSE_REGS or none
  Register 145 pref GENERAL_REGS or none
146 registers.

Register 58 used 2 times across 2 insns in block 20; set 1 time; GENERAL_REGS or none.

Register 59 used 2 times across 2 insns in block 19; set 1 time; pref AREG, else GENERAL_REGS.

Register 60 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none.

Register 61 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 62 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS.

Register 63 used 2 times across 4 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 64 used 2 times across 2 insns in block 13; set 1 time; pref AREG, else GENERAL_REGS.

Register 65 used 2 times across 2 insns in block 13; set 1 time; pref AREG, else GENERAL_REGS.

Register 66 used 2 times across 4 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 67 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 68 used 2 times across 4 insns in block 11; set 1 time; pref AREG, else GENERAL_REGS.

Register 69 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none.

Register 70 used 2 times across 2 insns in block 7; set 1 time; pref AREG, else GENERAL_REGS.

Register 71 used 2 times across 5 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 72 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 73 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 5; set 1 time; pref AREG, else GENERAL_REGS.

Register 77 used 2 times across 5 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 78 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 79 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 80 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 81 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none.

Register 82 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS.

Register 83 used 2 times across 5 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 84 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 85 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 86 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 87 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 88 used 2 times across 2 insns in block 1; set 1 time; pref AREG, else GENERAL_REGS.

Register 89 used 2 times across 5 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 90 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 91 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 92 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 93 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 94 used 2 times across 2 insns in block 20; set 1 time; pref AREG, else GENERAL_REGS.

Register 95 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none; pointer.

Register 96 used 4 times across 4 insns in block 2; set 2 times; GENERAL_REGS or none; pointer.

Register 97 used 4 times across 4 insns in block 2; set 2 times; GENERAL_REGS or none; pointer.

Register 98 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 99 used 4 times across 4 insns in block 4; set 2 times; GENERAL_REGS or none; pointer.

Register 100 used 4 times across 4 insns in block 4; set 2 times; GENERAL_REGS or none; pointer.

Register 101 used 4 times across 4 insns in block 4; set 2 times; GENERAL_REGS or none; pointer.

Register 102 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 103 used 4 times across 4 insns in block 6; set 2 times; GENERAL_REGS or none; pointer.

Register 104 used 4 times across 4 insns in block 6; set 2 times; GENERAL_REGS or none; pointer.

Register 105 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 106 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none; pointer.

Register 107 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 108 used 2 times across 3 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 109 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 110 used 2 times across 3 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 111 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 112 used 2 times across 3 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 113 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none.

Register 114 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 115 used 4 times across 4 insns in block 11; set 2 times; GENERAL_REGS or none; pointer.

Register 116 used 4 times across 4 insns in block 11; set 2 times; GENERAL_REGS or none; pointer.

Register 117 used 2 times across 2 insns in block 12; set 1 time; GENERAL_REGS or none; pointer.

Register 118 used 4 times across 4 insns in block 13; set 2 times; GENERAL_REGS or none; pointer.

Register 119 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 120 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 121 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 122 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 123 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 124 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 125 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 126 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 127 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 128 used 4 times across 4 insns in block 15; set 2 times; GENERAL_REGS or none; pointer.

Register 129 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 130 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 131 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 132 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 133 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none.

Register 134 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 135 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none.

Register 136 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 137 used 2 times across 2 insns in block 16; set 1 time; GENERAL_REGS or none; pointer.

Register 138 used 4 times across 4 insns in block 17; set 2 times; GENERAL_REGS or none; pointer.

Register 139 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none; pointer.

Register 140 used 2 times across 2 insns in block 18; set 1 time; GENERAL_REGS or none.

Register 141 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none; pointer.

Register 142 used 2 times across 2 insns in block 19; set 1 time; GENERAL_REGS or none.

Register 145 used 3 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

21 basic blocks, 31 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  10
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 2, loop_depth 1, count 0, freq 0.
Predecessors:  10
Successors:  2 (fallthru) 3
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 2 prev 1, next 3, loop_depth 1, count 0, freq 0.
Predecessors:  1 (fallthru)
Successors:  9
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 3 prev 2, next 4, loop_depth 1, count 0, freq 0.
Predecessors:  1
Successors:  4 (fallthru) 5
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 3, next 5, loop_depth 1, count 0, freq 0.
Predecessors:  3 (fallthru)
Successors:  9
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 1, count 0, freq 0.
Predecessors:  3
Successors:  6 (fallthru) 7
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 1, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  9
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 1, count 0, freq 0.
Predecessors:  5
Successors:  8 (fallthru) 11
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 1, count 0, freq 0.
Predecessors:  7 (fallthru)
Successors:  9 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 1, count 0, freq 0.
Predecessors:  2 4 6 8 (fallthru)
Successors:  10 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 1, count 0, freq 0.
Predecessors:  0 9 (fallthru)
Successors:  1 11 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  7 10 (fallthru)
Successors:  12 (fallthru) 13
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  11 (fallthru)
Successors:  13 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  11 12 (fallthru)
Successors:  14 (fallthru) 15
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  13 (fallthru)
Successors:  15 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 15 prev 14, next 16, loop_depth 0, count 0, freq 0.
Predecessors:  13 14 (fallthru)
Successors:  16 (fallthru) 17
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next 17, loop_depth 0, count 0, freq 0.
Predecessors:  15 (fallthru)
Successors:  17 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 17 prev 16, next 18, loop_depth 0, count 0, freq 0.
Predecessors:  15 16 (fallthru)
Successors:  18 (fallthru) 19
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 18 prev 17, next 19, loop_depth 0, count 0, freq 0.
Predecessors:  17 (fallthru)
Successors:  20
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 19 prev 18, next 20, loop_depth 0, count 0, freq 0.
Predecessors:  17
Successors:  20 (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 20 prev 19, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  18 19 (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 1.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 1.
;; Register 67 in 0.
;; Register 68 in 1.
;; Register 69 in 0.
;; Register 70 in 0.
;; Register 71 in 1.
;; Register 72 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 1.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 0.
;; Register 83 in 1.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 86 in 0.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 1.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 94 in 0.
;; Register 95 in 0.
;; Register 96 in 0.
;; Register 97 in 0.
;; Register 98 in 0.
;; Register 99 in 0.
;; Register 100 in 0.
;; Register 101 in 0.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 0.
;; Register 105 in 0.
;; Register 106 in 0.
;; Register 107 in 0.
;; Register 108 in 1.
;; Register 109 in 0.
;; Register 110 in 1.
;; Register 111 in 0.
;; Register 112 in 1.
;; Register 113 in 0.
;; Register 114 in 0.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 0.
;; Register 120 in 0.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 0.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 0.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 0.
;; Register 135 in 0.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 0.
;; Register 140 in 0.
;; Register 141 in 0.
;; Register 142 in 0.
;; Register 145 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 287 0 (set (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(note 287 8 10 0 NOTE_INSN_LOOP_BEG)

(jump_insn 10 287 11 0 (set (pc)
        (label_ref 128)) 517 {jump} (nil)
    (nil))
;; End of basic block 0, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 11 10 12)

;; Start of basic block 1, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 12 11 13 1 81 "" [1 uses])

(note 13 12 15 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 1 (set (reg:SI 93 [ arg.40 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 1 (parallel [
            (set (reg:SI 92 [ D.14351 ])
                (ashift:SI (reg:SI 93 [ arg.40 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 93 [ arg.40 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 17 16 18 1 (set (reg:SI 91 [ D.14352 ])
        (reg:SI 92 [ D.14351 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 92 [ D.14351 ])
        (nil)))

(insn 18 17 19 1 (parallel [
            (set (reg:SI 90 [ D.14353 ])
                (plus:SI (reg:SI 91 [ D.14352 ])
                    (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 argv+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 91 [ D.14352 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 19 18 20 1 (set (reg:SI 89 [ D.14354 ])
        (mem/f:SI (reg:SI 90 [ D.14353 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 90 [ D.14353 ])
        (nil)))

(insn 20 19 21 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 21 20 22 1 (set (reg/f:SI 95)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC35") [flags 0x2] <string_cst 0x8dddb0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 22 21 23 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 95)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 95)
        (nil)))

(insn 23 22 24 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 89 [ D.14354 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 89 [ D.14354 ])
        (nil)))

(call_insn 24 23 25 1 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_subString$stub") <function_decl 0x6c0e00 subString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 25 24 26 1 (set (reg:SI 88 [ D.14355 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 26 25 27 1 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ D.14355 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 88 [ D.14355 ])
        (nil)))

(jump_insn 27 26 29 1 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 1, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 2, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 29 27 31 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 31 29 32 2 (set (reg/f:SI 96)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Gui$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2000 Gui>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 32 31 33 2 (set (reg/f:SI 96)
        (mem/u/c:SI (reg/f:SI 96) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 33 32 35 2 (set (mem/i:SI (reg/f:SI 96) [0 Gui+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 96)
        (nil)))

(insn 35 33 36 2 (set (reg/f:SI 97)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 36 35 37 2 (set (reg/f:SI 97)
        (mem/u/c:SI (reg/f:SI 97) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 37 36 38 2 (set (mem/i:SI (reg/f:SI 97) [0 Batch+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 97)
        (nil)))

(jump_insn 38 37 39 2 (set (pc)
        (label_ref 124)) 517 {jump} (nil)
    (nil))
;; End of basic block 2, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 39 38 40)

;; Start of basic block 3, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 40 39 41 3 82 "" [1 uses])

(note 41 40 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 43 41 44 3 (set (reg:SI 87 [ arg.41 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 44 43 45 3 (parallel [
            (set (reg:SI 86 [ D.14357 ])
                (ashift:SI (reg:SI 87 [ arg.41 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 87 [ arg.41 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 45 44 46 3 (set (reg:SI 85 [ D.14358 ])
        (reg:SI 86 [ D.14357 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 86 [ D.14357 ])
        (nil)))

(insn 46 45 47 3 (parallel [
            (set (reg:SI 84 [ D.14359 ])
                (plus:SI (reg:SI 85 [ D.14358 ])
                    (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 argv+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 85 [ D.14358 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 47 46 48 3 (set (reg:SI 83 [ D.14360 ])
        (mem/f:SI (reg:SI 84 [ D.14359 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 84 [ D.14359 ])
        (nil)))

(insn 48 47 49 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 49 48 50 3 (set (reg/f:SI 98)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC36") [flags 0x2] <string_cst 0x8e2240>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 50 49 51 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 98)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 98)
        (nil)))

(insn 51 50 52 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 83 [ D.14360 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 83 [ D.14360 ])
        (nil)))

(call_insn 52 51 53 3 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_subString$stub") <function_decl 0x6c0e00 subString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 53 52 54 3 (set (reg:SI 82 [ D.14361 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 54 53 55 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ D.14361 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 82 [ D.14361 ])
        (nil)))

(jump_insn 55 54 57 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 57 55 59 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 59 57 60 4 (set (reg/f:SI 99)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 60 59 61 4 (set (reg/f:SI 99)
        (mem/u/c:SI (reg/f:SI 99) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 61 60 63 4 (set (mem/i:SI (reg/f:SI 99) [0 Batch+0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 99)
        (nil)))

(insn 63 61 64 4 (set (reg/f:SI 100)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Gui$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2000 Gui>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 64 63 65 4 (set (reg/f:SI 100)
        (mem/u/c:SI (reg/f:SI 100) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 65 64 67 4 (set (mem/i:SI (reg/f:SI 100) [0 Gui+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 100)
        (nil)))

(insn 67 65 68 4 (set (reg/f:SI 101)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Console$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2100 Console>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 68 67 69 4 (set (reg/f:SI 101)
        (mem/u/c:SI (reg/f:SI 101) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 69 68 70 4 (set (mem/i:SI (reg/f:SI 101) [0 Console+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 101)
        (nil)))

(jump_insn 70 69 71 4 (set (pc)
        (label_ref 124)) 517 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 72)

;; Start of basic block 5, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 72 71 73 5 85 "" [1 uses])

(note 73 72 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 75 73 76 5 (set (reg:SI 81 [ arg.42 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 76 75 77 5 (parallel [
            (set (reg:SI 80 [ D.14363 ])
                (ashift:SI (reg:SI 81 [ arg.42 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 81 [ arg.42 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 77 76 78 5 (set (reg:SI 79 [ D.14364 ])
        (reg:SI 80 [ D.14363 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 80 [ D.14363 ])
        (nil)))

(insn 78 77 79 5 (parallel [
            (set (reg:SI 78 [ D.14365 ])
                (plus:SI (reg:SI 79 [ D.14364 ])
                    (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 argv+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 79 [ D.14364 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 79 78 80 5 (set (reg:SI 77 [ D.14366 ])
        (mem/f:SI (reg:SI 78 [ D.14365 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78 [ D.14365 ])
        (nil)))

(insn 80 79 81 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 81 80 82 5 (set (reg/f:SI 102)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC37") [flags 0x2] <string_cst 0x8e2780>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 82 81 83 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 102)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 102)
        (nil)))

(insn 83 82 84 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 77 [ D.14366 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ D.14366 ])
        (nil)))

(call_insn 84 83 85 5 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_subString$stub") <function_decl 0x6c0e00 subString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 85 84 86 5 (set (reg:SI 76 [ D.14367 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 86 85 87 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 76 [ D.14367 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ D.14367 ])
        (nil)))

(jump_insn 87 86 89 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 89 87 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 91 89 92 6 (set (reg/f:SI 103)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Console$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2100 Console>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 92 91 93 6 (set (reg/f:SI 103)
        (mem/u/c:SI (reg/f:SI 103) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 93 92 95 6 (set (mem/i:SI (reg/f:SI 103) [0 Console+0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 103)
        (nil)))

(insn 95 93 96 6 (set (reg/f:SI 104)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 96 95 97 6 (set (reg/f:SI 104)
        (mem/u/c:SI (reg/f:SI 104) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 97 96 98 6 (set (mem/i:SI (reg/f:SI 104) [0 Batch+0 S4 A32])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 104)
        (nil)))

(jump_insn 98 97 99 6 (set (pc)
        (label_ref 124)) 517 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 99 98 100)

;; Start of basic block 7, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 100 99 101 7 87 "" [1 uses])

(note 101 100 103 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 103 101 104 7 (set (reg:SI 75 [ arg.43 ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 104 103 105 7 (parallel [
            (set (reg:SI 74 [ D.14369 ])
                (ashift:SI (reg:SI 75 [ arg.43 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 410 {*ashlsi3_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 75 [ arg.43 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 105 104 106 7 (set (reg:SI 73 [ D.14370 ])
        (reg:SI 74 [ D.14369 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ D.14369 ])
        (nil)))

(insn 106 105 107 7 (parallel [
            (set (reg:SI 72 [ D.14371 ])
                (plus:SI (reg:SI 73 [ D.14370 ])
                    (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [0 argv+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:SI 73 [ D.14370 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 107 106 108 7 (set (reg:SI 71 [ D.14372 ])
        (mem/f:SI (reg:SI 72 [ D.14371 ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 72 [ D.14371 ])
        (nil)))

(insn 108 107 109 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 41 {*movsi_1} (nil)
    (nil))

(insn 109 108 110 7 (set (reg/f:SI 105)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC38") [flags 0x2] <string_cst 0x8e2c30>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 110 109 111 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 105)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 105)
        (nil)))

(insn 111 110 112 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 71 [ D.14372 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ D.14372 ])
        (nil)))

(call_insn 112 111 113 7 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_subString$stub") <function_decl 0x6c0e00 subString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 113 112 114 7 (set (reg:SI 70 [ D.14373 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 114 113 115 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ D.14373 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.14373 ])
        (nil)))

(jump_insn 115 114 118 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 134)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 8, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 118 115 120 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 120 118 121 8 (set (reg/f:SI 106 [ argv ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 121 120 122 8 (set (reg:SI 69 [ D.14374 ])
        (mem/f:SI (reg/f:SI 106 [ argv ]) [0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 106 [ argv ])
        (nil)))

(insn 122 121 123 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 69 [ D.14374 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 69 [ D.14374 ])
        (nil)))

(call_insn 123 122 124 8 (call (mem:QI (symbol_ref:SI ("printUsage") [flags 0x103] <function_decl 0x87cf80 printUsage>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 8, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 9, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 124 123 125 9 84 "" [3 uses])

(note 125 124 286 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 286 125 127 9 (parallel [
            (set (reg/f:SI 145)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 127 286 128 9 (parallel [
            (set (mem/i:SI (reg/f:SI 145) [0 arg+0 S4 A32])
                (plus:SI (mem/i:SI (reg/f:SI 145) [0 arg+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg/f:SI 145)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
;; End of basic block 9, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 128 127 129 10 80 "" [1 uses])

(note 129 128 131 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 131 129 132 10 (set (reg:SI 107 [ arg ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 132 131 133 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 107 [ arg ])
            (mem/i:SI (reg/f:SI 16 argp) [0 argc+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil)
    (expr_list:REG_DEAD (reg:SI 107 [ arg ])
        (nil)))

(jump_insn 133 132 288 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
;; End of basic block 10, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 288 133 134 10 NOTE_INSN_LOOP_END)

;; Start of basic block 11, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 134 288 135 11 89 "" [1 uses])

(note 135 134 137 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 137 135 138 11 (set (reg/f:SI 108)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("FirstCommand") [flags 0x182] <var_decl 0x87cb80 FirstCommand>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 138 137 139 11 (set (reg:SI 109 [ arg ])
        (mem/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 arg+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 139 138 141 11 (set (mem/i:SI (reg/f:SI 108) [0 FirstCommand+0 S4 A32])
        (reg:SI 109 [ arg ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 109 [ arg ])
        (expr_list:REG_DEAD (reg/f:SI 108)
            (nil))))

(insn 141 139 142 11 (set (reg/f:SI 110)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argc") [flags 0x182] <var_decl 0x87cc00 Argc>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 142 141 143 11 (set (reg:SI 111 [ argc ])
        (mem/i:SI (reg/f:SI 16 argp) [0 argc+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 143 142 144 11 (set (mem/i:SI (reg/f:SI 110) [0 Argc+0 S4 A32])
        (reg:SI 111 [ argc ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 111 [ argc ])
        (expr_list:REG_DEAD (reg/f:SI 110)
            (nil))))

(insn 144 143 145 11 (set (reg/f:SI 112)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Argv") [flags 0x182] <var_decl 0x87cc80 Argv>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 145 144 146 11 (set (reg:SI 113 [ argv ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 146 145 148 11 (set (mem/i:SI (reg/f:SI 112) [0 Argv+0 S4 A32])
        (reg:SI 113 [ argv ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 113 [ argv ])
        (expr_list:REG_DEAD (reg/f:SI 112)
            (nil))))

(insn 148 146 149 11 (set (reg/f:SI 114)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC39") [flags 0x2] <string_cst 0x8e4180>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 149 148 150 11 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 114)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 114)
        (nil)))

(call_insn 150 149 151 11 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_getenv$stub") <function_decl 0x5af180 getenv>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 151 150 152 11 (set (reg:SI 68 [ D.14375 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 152 151 153 11 (set (reg/f:SI 115)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 153 152 154 11 (set (reg/f:SI 115)
        (mem/u/c:SI (reg/f:SI 115) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 154 153 155 11 (set (mem/i:SI (reg/f:SI 115) [0 RootDir+0 S4 A32])
        (reg:SI 68 [ D.14375 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.14375 ])
        (expr_list:REG_DEAD (reg/f:SI 115)
            (nil))))

(insn 155 154 156 11 (set (reg/f:SI 116)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 156 155 157 11 (set (reg/f:SI 116)
        (mem/u/c:SI (reg/f:SI 116) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 157 156 158 11 (set (reg:SI 67 [ RootDir.44 ])
        (mem/i:SI (reg/f:SI 116) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))

(insn 158 157 159 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 67 [ RootDir.44 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 67 [ RootDir.44 ])
        (nil)))

(jump_insn 159 158 161 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 166)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 161 159 163 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 163 161 164 12 (set (reg/f:SI 117)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC40") [flags 0x2] <string_cst 0x8de980>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 164 163 165 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 117)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 117)
        (nil)))

(call_insn 165 164 166 12 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 12, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 13, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 166 165 167 13 91 "" [1 uses])

(note 167 166 169 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 169 167 170 13 (set (reg/f:SI 118)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 170 169 171 13 (set (reg/f:SI 118)
        (mem/u/c:SI (reg/f:SI 118) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 171 170 172 13 (set (reg:SI 66 [ RootDir.45 ])
        (mem/i:SI (reg/f:SI 118) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 118)
        (nil)))

(insn 172 171 173 13 (set (reg/f:SI 119)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC41") [flags 0x2] <string_cst 0x8e45d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 173 172 174 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 119)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))

(insn 174 173 175 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 66 [ RootDir.45 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 66 [ RootDir.45 ])
        (nil)))

(insn 175 174 176 13 (set (reg/f:SI 120)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC42") [flags 0x2] <string_cst 0x8916c0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 176 175 177 13 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 120)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 120)
        (nil)))

(insn 177 176 178 13 (set (reg/f:SI 122)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 178 177 179 13 (set (reg:SI 121)
        (mem/u/c:SI (reg/f:SI 122) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 122)
        (nil)))

(insn 179 178 180 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 121)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 121)
        (nil)))

(call_insn 180 179 182 13 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 182 180 183 13 (set (reg/f:SI 124)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 183 182 184 13 (set (reg:SI 123)
        (mem/u/c:SI (reg/f:SI 124) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 124)
        (nil)))

(insn 184 183 185 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 123)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 123)
        (nil)))

(call_insn 185 184 186 13 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_copyString$stub") <function_decl 0x6c0b80 copyString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 186 185 187 13 (set (reg:SI 65 [ D.14378 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 187 186 188 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 65 [ D.14378 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.14378 ])
        (nil)))

(call_insn 188 187 189 13 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_putenv$UNIX2003$stub") <function_decl 0x5b7080 putenv>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 189 188 190 13 (set (reg:SI 64 [ D.14379 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 190 189 191 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 64 [ D.14379 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 64 [ D.14379 ])
        (nil)))

(jump_insn 191 190 193 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 13, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 14, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 193 191 194 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 14 (set (reg/f:SI 126)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 195 194 196 14 (set (reg:SI 125)
        (mem/u/c:SI (reg/f:SI 126) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 126)
        (nil)))

(insn 196 195 197 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 125)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 125)
        (nil)))

(insn 197 196 198 14 (set (reg/f:SI 127)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC43") [flags 0x2] <string_cst 0x8e4ae0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 198 197 199 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 127)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))

(call_insn 199 198 200 14 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 14, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 15, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 200 199 201 15 93 "" [1 uses])

(note 201 200 203 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 203 201 204 15 (set (reg/f:SI 128)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_RootDir$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2200 RootDir>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 204 203 205 15 (set (reg/f:SI 128)
        (mem/u/c:SI (reg/f:SI 128) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 205 204 206 15 (set (reg:SI 63 [ RootDir.46 ])
        (mem/i:SI (reg/f:SI 128) [0 RootDir+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 128)
        (nil)))

(insn 206 205 207 15 (set (reg/f:SI 129)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC41") [flags 0x2] <string_cst 0x8e45d0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 207 206 208 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 129)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))

(insn 208 207 209 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 63 [ RootDir.46 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 63 [ RootDir.46 ])
        (nil)))

(insn 209 208 210 15 (set (reg/f:SI 130)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC44") [flags 0x2] <string_cst 0x891740>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 210 209 211 15 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 130)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 130)
        (nil)))

(insn 211 210 212 15 (set (reg/f:SI 132)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 212 211 213 15 (set (reg:SI 131)
        (mem/u/c:SI (reg/f:SI 132) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 132)
        (nil)))

(insn 213 212 214 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 131)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 131)
        (nil)))

(call_insn 214 213 216 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_sprintf$stub") <function_decl 0x40b4e800 sprintf>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (nil))

(insn 216 214 217 15 (set (reg/f:SI 134)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 217 216 218 15 (set (reg:SI 133)
        (mem/u/c:SI (reg/f:SI 134) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 134)
        (nil)))

(insn 218 217 219 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 133)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 133)
        (nil)))

(call_insn 219 218 220 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_copyString$stub") <function_decl 0x6c0b80 copyString>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 220 219 221 15 (set (reg:SI 62 [ D.14381 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 221 220 222 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 62 [ D.14381 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.14381 ])
        (nil)))

(call_insn 222 221 223 15 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_putenv$UNIX2003$stub") <function_decl 0x5b7080 putenv>) [0 S1 A8])
            (const_int 16 [0x10]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 223 222 224 15 (set (reg:SI 61 [ D.14382 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 224 223 225 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 61 [ D.14382 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ D.14382 ])
        (nil)))

(jump_insn 225 224 227 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 234)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 16, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 227 225 228 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 228 227 229 16 (set (reg/f:SI 136)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Buffer$non_lazy_ptr") [flags 0x100] <var_decl 0x6cef80 Buffer>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 229 228 230 16 (set (reg:SI 135)
        (mem/u/c:SI (reg/f:SI 136) [0 S4 A8])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 136)
        (nil)))

(insn 230 229 231 16 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 135)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 135)
        (nil)))

(insn 231 230 232 16 (set (reg/f:SI 137)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref/f:SI ("*LC43") [flags 0x2] <string_cst 0x8e4ae0>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 232 231 233 16 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 137)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))

(call_insn 233 232 234 16 (call (mem/u/c:QI (symbol_ref:SI ("&L_fatalError$stub") <function_decl 0x6bf580 fatalError>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 16, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 17, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 234 233 235 17 95 "" [1 uses])

(note 235 234 237 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(call_insn 237 235 239 17 (call (mem/u/c:QI (symbol_ref:SI ("&L_initializeSimulator$stub") <function_decl 0x731800 initializeSimulator>) [0 S1 A8])
        (const_int 0 [0x0])) 525 {*call_0} (nil)
    (nil)
    (nil))

(insn 239 237 240 17 (set (reg/f:SI 138)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("&L_Batch$non_lazy_ptr") [flags 0x100] <var_decl 0x6d2080 Batch>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 240 239 241 17 (set (reg/f:SI 138)
        (mem/u/c:SI (reg/f:SI 138) [0 S4 A8])) 41 {*movsi_1} (nil)
    (nil))

(insn 241 240 242 17 (set (reg:SI 60 [ Batch.47 ])
        (mem/i:SI (reg/f:SI 138) [0 Batch+0 S4 A32])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 138)
        (nil)))

(insn 242 241 243 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 60 [ Batch.47 ])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ Batch.47 ])
        (nil)))

(jump_insn 243 242 245 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 254)
            (pc))) 503 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 18, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 245 243 246 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 246 245 247 18 (set (reg/f:SI 139)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Tcl_AppInit") [flags 0x103] <function_decl 0x6b7f00 Tcl_AppInit>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 247 246 248 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 139)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))

(insn 248 247 249 18 (set (reg:SI 140 [ argv ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 249 248 250 18 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 140 [ argv ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 140 [ argv ])
        (nil)))

(insn 250 249 251 18 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 251 250 252 18 (call (mem:QI (symbol_ref:SI ("Tcl_Main2") [flags 0x103] <function_decl 0x898a00 Tcl_Main2>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(jump_insn 252 251 253 18 (set (pc)
        (label_ref 266)) 517 {jump} (nil)
    (nil))
;; End of basic block 18, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 253 252 254)

;; Start of basic block 19, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 254 253 255 19 97 "" [1 uses])

(note 255 254 257 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(call_insn 257 255 258 19 (set (reg:SI 0 ax)
        (call (mem/u/c:QI (symbol_ref:SI ("&L_Tcl_CreateInterp$stub") <function_decl 0x5f6a80 Tcl_CreateInterp>) [0 S1 A8])
            (const_int 0 [0x0]))) 692 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 258 257 259 19 (set (reg:SI 59 [ D.14384 ])
        (reg:SI 0 ax)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 259 258 260 19 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 59 [ D.14384 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.14384 ])
        (nil)))

(insn 260 259 261 19 (set (reg/f:SI 141)
        (plus:SI (reg:SI 3 bx)
            (const:SI (minus:SI (symbol_ref:SI ("Tcl_AppInit") [flags 0x103] <function_decl 0x6b7f00 Tcl_AppInit>)
                    (symbol_ref:SI ("<pic base>") [flags 0x180]))))) 195 {*lea_1} (nil)
    (nil))

(insn 261 260 262 19 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 141)) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 141)
        (nil)))

(insn 262 261 263 19 (set (reg:SI 142 [ argv ])
        (mem/f/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) 41 {*movsi_1} (nil)
    (nil))

(insn 263 262 264 19 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 142 [ argv ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 142 [ argv ])
        (nil)))

(insn 264 263 265 19 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 41 {*movsi_1} (nil)
    (nil))

(call_insn 265 264 266 19 (call (mem/u/c:QI (symbol_ref:SI ("&L_Tk_MainEx$stub") <function_decl 0x83e080 Tk_MainEx>) [0 S1 A8])
        (const_int 16 [0x10])) 525 {*call_0} (nil)
    (nil)
    (nil))
;; End of basic block 19, registers live:
 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 20, registers live: 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 266 265 267 20 99 "" [1 uses])

(note 267 266 269 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 269 267 270 20 (set (reg:SI 58 [ D.14385 ])
        (const_int 0 [0x0])) 41 {*movsi_1} (nil)
    (nil))

(insn 270 269 273 20 (set (reg:SI 94 [ <result> ])
        (reg:SI 58 [ D.14385 ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.14385 ])
        (nil)))

(note 273 270 276 20 NOTE_INSN_FUNCTION_END)

(insn 276 273 282 20 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 94 [ <result> ])) 41 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 94 [ <result> ])
        (nil)))

(insn 282 276 0 20 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 20, registers live:
 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

